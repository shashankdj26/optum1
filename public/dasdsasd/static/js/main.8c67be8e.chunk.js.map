{"version":3,"sources":["firebase.js","const.js","component/min-component/emoji.js","component/home.js","App.js","registerServiceWorker.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authx","auth","dbx","firestore","rdbx","storage","database","AppString","USERS_DOC","DEFAULT_AVATAR","ADMIN_DOC","ADMIN_TABLE","STALLID","STALL_ONLINE","DEFULT_MESSAGE","emojis","Home","props","chatWithStallManager","stallID","count","state","allStallAdmin","AdminList","length","i","stallName","setState","stallExternalName","externalName","singleChat","adminUID","person","getUserAvatarImageByID","uid","messages","givenDB","fromDB","dbName","stallUserID","msgs","ref","child","on","snap","val","push","time","name","msg","text","console","log","tempArray","once","snapshot","exists","set","Date","now","sortArrayElements","j","tmp","id","userType","userRef","defaultUrl","snapThis","forEach","key","profile_picture","userAvatar","stallManagerAvatar","pushMsg","event","preventDefault","trim","uidArr","split","removeNotification","notification","scrollToBottom","messagesContainer","ReactDOM","findDOMNode","scroll","scrollHeight","openEmoji","emoji","document","querySelector","style","display","openEmojiClose","pickEmoji","emo","prevText","srotingMessageFromTime","a","b","signout","localStorage","setItem","isLogout","window","ReactStallManager","cachedHits","getItem","cc","JSON","parse","username","stall_id","this","removeItem","stall_Id","collection","doc","get","then","fun","manager","data","className","src","alt","width","el","map","message","textTransform","color","moment","fromNow","placeholder","onChange","e","target","value","require","onFocus","onClick","type","role","Component","App","user","getUserDetails","email","Promise","resolve","reject","dbref","orderByChild","equalTo","query","Object","keys","code","user_ActiveStatus","current_user_uid","userStatusDatabaseRef","isOfflineForDatabase","StateMode","isOnlineForDatabase","onDisconnect","addUserList","rootRef","userImage","photoURL","company","userName","displayName","fullName","isLogin","loginWithGmail","password","signInWithEmailAndPassword","result","catch","error","errorMessage","onAuthStateChanged","urlParam","location","href","userData","update","stringify","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oTA4BAA,IAAIC,cAXS,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,sDACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAMC,EAAQV,IAAIW,OACZC,EAAMZ,IAAIa,YAEVC,GADUd,IAAIe,UACPf,IAAIgB,Y,GACEhB,IAAIgB,S,uBCjCVC,EAAY,CACrBC,UAAW,aACXC,eAAgB,2EAGhBC,UAAU,QACVC,YAAY,YAGZC,QAAU,cACVC,aAAa,2BAEbC,eAAe,oCCZNC,EAAS,CAClB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,SACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,SACA,eACA,SACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA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","file":"static/js/main.8c67be8e.chunk.js","sourcesContent":["import app from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/database\";\r\n\r\n// var config = {\r\n//   apiKey: \"AIzaSyDMRfZeFWKFTKQuJwZV-kBnrjXVMg2-8pA\",\r\n//   authDomain: \"carivs-uk.firebaseapp.com\",\r\n//   databaseURL: \"https://carivs-uk.firebaseio.com\",\r\n//   projectId: \"carivs-uk\",\r\n//   storageBucket: \"carivs-uk.appspot.com\",\r\n//   messagingSenderId: \"945362621408\",\r\n//   appId: \"1:945362621408:web:f73567da1ec0c89570d185\",\r\n//   measurementId: \"G-Z3VLRTGMM5\"\r\n// };\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyDzGNeI8hwj5UZNVcUaD4yfMVK35yvj0X8\",\r\n  authDomain: \"ht-virutalevent.firebaseapp.com\",\r\n  databaseURL: \"https://ht-virutalevent-default-rtdb.firebaseio.com\",\r\n  projectId: \"ht-virutalevent\",\r\n  storageBucket: \"ht-virutalevent.appspot.com\",\r\n  messagingSenderId: \"306628308360\",\r\n  appId: \"1:306628308360:web:6a285b18ec9e784c715e3d\",\r\n  measurementId: \"G-59S3S9W3E2\",\r\n};\r\n\r\napp.initializeApp(config);\r\nconst authx = app.auth();\r\nconst dbx = app.firestore();\r\nconst storage = app.storage();\r\nconst rdbx = app.database();\r\nconst rdatabasex = app.database;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    this.app = app;\r\n    this.auth = app.auth();\r\n    this.db = app.firestore();\r\n    this.firestore = app.firestore();\r\n    this.database = app.database();\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\nexport { dbx, authx, storage, rdbx, rdatabasex };\r\n","export const AppString = {\r\n    USERS_DOC: \"usersTable\", // Cloud Firestore - user Doc\r\n    DEFAULT_AVATAR :'https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png', //User default avatrt if not have\r\n   \r\n   \r\n    ADMIN_DOC:'Admin',// Cloud Firestore - Admin Doc\r\n    ADMIN_TABLE:'chatAdmin',// Cloud Firestore - Admin Doc - SubCollection\r\n                            //Inside above subcollection array of map \"AdminList\" -0) adminUID: ,stallName: \r\n\r\n    STALLID : 'LobbyStall1',//Stall ID/Name \r\n    STALL_ONLINE:'/user_status_stall_chat/', //Realtime Database - for storing chat user online in chat window\r\n\r\n    DEFULT_MESSAGE:'Hello, how can I help you today?',//Default message\r\n}","export const emojis = [\n    '😄',\n    '😃',\n    '😀',\n    '😊',\n    '😉',\n    '😍',\n    '😘',\n    '😚',\n    '😗',\n    '😙',\n    '😜',\n    '😝',\n    '😛',\n    '😳',\n    '😁',\n    '😔',\n    '😌',\n    '😒',\n    '😞',\n    '😣',\n    '😢',\n    '😂',\n    '😭',\n    '😪',\n    '😥',\n    '😰',\n    '😅',\n    '😓',\n    '😩',\n    '😫',\n    '😨',\n    '😱',\n    '😠',\n    '😡',\n    '😤',\n    '😖',\n    '😆',\n    '😋',\n    '😷',\n    '😎',\n    '😴',\n    '😵',\n    '😲',\n    '😟',\n    '😦',\n    '😧',\n    '👿',\n    '😮',\n    '😬',\n    '😐',\n    '😕',\n    '😯',\n    '😏',\n    '😑',\n    '👲',\n    '👳',\n    '👮',\n    '👷',\n    '💂',\n    '👶',\n    '👦',\n    '👧',\n    '👨',\n    '👩',\n    '👴',\n    '👵',\n    '👱',\n    '👼',\n    '👸',\n    '😺',\n    '😸',\n    '😻',\n    '😽',\n    '😼',\n    '🙀',\n    '😿',\n    '😹',\n    '😾',\n    '👹',\n    '👺',\n    '🙈',\n    '🙉',\n    '🙊',\n    '💀',\n    '👽',\n    '💩',\n    '🔥',\n    '✨',\n    '🌟',\n    '💫',\n    '💥',\n    '💢',\n    '💦',\n    '💧',\n    '💤',\n    '💨',\n    '👂',\n    '👀',\n    '👃',\n    '👅',\n    '👄',\n    '👍',\n    '👎',\n    '👌',\n    '👊',\n    '✊',\n    '👋',\n    '✋',\n    '👐',\n    '👆',\n    '👇',\n    '👉',\n    '👈',\n    '🙌',\n    '🙏',\n    '👏',\n    '💪',\n    '🚶',\n    '🏃',\n    '💃',\n    '👫',\n    '👪',\n    '💏',\n    '💑',\n    '👯',\n    '🙆',\n    '🙅',\n    '💁',\n    '🙋',\n    '💆',\n    '💇',\n    '💅',\n    '👰',\n    '🙎',\n    '🙍',\n    '🙇',\n    '🎩',\n    '👑',\n    '👒',\n    '👟',\n    '👞',\n    '👡',\n    '👠',\n    '👢',\n    '👕',\n    '👔',\n    '👚',\n    '👗',\n    '🎽',\n    '👖',\n    '👘',\n    '👙',\n    '💼',\n    '👜',\n    '👝',\n    '👛',\n    '👓',\n    '🎀',\n    '🌂',\n    '💄',\n    '💛',\n    '💙',\n    '💜',\n    '💚',\n    '💔',\n    '💗',\n    '💓',\n    '💕',\n    '💖',\n    '💞',\n    '💘',\n    '💌',\n    '💋',\n    '💍',\n    '💎',\n    '👤',\n    '💬',\n    '👣',\n]","import React, { Component } from 'react';\nimport { authx, rdbx, dbx } from \"../firebase\";\nimport ReactDOM from 'react-dom';\nimport moment from 'moment'\nimport { AppString } from \"../const\";\n\nimport { emojis } from \"./min-component/emoji\";\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            uid: null,\n            name: null,\n            messages: [],\n            text: '',\n            emoji: emojis,\n            stallID: '',\n            allStallAdmin: [],\n            stallManagerAvatar: AppString.DEFAULT_AVATAR,//Default Image\n            userAvatar: AppString.DEFAULT_AVATAR,//Default Image\n            stallName: '',\n            stallExternalName: '',\n            stallUserID: ''\n        }\n        window.ReactStallManager = this;\n    }\n\n    //React Hook\n    componentWillMount() {\n        const cachedHits = localStorage.getItem('loginKey');\n        if (cachedHits) {\n            let cc = JSON.parse(cachedHits);\n            let uid = cc.uid;\n            let username = cc.username;\n            let stall_id = cc.stallID;\n            this.state.stallID = stall_id;\n            this.setState({ uid: uid, name: username, stallID: stall_id })\n            localStorage.removeItem(\"loginKey\");\n        } else {\n\n            localStorage.removeItem(\"loginKey\");\n            this.props.isLogout();\n            // this.props.isLogout()\n\n        }\n\n        //End LoginInfo\n\n        let stall_Id = this.state.stallID;\n\n        dbx.collection(AppString.ADMIN_DOC).doc(AppString.ADMIN_TABLE).get().then(fun => {\n            let manager = fun.data();\n            this.state.allStallAdmin = manager;\n            //This is consider as default stall user\n            for (let i = 0; i < manager.AdminList.length; i++) {\n\n                if (manager.AdminList[i].stallName == stall_Id) {\n                    console.log(manager.AdminList[i])\n                    this.setState({ stallExternalName: manager.AdminList[i].externalName ? manager.AdminList[i].externalName : manager.AdminList[i].stallName })\n                    this.setState({ stallName: manager.AdminList[i].stallName })\n                    this.singleChat(manager.AdminList[i].adminUID);\n                    break;\n                }\n            }\n            //console.log(manager.AdminList);\n            // this.singleChat(manager.managerID);\n        });\n\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    //Change Chat manager\n    chatWithStallManager = (stallID) => {\n\n        let count = this.state.allStallAdmin.AdminList.length;\n        for (let i = 0; count; i++) {\n\n            if (this.state.allStallAdmin.AdminList[i].stallName == stallID) {\n                this.setState({ stallExternalName: this.state.allStallAdmin.AdminList[i].externalName ? this.state.allStallAdmin.AdminList[i].externalName : this.state.allStallAdmin.AdminList[i].stallName })\n                this.setState({ stallName: this.state.allStallAdmin.AdminList[i].stallName })\n                this.singleChat(this.state.allStallAdmin.AdminList[i].adminUID);\n                break;\n            }\n        }\n\n    }\n    // window.ReactStallManager.chatWithStallManager('Stall A')\n    //Select Single Person\n    singleChat = (person) => {\n\n        this.getUserAvatarImageByID(this.state.uid, 0); //Get Corrent user Image\n        this.getUserAvatarImageByID(person, 1); //Get Stall Manager Imager\n\n        this.setState({ messages: [] });\n        let givenDB = this.state.uid + '+' + person;\n        let fromDB = person + '+' + this.state.uid;\n        this.setState({ dbName: givenDB });\n        this.setState({ stallUserID: person });\n\n        let msgs = [];\n        const rootRef = rdbx.ref().child(this.state.stallName).child(givenDB);\n        rootRef.on('child_added', snap => {\n            if (snap.val()) {\n                msgs.push({\n                    uid: snap.val().uid,\n                    time: snap.val().time,\n                    name: snap.val().name,\n                    msg: snap.val().text\n                })\n                this.setState({ messages: msgs })\n            }\n            console.log(msgs.length);\n        });\n        let tempArray = [];\n\n        const rootRef2 = rdbx.ref().child(this.state.stallName).child(fromDB);\n        rootRef2.on('child_added', snap => {\n            if (snap.val()) {\n                msgs.push({\n                    uid: snap.val().uid,\n                    time: snap.val().time,\n                    name: snap.val().name,\n                    msg: snap.val().text\n                });\n                tempArray.push(snap.val().uid);\n                this.setState({ messages: msgs })\n            }\n\n        });\n\n\n        rdbx.ref().child(this.state.stallName).child(fromDB).once('value', snapshot => {\n            if (snapshot.exists()) {\n                console.log('found');\n            }\n            else {\n                const rootRef = rdbx.ref().child(this.state.stallName).child(fromDB);\n                rootRef.push().set({\n                    uid: person,\n                    time: Date.now(),\n                    name: this.state.stallName,\n                    text: AppString.DEFULT_MESSAGE\n                });\n            }\n        })\n        //    console.log(givenDB);\n        //     console.log(fromDB);\n    }\n\n\n    sortArrayElements = (msgs) => {\n        for (let i = 0; i < msgs.length; i++) {\n            for (let j = i + 1; j < msgs.length; j++) {\n                if (msgs[i].time > msgs[j].time) {\n                    let tmp = msgs[i];\n                    msgs[i] = msgs[j];\n                    msgs[j] = tmp;\n                }\n            }\n        }\n        return msgs;\n    }\n\n    getUserAvatarImageByID = (id, userType) => {\n        const userRef = rdbx.ref('usersTable');\n        let defaultUrl = AppString.DEFAULT_AVATAR;\n        var snapThis = this;\n        userRef.on('value', (snapshot) => {\n            snapshot.forEach(function (child) {\n                //  console.log(child.key);   \n                if (id === child.key) {\n                    defaultUrl = child.val().profile_picture;\n                    if (userType === 0) {\n                        snapThis.setState({ userAvatar: defaultUrl });\n                    } else {\n                        snapThis.setState({ stallManagerAvatar: defaultUrl });\n                    }\n                }\n            })\n        })\n\n        if (userType === 0) {\n            snapThis.setState({ userAvatar: defaultUrl });\n        } else {\n            this.setState({ stallManagerAvatar: defaultUrl });\n        }\n\n    }\n\n\n    //Send Message\n    pushMsg = (event) => {\n        event.preventDefault();\n        let uid = this.state.uid;\n        let name = this.state.name;\n        let text = this.state.text;\n        let dbName = this.state.dbName;\n\n        if (text.trim() === '') {\n            return\n        } else {\n            //notification\n            if (dbName !== 'chatRoom') {\n                let uidArr = dbName.split('+');\n                const removeNotification = rdbx.ref('notification').child(uid).child(uidArr[1]);\n                const notification = rdbx.ref().child('notification').child(uidArr[1]);\n\n                notification.child(uid).once('value', snapshot => {\n                    if (snapshot.val()) {\n                        notification.child(uid).set({\n                            count: snapshot.val().count + 1\n                        })\n                    } else {\n                        notification.child(uid).set({\n                            count: 1\n                        })\n                    }\n                })\n                removeNotification.set({\n                    count: 0\n                })\n            }\n\n            const rootRef = rdbx.ref().child(this.state.stallName).child(dbName);\n            rootRef.push().set({\n                uid: uid,\n                time: Date.now(),\n                name: name,\n                text: text\n            });\n\n            this.setState({ text: '' });\n        }\n        //console.log('message send');\n\n    }\n\n    //Scroll message UI-kit\n    scrollToBottom = () => {\n        const messagesContainer = ReactDOM.findDOMNode(this.messagesContainer);\n        //console.log(messagesContainer.scrollHeight);\n        messagesContainer.scroll(0, messagesContainer.scrollHeight);\n    }\n    // emoji open\n    openEmoji = () => {\n        let emoji = document.querySelector('.emoji');\n        (emoji.style.display === 'block')\n            ? emoji.style.display = \"none\"\n            : emoji.style.display = \"block\"\n    }\n    openEmojiClose = () => {\n        let emoji = document.querySelector('.emoji');\n        if (emoji.style.display === 'block') { emoji.style.display = \"none\" }\n    }\n\n    pickEmoji = (emo) => {\n        let prevText = this.state.text;\n        this.setState({ text: prevText + emo })\n    }\n\n\n    //Sorting by time\n    srotingMessageFromTime = (a, b) => {\n        return a.time > b.time;\n    }\n\n    signout = () => {\n        localStorage.setItem('loginKey', []);\n        this.props.isLogout();\n    }\n\n    render() {\n        return (\n            <div className=\"main__container\">\n                <div className=\"chat_header\">\n                    <img src={this.state.stallManagerAvatar} alt=\"avatar\" width=\"36\" />\n\n                    <div className=\"stallName\">{this.state.stallExternalName}</div>\n                    {/* <button className=\"signout\" onClick={this.signout}> Signout </button> */}\n                </div>\n                <div className=\"wrapper\">\n                    <div className=\"right__section\">\n\n                        <div className=\"message__box\" ref={(el) => { this.messagesContainer = el; }}>\n                            {this.sortArrayElements(this.state.messages).map(\n                                (message, i) => {\n                                    if (message.uid === this.state.uid) {\n                                        return (\n                                            <div className=\"msg__text\" key={i}>\n                                                <div> <img src={this.state.userAvatar} alt=\"avatar\" /> </div>\n                                                <span>\n                                                    <strong style={{ textTransform: 'capitalize', color: '#9E9E9E' }}>{message.name}</strong><br />\n                                                    {message.msg}\n                                                    <br />\n                                                    <small style={{ color: '#9E9E9E' }}>{moment(message.time).fromNow()}</small>\n                                                </span>\n                                            </div>\n                                        )\n                                    } else {\n                                        return (\n                                            <div className=\"msg__text__right\" key={i}>\n\n                                                <div> <img src={this.state.stallManagerAvatar} alt=\"avatar\" /> </div>\n                                                <span>\n                                                    <strong style={{ textTransform: 'capitalize', color: '#9E9E9E' }}>{message.name}</strong><br />\n                                                    {message.msg}\n                                                    <br />\n                                                    <small style={{ color: '#9E9E9E' }}>{moment(message.time).fromNow()}</small>\n                                                </span>\n                                            </div>\n                                        )\n                                    }\n                                }\n                            )\n                            }\n\n                        </div>\n                        <form>\n                            <div className=\"message__type__box\">\n                                <input\n                                    placeholder=\"Type Your Message\"\n                                    onChange={(e) => { this.setState({ text: e.target.value }) }}\n                                    value={this.state.text}\n                                    require=\"true\"\n                                    onFocus={this.openEmojiClose}\n                                />\n                                <span className=\"emojiIcon\" onClick={this.openEmoji}> ☺ </span>\n                                <button type=\"submit\" onClick={this.pushMsg} > <i className=\"glyphicon glyphicon-send\"></i> </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"emoji\">\n                    {this.state.emoji.map(\n                        (emo, i) =>\n                            <a key={i} onClick={() => { this.pickEmoji(emo) }}> <span role=\"img\">{emo}</span> </a>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { authx, rdbx } from \"./firebase\";\nimport Home from \"./component/home\";\nimport { AppString } from \"./const\";\n\n\nclass App extends Component {\n\n  state = {\n    user: null\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLogin: false\n    }\n  }\n\n  getUserDetails = (email) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let path = '/users'\n        var dbref = rdbx.ref(path).orderByChild('email').equalTo(email);\n        const query = await dbref.once(\"value\")\n        if (query.exists()) {\n          let key = Object.keys(query.val())[0]\n          resolve(query.val()[key])\n        } else {\n          reject({\n            code: \"NoUserFound\",\n            message: \"No Such User Is Registered\"\n          })\n        }\n      } catch (err) {\n        console.log(err)\n        reject(err)\n      }\n    })\n  }\n\n  componentDidMount() {\n    authx.onAuthStateChanged(async (user) => {\n      if (user) {\n        let urlParam = window.location.href.split('?')[1]\n        if (urlParam) {\n          AppString.STALLID = urlParam\n        }\n        console.log(AppString)\n        // User is signed in.\n        console.log(user.uid);\n        //get company name\n        const userData = await this.getUserDetails(user.email);\n        if (userData) {\n          if (userData.company) {\n            user.company = userData.company;\n          }\n        }\n        this.user_ActiveStatus(user.uid);\n        this.setState({ user: { id: user.email, name: user.displayName } })\n\n        //If already registred user\n        let userRef = rdbx.ref().child(AppString.USERS_DOC).child(user.uid);\n\n        userRef.once(\"value\", snapshot => {\n\n          var isAvailable = snapshot.val();\n\n          if (!isAvailable) {\n            this.addUserList(user);\n          } else {\n            //Check Default Image Is Their or not\n            if (user.photoURL) {\n              userRef.update({ profile_picture: user.photoURL });\n            } else {\n              userRef.update({ profile_picture: AppString.DEFAULT_AVATAR });\n            }\n          }\n          console.log(AppString);\n\n          localStorage.setItem(\n            \"loginKey\",\n            JSON.stringify({\n              uid: user.uid,\n              username: user.displayName,\n              stallID: AppString.STALLID,\n            })\n          );\n          this.isLogin();\n          console.log('1st This');\n        });\n\n      } else {\n        // No user is signed in.\n        localStorage.removeItem(\"loginKey\");\n        console.log('No user is signed in');\n\n        //User for test only \n        this.loginWithGmail('shubham@dj.com', 'shubham@dj.com123456');\n        //User for test only \n      }\n    });\n  }\n\n  user_ActiveStatus = (current_user_uid) => {\n\n    let uid = current_user_uid;\n\n    let userStatusDatabaseRef = rdbx.ref(AppString.STALL_ONLINE + uid + '/State/');\n\n    let isOfflineForDatabase = {\n      StateMode: 'offline',\n    };\n\n    let isOnlineForDatabase = {\n      StateMode: 'online',\n    };\n\n    rdbx.ref('.info/connected').on('value', function (snapshot) {\n      if (snapshot.val() == false) {\n        return;\n      };\n      userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function () {\n        userStatusDatabaseRef.set(isOnlineForDatabase);\n      });\n    });\n  }\n\n  addUserList = user => {\n    const rootRef = rdbx.ref().child(AppString.USERS_DOC).child(user.uid);\n\n    let userImage = '';\n    if (user.photoURL) {\n      userImage = user.photoURL;\n    } else {\n      userImage = AppString.DEFAULT_AVATAR;\n    }\n\n    if (user.company) {\n      rootRef.set({\n        userName: user.displayName ? user.displayName : user.email.split('@')[0],\n        profile_picture: userImage,\n        fullName: user.displayName ? user.displayName : user.email.split('@')[0],\n        email: user.email,\n        company: user.company,\n      });\n    } else {\n      rootRef.set({\n        userName: user.displayName ? user.displayName : user.email.split('@')[0],\n        profile_picture: userImage,\n        fullName: user.displayName ? user.displayName : user.email.split('@')[0],\n        email: user.email\n      });\n    }\n\n\n  };\n\n  isLogin = () => {\n    this.setState({ isLogin: true })\n  }\n  isLogout = () => {\n    this.setState({ isLogin: false })\n  }\n\n  //Only For Text=======\n  loginWithGmail = (email, password) => {\n    authx.signInWithEmailAndPassword(email, password).then(result => {\n      console.log(\"Don't user this only for testing use this login\");\n    }).catch(error => {\n      var errorMessage = error.message;\n      console.log(errorMessage);\n    });\n  };\n  //================\n\n\n  render() {\n    return (\n      <>\n        {(this.state.isLogin)\n          ? <Home isLogout={this.isLogout} />\n          : null\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { authx,rdbx,dbx } from \"./firebase\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}