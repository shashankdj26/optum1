{
  "version": 3,
  "sources": [
    "components/spinner.gif",
    "chat.png",
    "firebase.js",
    "components/client-chat/PublicChat.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "app",
    "initializeApp",
    "apiKey",
    "authDomain",
    "projectId",
    "storageBucket",
    "databaseURL",
    "messagingSenderId",
    "appId",
    "measurementId",
    "authx",
    "auth",
    "dbx",
    "firestore",
    "rdbx",
    "storage",
    "database",
    "fieldValue",
    "FieldValue",
    "UserInfromationTable",
    "PublicChat",
    "props",
    "state",
    "emailFeature",
    "loading",
    "sendable",
    "error",
    "isLoading",
    "messages",
    "channels",
    "replied",
    "lastMessageTime",
    "activeMessages",
    "publicChannelMembers",
    "publicChannel",
    "activeChannel",
    "activeTab",
    "type",
    "ChatType",
    "privateChat",
    "activeMember",
    "searchText",
    "chatuser",
    "notifyEmail",
    "sender_data",
    "email",
    "company",
    "designation",
    "name",
    "reciever_data",
    "getUserData",
    "user",
    "need",
    "i",
    "length",
    "id",
    "getUserDataFromChat",
    "getUserAvatarImage",
    "getUserAvatarImageForPrivChat",
    "handleError",
    "console",
    "setState",
    "setupChatClient",
    "client",
    "log",
    "channelId",
    "getChannelByUniqueName",
    "then",
    "channel",
    "catch",
    "body",
    "code",
    "createChannel",
    "uniqueName",
    "friendlyName",
    "channelName",
    "isPrivate",
    "join",
    "getMessages",
    "messagePage",
    "messagesLoaded",
    "on",
    "message",
    "messageAdded",
    "setInterval",
    "getMembers",
    "membersLoaded",
    "subscribeChannel",
    "getSubscribedChannels",
    "paginator",
    "items",
    "forEach",
    "subscribeChannelMessages",
    "twilioMessageToMessage",
    "sid",
    "text",
    "attributes",
    "timestamp",
    "dateCreated",
    "setCurrentTab",
    "tab",
    "onPublicChanelClick",
    "members",
    "map",
    "member",
    "toMember",
    "identity",
    "filter",
    "vars",
    "split",
    "activateChannel",
    "handleOnline",
    "SaveForNotify",
    "toemail",
    "collection",
    "doc",
    "get",
    "exists",
    "update",
    "notify_to",
    "date",
    "Date",
    "now",
    "set",
    "PublicMessageAddedInFirebase",
    "msg",
    "msgby",
    "serverTimestamp",
    "sentby",
    "PrivateMessageAddedInFirebase",
    "receiver",
    "sender",
    "msgbetween",
    "reciever",
    "previousMessage",
    "push",
    "scroll",
    "value",
    "value1",
    "sendMessage",
    "event",
    "current",
    "onMemberClick",
    "ids",
    "sort",
    "setupChannel",
    "invite",
    "reason",
    "e",
    "sendMail",
    "swal",
    "title",
    "icon",
    "buttons",
    "dangerMode",
    "ok",
    "innerThis",
    "fetch",
    "headers",
    "Accept",
    "method",
    "JSON",
    "stringify",
    "reciver",
    "res",
    "sent",
    "setTimeout",
    "messageDiv",
    "maxScrollTop",
    "scrollHeight",
    "clientHeight",
    "scrollTop",
    "onSearchTextChange",
    "showUserImage",
    "RetunKey",
    "str",
    "Math",
    "floor",
    "random",
    "uimage",
    "React",
    "createRef",
    "this",
    "stallID",
    "window",
    "c",
    "ref",
    "snap",
    "data",
    "val",
    "Object",
    "keys",
    "key",
    "onAuthStateChanged",
    "displayName",
    "photoURL",
    "encodeURIComponent",
    "json",
    "Chat",
    "create",
    "token",
    "shutdown",
    "className",
    "toLocaleLowerCase",
    "includes",
    "x",
    "y",
    "xTimestamp",
    "setFullYear",
    "getFullYear",
    "final",
    "xi",
    "src",
    "Spinner",
    "alt",
    "href",
    "onClick",
    "placeholder",
    "search",
    "onChange",
    "target",
    "Both",
    "style",
    "display",
    "marginRight",
    "width",
    "size",
    "onKeyPress",
    "Component",
    "publicChat",
    "App",
    "user_Name",
    "canEnter",
    "getURLPARAM",
    "urlParam",
    "location",
    "uid",
    "signInWithEmailAndPassword",
    "Boolean",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.ee5285b0.chunk.js",
  "sourcesContent": [
    "module.exports = __webpack_public_path__ + \"static/media/spinner.cb8f814a.gif\";",
    "module.exports = __webpack_public_path__ + \"static/media/chat.28c92bee.png\";",
    "import app from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/database\";\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyDzGNeI8hwj5UZNVcUaD4yfMVK35yvj0X8\",\r\n  authDomain: \"ht-virutalevent.firebaseapp.com\",\r\n  projectId: \"ht-virutalevent\",\r\n  storageBucket: \"ht-virutalevent.appspot.com\",\r\n  databaseURL: \"https://ht-virutalevent-default-rtdb.firebaseio.com/\",\r\n  messagingSenderId: \"306628308360\",\r\n  appId: \"1:306628308360:web:6a285b18ec9e784c715e3d\",\r\n  measurementId: \"G-59S3S9W3E2\",\r\n};\r\n\r\napp.initializeApp(config);\r\nconst authx = app.auth();\r\nconst dbx = app.firestore();\r\nconst storage = app.storage();\r\nconst rdbx = app.database();\r\nconst rdatabasex = app.database;\r\nconst fieldValue = app.firestore.FieldValue;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    this.app = app;\r\n    this.auth = app.auth();\r\n    this.db = app.firestore();\r\n    this.firestore = app.firestore();\r\n    this.database = app.database();\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\nexport { dbx, authx, storage, rdbx, rdatabasex, fieldValue };\r\n",
    "import React, { Component } from \"react\";\r\nimport \"./PublicChat.css\";\r\nimport Chat from \"twilio-chat\";\r\nimport PropTypes from \"prop-types\";\r\nimport { authx, dbx, fieldValue, rdbx } from \"../../firebase\";\r\nimport { instanceOf } from \"prop-types\";\r\nimport { ChatType } from \"../../App\";\r\nimport { RiMailSendLine } from \"react-icons/ri\";\r\nimport { app } from \"firebase\";\r\nimport swal from \"sweetalert\";\r\nimport Spinner from \"../spinner.gif\";\r\n\r\nconst dontLoadUserImage = true;\r\nconst showEmailID = true;\r\nconst showCompanyName = false;\r\nconst email_server_endpoint = \"https://vc-chat-mailserver-dot-vc-circle-cd367.el.r.appspot.com/sendChatMail/\"; // \"http://192.168.0.35:8080/sendChatMail/\";\r\n\r\nvar UserInfromationTable = [];\r\nclass PublicChat extends Component {\r\n  state = {\r\n    emailFeature: true,\r\n    loading: false,\r\n    sendable: false,\r\n    error: null,\r\n    isLoading: true,\r\n    messages: {},\r\n    channels: {},\r\n    replied: {},\r\n    lastMessageTime: {},\r\n    activeMessages: [],\r\n    publicChannelMembers: [],\r\n    publicChannel: null,\r\n    activeChannel: null,\r\n    activeTab: this.props.type !== ChatType.privateChat ? \"tab1\" : \"tab2\",\r\n    activeMember: null,\r\n    searchText: \"\",\r\n    chatuser: null,\r\n    notifyEmail: \"\",\r\n    type: this.props.type,\r\n    sender_data: {\r\n      email: \"\",\r\n      company: \"\",\r\n      designation: \"\",\r\n      name: \"\",\r\n    },\r\n    reciever_data: {\r\n      email: \"\",\r\n      company: \"\",\r\n      designation: \"\",\r\n      name: \"\",\r\n    },\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.user = {\r\n      channelId: props.channel.id,\r\n      channelName: props.channel.name,\r\n      id: props.user.id,\r\n      name: props.user.name,\r\n      uimage: props.user.uimage,\r\n    };\r\n\r\n    if (props.user.uimage == null || props.user.uimage) {\r\n      this.uimage = \"assets/images/Profile-picture.png\";\r\n      this.setState({ uimage: \"assets/images/Profile-picture.png\" });\r\n    }\r\n\r\n    this.message = React.createRef();\r\n    this.messageDiv = React.createRef();\r\n  }\r\n\r\n  componentWillMount() {\r\n    let stall_Id = this.state.stallID;\r\n    let self = this;\r\n    window.c = this;\r\n    rdbx.ref(\"/users\").on(\"value\", (snap) => {\r\n      if (snap.exists()) {\r\n        const data = snap.val();\r\n        // console.log(data);\r\n        Object.keys(data).forEach((key) => {\r\n          UserInfromationTable.push(data[key]);\r\n        });\r\n      } else {\r\n        console.error(\"No User data found\");\r\n      }\r\n    });\r\n\r\n    // dbx.collection(\"users\").get().then(function (querySnapshot) {\r\n    //   querySnapshot.forEach(function (doc) {\r\n    //     // doc.data() is never undefined for query doc snapshots\r\n    //     //  console.log(doc.id, \" => \", doc.data());\r\n    //     UserInfromationTable.push(doc.data());\r\n    //   });\r\n    // });\r\n  }\r\n\r\n  getUserData = (user, need) => {\r\n    if (!showEmailID) {\r\n      return \"\";\r\n    }\r\n    if (!user) {\r\n      return \"\";\r\n    }\r\n\r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user.id === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][need]\r\n          ? UserInfromationTable[i][need]\r\n          : \"\";\r\n      }\r\n    }\r\n    return \"New User\";\r\n  };\r\n\r\n  getUserDataFromChat = (user, need) => {\r\n    if (!showCompanyName) {\r\n      return \"\";\r\n    }\r\n    if (!user) {\r\n      return \"\";\r\n    }\r\n\r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user.id === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][need]\r\n          ? UserInfromationTable[i][need]\r\n          : \"\";\r\n      }\r\n    }\r\n    return \"Company name\";\r\n  };\r\n\r\n  getUserAvatarImage = (user, need) => {\r\n    if (dontLoadUserImage) {\r\n      return \"assets/images/Profile-picture.png\";\r\n    }\r\n\r\n    if (!user) {\r\n      return \"assets/images/Profile-picture.png\";\r\n    }\r\n    //NOTE: I taking image from user table\r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user.id === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][need]\r\n          ? UserInfromationTable[i][need]\r\n          : \"\";\r\n      }\r\n    }\r\n    return \"assets/images/Profile-picture.png\";\r\n  };\r\n\r\n  getUserAvatarImageForPrivChat = (user) => {\r\n    if (dontLoadUserImage) {\r\n      return \"assets/images/Profile-picture.png\";\r\n    }\r\n\r\n    if (!user) {\r\n      return \"assets/images/Profile-picture.png\";\r\n    }\r\n\r\n    //NOTE: I taking image from user table\r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][\"profile_picture\"];\r\n      }\r\n    }\r\n    return \"assets/images/Profile-picture.png\";\r\n  };\r\n\r\n  componentDidMount() {\r\n    authx.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        // User is signed in.\r\n        //.log(user.uid);\r\n        this.setState({\r\n          chatuser: {\r\n            email: user.email,\r\n            name: user.displayName,\r\n            photoURL: user.photoURL,\r\n          },\r\n        });\r\n        console.log(\"Chat User \" + user.email);\r\n      } else {\r\n        // No user is signed in.\r\n        this.setState({\r\n          chatuser: { email: \"shubham@dj.com\", name: \"Shubham\" },\r\n        });\r\n        console.log(\"Chat User not Loaded shubham@dj.com\");\r\n      }\r\n    });\r\n\r\n    fetch(\r\n      // \"https://twilio-chat-api-dot-virtualeventdemo.el.r.appspot.com/chat/token\",\r\n      \"https://chat.photoboothassetmanagement.co.in/chat/token\",\r\n      {\r\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        method: \"POST\",\r\n        body: `identity=${encodeURIComponent(\r\n          this.user.id + \",\" + this.user.name\r\n        )}`,\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => Chat.create(data.token))\r\n      .then(this.setupChatClient)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  handleError = (error) => {\r\n    console.error(error);\r\n    this.setState({\r\n      error: \"Could not load chat.\",\r\n    });\r\n  };\r\n\r\n  setupChatClient = (client) => {\r\n    console.log(this.user.channelId)\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName(this.user.channelId)\r\n      .then((channel) => channel)\r\n      .catch((error) => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({\r\n            uniqueName: this.user.channelId,\r\n            friendlyName: this.user.channelName,\r\n            isPrivate: false,\r\n          });\r\n        } else {\r\n          this.handleError(error);\r\n        }\r\n      })\r\n      .then((channel) => {\r\n        // console.log(channel)\r\n        this.setState({ publicChannel: channel });\r\n        return this.state.publicChannel.join().catch(() => {});\r\n      })\r\n      .then(() => {\r\n        var self = this;\r\n        this.setState({ isLoading: false });\r\n        this.state.publicChannel.getMessages().then((messagePage) => {\r\n          if (this.props.type !== ChatType.privateChat)\r\n            this.messagesLoaded(this.state.publicChannel, messagePage, true);\r\n        });\r\n        this.state.publicChannel.on(\"messageAdded\", (message) =>\r\n          this.messageAdded(this.state.publicChannel, message)\r\n        );\r\n        setInterval(() => {\r\n          this.state.publicChannel.getMembers().then(this.membersLoaded);\r\n        }, 1000);\r\n\r\n        // setTimeout(()=>{\r\n        //     self.setCurrentTab(\"tab2\");\r\n        // }, 1500)\r\n      })\r\n      .catch(this.handleError);\r\n\r\n    this.client.on(\"channelInvited\", (channel) => {\r\n      channel.join();\r\n      this.subscribeChannel(channel);\r\n    });\r\n\r\n    this.client.getSubscribedChannels().then((paginator) => {\r\n      paginator.items.forEach((channel) => {\r\n        this.subscribeChannel(channel);\r\n      });\r\n    });\r\n  };\r\n\r\n  subscribeChannel(channel) {\r\n    let channels = this.state.channels;\r\n    channels[channel.uniqueName] = channel;\r\n    // console.log(channels)\r\n    this.setState({ channels: channels });\r\n    this.subscribeChannelMessages(channel);\r\n  }\r\n\r\n  subscribeChannelMessages = (channel) => {\r\n    channel\r\n      .getMessages()\r\n      .then((messagePage) => this.messagesLoaded(channel, messagePage, false)); //chaange shubham\r\n    channel.on(\"messageAdded\", (message) =>\r\n      this.messageAdded(channel, message)\r\n    );\r\n  };\r\n\r\n  twilioMessageToMessage = (message) => {\r\n    return {\r\n      id: message.sid,\r\n      text: message.body,\r\n      user: message.attributes.user || {},\r\n      timestamp: message.dateCreated,\r\n    };\r\n  };\r\n\r\n  setCurrentTab = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n    if (tab == \"tab1\") {\r\n      this.onPublicChanelClick();\r\n    } else if (tab == \"tab2\") {\r\n      this.setState({ activeChannel: null });\r\n    }\r\n  };\r\n\r\n  membersLoaded = (members) => {\r\n    let publicChannelMembers = members\r\n      .map((member) => this.toMember(member.identity))\r\n      .filter((member) => member.id != this.user.id);\r\n    this.setState({ publicChannelMembers: publicChannelMembers });\r\n  };\r\n\r\n  toMember = (identity) => {\r\n    let vars = identity.split(\",\");\r\n    return { id: vars[0], name: vars[1], identity: identity };\r\n  };\r\n\r\n  messagesLoaded = (channel, messagePage, activateChannel) => {\r\n    let messages = this.state.messages;\r\n    messages[channel.sid] = messagePage.items.map(this.twilioMessageToMessage);\r\n    this.setState({ messages: messages });\r\n\r\n    if (messagePage.items.length > 0) {\r\n      let message = messages[channel.sid][messagePage.items.length - 1];\r\n      if (message.user.name == this.user.name) {\r\n        this.handleOnline(channel, message, true);\r\n      } else {\r\n        this.handleOnline(channel, message, false);\r\n      }\r\n    }\r\n\r\n    if (activateChannel) {\r\n      this.activateChannel(channel);\r\n    }\r\n  };\r\n\r\n  SaveForNotify = (toemail) => {\r\n    dbx\r\n      .collection(\"ChatNotification\")\r\n      .doc(toemail)\r\n      .get()\r\n      .then(function (doc) {\r\n        if (doc.exists) {\r\n          dbx.collection(\"ChatNotification\").doc(toemail).update({\r\n            notify_to: toemail,\r\n            date: Date.now(),\r\n          });\r\n        } else {\r\n          // doc.data() will be undefined in this case\r\n          dbx.collection(\"ChatNotification\").doc(toemail).set({\r\n            notify_to: toemail,\r\n            date: Date.now(),\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n  };\r\n\r\n  PublicMessageAddedInFirebase = (msg, msgby) => {\r\n    dbx\r\n      .collection(\"PublicChatData\")\r\n      .doc()\r\n      .set({\r\n        date: fieldValue.serverTimestamp(),\r\n        message: msg,\r\n        sentby: msgby,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Success updating document:\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error updating document:\", error);\r\n      });\r\n  };\r\n\r\n  PrivateMessageAddedInFirebase = (msg, channel, receiver, sender) => {\r\n    const innerThis = this;\r\n    dbx\r\n      .collection(\"PrivateChatData\")\r\n      .doc()\r\n      .set({\r\n        date: fieldValue.serverTimestamp(),\r\n        message: msg,\r\n        msgbetween: channel,\r\n        reciever: receiver,\r\n        sender: sender,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Success updating document:\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error updating document:\", error);\r\n      });\r\n  };\r\n\r\n  messageAdded = (channel, message) => {\r\n    if (this.previousMessage == null) {\r\n      this.previousMessage = message;\r\n    } else if (this.previousMessage.sid == message.sid) {\r\n      return;\r\n    }\r\n    this.previousMessage = message;\r\n\r\n    let messages = this.state.messages;\r\n    message = this.twilioMessageToMessage(message);\r\n\r\n    if (messages[channel.sid]) {\r\n      messages[channel.sid].push(message);\r\n    } else {\r\n      messages[channel.sid] = [];\r\n      messages[channel.sid].push(message);\r\n    }\r\n    this.setState({ messages: messages });\r\n\r\n    if (message.user.name == this.user.name) {\r\n      this.handleOnline(channel, message, true);\r\n    } else {\r\n      this.handleOnline(channel, message, false);\r\n    }\r\n\r\n    if (\r\n      channel.sid == (this.state.activeChannel && this.state.activeChannel.sid)\r\n    ) {\r\n      this.scroll();\r\n    }\r\n\r\n    //this.GetNotification();\r\n\r\n    // if (this.state.activeTab == \"tab2\") {\r\n    //   console.log(\"Message Sent To: \" + this.state.activeMember.id);\r\n    //   console.log(\"Message Sent By: \" + this.state.chatuser.email);\r\n    //   console.log(\"Channel: \" + channel.uniqueName);\r\n    //   console.log(\"Message: \" + message.text);\r\n    // }\r\n\r\n    // if (this.state.activeTab == \"tab1\") {\r\n    //   console.log(\"Message Sent By: \" + this.state.chatuser.email);\r\n    //   console.log(\"Channel: \" + channel.friendlyName);\r\n    //   console.log(\"Message: \" + message.text);\r\n    // }\r\n  };\r\n\r\n  handleOnline = (channel, message, value) => {\r\n    let replied = this.state.replied;\r\n    let id = channel.uniqueName\r\n      .split(\",\")\r\n      .filter((value1) => value1 != this.user.id)[0];\r\n    if (value == true) {\r\n      delete replied[id];\r\n      // console.log(\"delete\");\r\n      // this.forceUpdate();\r\n      // this.setState({ activeMessages: this.state.activeMessages }, () => {\r\n      //   console.log(this.state.activeMessages);\r\n      // });\r\n    } else {\r\n      replied[id] = value;\r\n      // console.log(replied);\r\n    }\r\n\r\n    //console.log(\"id \"+ id + \" replied \"+value);\r\n    this.setState({ replied: replied });\r\n\r\n    let lastMessageTime = this.state.lastMessageTime;\r\n    lastMessageTime[id] = message.timestamp;\r\n    this.setState({ lastMessageTime: lastMessageTime });\r\n  };\r\n\r\n  sendMessage = (event) => {\r\n    if (this.message.current.value) {\r\n      this.state.activeChannel.sendMessage(this.message.current.value, {\r\n        user: this.user,\r\n      });\r\n\r\n      if (this.state.activeTab == \"tab1\") {\r\n        this.PublicMessageAddedInFirebase(\r\n          this.message.current.value,\r\n          this.state.chatuser.email\r\n        );\r\n      }\r\n\r\n      if (this.state.activeTab == \"tab2\") {\r\n        this.PrivateMessageAddedInFirebase(\r\n          this.message.current.value,\r\n          this.state.activeChannel.uniqueName,\r\n          this.state.activeMember.id,\r\n          this.state.chatuser.email\r\n        );\r\n\r\n        this.SaveForNotify(this.state.activeMember.id);\r\n      }\r\n\r\n      this.message.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  onMemberClick = (member) => {\r\n    let ids = [member.id, this.user.id];\r\n    // console.log(ids);\r\n    ids.sort();\r\n\r\n    let channelId = ids.join();\r\n    if (this.state.channels[channelId] == null) {\r\n      this.setupChannel(this.client, channelId, member);\r\n    } else {\r\n      this.activateChannel(this.state.channels[channelId]);\r\n\r\n      this.setState({ activeMember: member });\r\n    }\r\n\r\n    dbx\r\n      .collection(\"user-invite\")\r\n      .doc(this.user.id + \"+\" + member.id)\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          this.setState({ sendable: false });\r\n        } else {\r\n          this.setState({ sendable: true });\r\n        }\r\n      });\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          sender_data: {\r\n            name: this.user.name,\r\n            email: this.user.id,\r\n            company: this.getUserDataFromChat(this.user, \"company\"),\r\n            designation: this.getUserDataFromChat(this.user, \"designation\"),\r\n          },\r\n          reciever_data: {\r\n            name: member.name,\r\n            email: member.id,\r\n            company: this.getUserDataFromChat(member, \"company\"),\r\n            designation: this.getUserDataFromChat(member, \"company\"),\r\n          },\r\n        };\r\n      }\r\n      // () => {\r\n      //   console.log(this.state.sender_data, this.state.reciever_data);\r\n      // }\r\n    );\r\n  };\r\n  // getTime = () => {\r\n  //   console.log(\"inn\");\r\n  //   const date = \"\";\r\n  //   fetch(\"https://dj-timeserver.glitch.me\")\r\n  //     .then((res) => {\r\n  //       res.json();\r\n  //     })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       date =\r\n  //         new Date(res.epoch).toLocaleDateString() +\r\n  //         new Date(res.epoch).toLocaleTimeString();\r\n  //       console.log(date);\r\n  //       return date;\r\n  //     })\r\n  //     .catch(() => {\r\n  //       console.log(\"error\");\r\n  //     });\r\n  // };\r\n  setupChannel = (client, channelId, member) => {\r\n    this.setState({ loading: true });\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName(channelId)\r\n      .then((channel) => channel)\r\n      .catch((error) => {\r\n        console.log(error);\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({\r\n            uniqueName: channelId,\r\n            isPrivate: true,\r\n          });\r\n        } else {\r\n          this.handleError(error);\r\n        }\r\n      })\r\n      .then((channel) => {\r\n        this.channel = channel;\r\n        return this.channel.join().catch(() => {});\r\n      })\r\n      .then(() => {\r\n        try {\r\n          this.channel\r\n            .invite(member.identity)\r\n            .then(() => {\r\n              console.log(\"//////////////////\");\r\n              this.subscribeChannel(this.channel);\r\n              this.setState({ activeMember: member });\r\n              this.setState({ loading: false });\r\n            })\r\n            .catch((reason) => console.log(reason));\r\n        } catch (e) {}\r\n        // this.subscribeChannel(this.channel);\r\n        // this.setState({ activeMember: member });\r\n      })\r\n      .catch(this.handleError);\r\n  };\r\n\r\n  sendMail = () => {\r\n    swal({\r\n      title: \"Send Invite\",\r\n      text: \"\",\r\n      icon: \"info\",\r\n      buttons: true,\r\n      dangerMode: true,\r\n    }).then((ok) => {\r\n      if (ok) {\r\n        this.setState({ loading: true });\r\n        const innerThis = this;\r\n        fetch(email_server_endpoint, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-AUTH-TOKEN\": \"12901cb8edbcd4fff903e48585403839\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            sender: {\r\n              ...this.state.sender_data,\r\n            },\r\n            reciver: {\r\n              ...this.state.reciever_data,\r\n            },\r\n          }),\r\n        })\r\n          .then(function (res) {\r\n            dbx\r\n              .collection(\"user-invite\")\r\n              .doc(\r\n                `${innerThis.state.sender_data.email}+${innerThis.state.reciever_data.email}`\r\n              )\r\n              .set({\r\n                sender: innerThis.state.sender_data.email,\r\n                receiver: innerThis.state.reciever_data.email,\r\n                sent: true,\r\n                timestamp: fieldValue.serverTimestamp(),\r\n              })\r\n              .then(() => {\r\n                innerThis.setState({ sendable: false, loading: false });\r\n                swal(\"Sent\", {\r\n                  icon: \"success\",\r\n                });\r\n              });\r\n          })\r\n          .catch(function (res) {\r\n            console.log(res);\r\n          });\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  activateChannel = (channel) => {\r\n    this.setState({ activeChannel: channel });\r\n    this.setState({ activeMessages: this.state.messages[channel.sid] });\r\n    this.scroll();\r\n  };\r\n\r\n  onPublicChanelClick = () => {\r\n    this.activateChannel(this.state.publicChannel);\r\n    setTimeout(this.scroll, 100);\r\n  };\r\n\r\n  scroll = () => {\r\n    //console.log(\"scroll\");\r\n    if (this.messageDiv.current) {\r\n      const scrollHeight = this.messageDiv.current.scrollHeight;\r\n      const height = this.messageDiv.current.clientHeight;\r\n      const maxScrollTop = scrollHeight - height;\r\n      this.messageDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    }\r\n  };\r\n\r\n  onSearchTextChange = (value) => {\r\n    this.setState({ searchText: value });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.client.shutdown();\r\n  }\r\n\r\n  showUserImage = () => {\r\n    if (!dontLoadUserImage) {\r\n      return this.user.uimage;\r\n    }\r\n    return \"assets/images/Profile-picture.png\";\r\n  };\r\n\r\n  RetunKey = (str) => {\r\n    let r = Math.floor(Math.random() * 100000);\r\n    let rk = str + \"\" + r;\r\n    return rk;\r\n  };\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <div className=\"fullScr\">{this.state.error}</div>;\r\n    } else if (this.state.isLoading) {\r\n      return <div className=\"fullScr\">Loading Chat...</div>;\r\n    }\r\n\r\n    let searchText = this.state.searchText;\r\n    let publicChannelMembers = this.state.publicChannelMembers\r\n      .filter((member) => {\r\n        return searchText == \"\"\r\n          ? true\r\n          : (member.name || \"\")\r\n              .toLocaleLowerCase()\r\n              .includes(searchText.toLocaleLowerCase());\r\n      })\r\n      .sort((x, y) => {\r\n        let xTimestamp = this.state.lastMessageTime[x.id]\r\n          ? this.state.lastMessageTime[x.id]\r\n          : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\r\n        let yTimestamp = this.state.lastMessageTime[y.id]\r\n          ? this.state.lastMessageTime[y.id]\r\n          : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\r\n        return yTimestamp - xTimestamp;\r\n      });\r\n\r\n    let final = [];\r\n    for (let xi = 0; xi < publicChannelMembers.length; xi++) {\r\n      //console.log(publicChannelMembers[xi].name);\r\n      let name = publicChannelMembers[xi].name;\r\n      if (name != \"null\" && name != null) {\r\n        final.push(publicChannelMembers[xi]);\r\n      }\r\n    }\r\n    // console.log(publicChannelMembers);\r\n    //console.log(final);\r\n    publicChannelMembers = final;\r\n    return (\r\n      <>\r\n        {this.state.loading ? (\r\n          <div className=\"loading\">\r\n            <img src={Spinner} alt=\"\" className=\"loader\" />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"wrapper h-100\">\r\n          <header className=\"header\">\r\n            <a href=\"#\" className=\"header__logo\">\r\n              <img src=\"assets/images/logo.png\" alt=\"\" />\r\n            </a>\r\n            {/* <a href=\"#\" className=\"header__close\">\r\n                        <i className=\"icon-close\"></i>\r\n                    </a> */}\r\n          </header>\r\n          <div className=\"contentCntr\">\r\n            <aside className=\"sidebar show-on-desktop\">\r\n              <div className=\"sidebar__header\">\r\n                <div className=\"sidebar__user\">\r\n                  <div className=\"user-block\">\r\n                    <div className=\"user-block__pic\">\r\n                      <img src={this.showUserImage()} alt=\"\" />\r\n                      {/* <span className=\"user-block__online\"></span> */}\r\n                    </div>\r\n                    <span className=\"user-block__name\">{this.user.name}</span>\r\n                  </div>\r\n                </div>\r\n                <a\r\n                  className=\"sidebar__link\"\r\n                  onClick={(event) => this.onPublicChanelClick()}\r\n                >\r\n                  {this.user.channelName}\r\n                </a>\r\n                <a className=\"sidebar__link\">\r\n                  Chat ({publicChannelMembers.length})\r\n                </a>\r\n              </div>\r\n\r\n              <div className=\"sidebar__body\">\r\n                <div className=\"search-block\">\r\n                  <div className=\"search-block__form\">\r\n                    <input\r\n                      className=\"search-block__input\"\r\n                      type=\"text\"\r\n                      placeholder=\"Search\"\r\n                      ref={this.search}\r\n                      onChange={(event) =>\r\n                        this.onSearchTextChange(event.target.value)\r\n                      }\r\n                    />\r\n                    <button className=\"search-block__btn\">\r\n                      <i className=\"icon-search\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"user-block-list\">\r\n                  <div>\r\n                    {publicChannelMembers.map((member) => (\r\n                      <div\r\n                        className=\"user-block\"\r\n                        key={member.identity}\r\n                        onClick={(event) => this.onMemberClick(member)}\r\n                      >\r\n                        <div className=\"user-block__pic\">\r\n                          <img src={this.user.uimage} alt=\"\" />\r\n                          <span\r\n                            className={\r\n                              this.state.replied[member.id] == true\r\n                                ? \"\"\r\n                                : \"user-block__dnd\"\r\n                            }\r\n                          ></span>\r\n                        </div>\r\n                        <span className=\"user-block__name\">\r\n                          {member.name === \"null\" ? member.id : member.name}\r\n                        </span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </aside>\r\n\r\n            <section className=\"chat-container\">\r\n              <div className=\"chat-section\">\r\n                {this.props.type === ChatType.Both && (\r\n                  <>\r\n                    <div className=\"chat-section__header chat-section__tabs hide-on-desktop\">\r\n                      <ul>\r\n                        <li onClick={(event) => this.setCurrentTab(\"tab1\")}>\r\n                          <a\r\n                            className={\r\n                              (this.state.activeChannel &&\r\n                                this.state.activeChannel.uniqueName) ==\r\n                              this.user.channelId\r\n                                ? \"active\"\r\n                                : \"\"\r\n                            }\r\n                          >\r\n                            {this.user.channelName}\r\n                          </a>\r\n                        </li>\r\n                        <li onClick={(event) => this.setCurrentTab(\"tab2\")}>\r\n                          <a\r\n                            className={\r\n                              this.state.activeTab == \"tab2\" ? \"active\" : \"\"\r\n                            }\r\n                          >\r\n                            ALL PARTICIPANTS ({publicChannelMembers.length})\r\n                          </a>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </>\r\n                )}\r\n\r\n                <div\r\n                  className=\"chat-section__header\"\r\n                  style={{ display: this.state.activeChannel ? \"\" : \"none\" }}\r\n                >\r\n                  <div className=\"user-block\">\r\n                    {this.state.activeTab !== \"tab1\" && (\r\n                      <div\r\n                        onClick={() => this.setState({ activeChannel: null })}\r\n                        style={{ marginRight: \"0.5rem\" }}\r\n                      >\r\n                        <img\r\n                          style={{ width: \"1.5rem\" }}\r\n                          src={\"./assets/images/back.png\"}\r\n                          alt={\"<\"}\r\n                        ></img>\r\n                      </div>\r\n                    )}\r\n                    <div className=\"user-block__pic\">\r\n                      <img\r\n                        src={\r\n                          this.state.activeChannel &&\r\n                          this.state.activeChannel.friendlyName\r\n                            ? \"assets/images/groupChatIcon.png\"\r\n                            : this.getUserAvatarImage(\r\n                                this.state.activeMember,\r\n                                \"profile_picture\"\r\n                              )\r\n                        }\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                    <span className=\"user-block__name\">\r\n                      {(this.state.activeChannel &&\r\n                        this.state.activeChannel.friendlyName) ||\r\n                        (this.state.activeMember &&\r\n                          this.state.activeMember.name)}\r\n                    </span>\r\n\r\n                    {this.state.emailFeature ? (\r\n                      <RiMailSendLine\r\n                        className={`mail ${\r\n                          this.state.activeMember ? \"\" : \"d-none\"\r\n                        } ${this.state.activeTab === \"tab1\" ? \"d-none\" : \"\"} ${\r\n                          this.state.sendable ? \"\" : \"faded\"\r\n                        }`}\r\n                        size=\"2rem\"\r\n                        onClick={this.sendMail}\r\n                      />\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"chat-section__body chat-section__body--list\">\r\n                  <div\r\n                    className=\"chat-section\"\r\n                    style={{ display: this.state.activeChannel ? \"\" : \"none\" }}\r\n                  >\r\n                    <div className=\"chat-section__body\" ref={this.messageDiv}>\r\n                      {this.state.activeMessages &&\r\n                        this.state.activeMessages.map((message) => (\r\n                          <div\r\n                            className={`chat-section__message chat-section__message--${\r\n                              this.user.id == message.user.id\r\n                                ? \"sent\"\r\n                                : \"received\"\r\n                            }`}\r\n                            key={this.RetunKey(message.identity)}\r\n                          >\r\n                            {this.user.id == message.user.id && (\r\n                              <>\r\n                                {\" \"}\r\n                                <span className=\"chat-section__text\">\r\n                                  {message.text}\r\n                                </span>\r\n                                <span className=\"chat-section__profile\">\r\n                                  <span className=\"chat-section__profile__pic\">\r\n                                    <img\r\n                                      src={\r\n                                        this.user.uimage == null\r\n                                          ? \"assets/images/Profile-picture.png\"\r\n                                          : this.user.uimage\r\n                                      }\r\n                                      alt=\"\"\r\n                                    />\r\n                                  </span>\r\n                                  {/* {message.user.name} */}\r\n                                  {showCompanyName\r\n                                    ? message.user.name +\r\n                                      \", \" +\r\n                                      this.getUserDataFromChat(\r\n                                        message.user,\r\n                                        \"designation\"\r\n                                      ) +\r\n                                      \", \" +\r\n                                      this.getUserDataFromChat(\r\n                                        message.user,\r\n                                        \"company\"\r\n                                      )\r\n                                    : message.user.name}\r\n                                </span>\r\n                              </>\r\n                            )}\r\n                            {this.user.id != message.user.id && (\r\n                              <>\r\n                                <span className=\"chat-section__profile\">\r\n                                  <span className=\"chat-section__profile__pic\">\r\n                                    <img\r\n                                      src={this.getUserAvatarImage(\r\n                                        message.user,\r\n                                        \"profile_picture\"\r\n                                      )}\r\n                                      alt=\"\"\r\n                                    />\r\n                                    {showCompanyName\r\n                                      ? message.user.name +\r\n                                        \", \" +\r\n                                        this.getUserDataFromChat(\r\n                                          message.user,\r\n                                          \"designation\"\r\n                                        ) +\r\n                                        \", \" +\r\n                                        this.getUserDataFromChat(\r\n                                          message.user,\r\n                                          \"company\"\r\n                                        )\r\n                                      : message.user.name}\r\n                                  </span>\r\n                                </span>\r\n                                <span className=\"chat-section__text\">\r\n                                  {message.text}\r\n                                </span>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    {this.state.activeChannel && (\r\n                      <div className=\"chat-section__footer\">\r\n                        <div className=\"chat-section__form\">\r\n                          <input\r\n                            ref={this.message}\r\n                            type=\"text\"\r\n                            className=\"chat-section__input\"\r\n                            placeholder=\"Type a Message\"\r\n                            onKeyPress={(event) =>\r\n                              event.key === \"Enter\" && this.sendMessage(event)\r\n                            }\r\n                          ></input>\r\n                          <button\r\n                            onClick={(event) => this.sendMessage(event)}\r\n                            className=\"chat-section__btn\"\r\n                          >\r\n                            <i className=\"icon-send\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"sidebar__body\"\r\n                    style={{\r\n                      display:\r\n                        this.state.activeChannel == null &&\r\n                        this.state.activeTab != \"tab1\"\r\n                          ? \"\"\r\n                          : \"none\",\r\n                    }}\r\n                  >\r\n                    <div className=\"sidebar__body\">\r\n                      <div className=\"search-block\">\r\n                        <div className=\"search-block__form\">\r\n                          <input\r\n                            className=\"search-block__input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            ref={this.search}\r\n                            onChange={(event) =>\r\n                              this.onSearchTextChange(event.target.value)\r\n                            }\r\n                          />\r\n                          <button className=\"search-block__btn\">\r\n                            <i className=\"icon-search\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"user-block-list\">\r\n                        <div>\r\n                          {publicChannelMembers.map((member) => (\r\n                            <div\r\n                              className=\"user-block\"\r\n                              key={member.identity}\r\n                              onClick={(event) => this.onMemberClick(member)}\r\n                            >\r\n                              <div className=\"user-block__pic\">\r\n                                <img\r\n                                  src={this.getUserAvatarImage(\r\n                                    member,\r\n                                    \"profile_picture\"\r\n                                  )}\r\n                                  alt=\"\"\r\n                                />\r\n                                {this.state.replied[member.id] != null && (\r\n                                  <span\r\n                                    className={\r\n                                      this.state.replied[member.id] == true\r\n                                        ? \"\"\r\n                                        : \"user-block__dnd\"\r\n                                    }\r\n                                  ></span>\r\n                                )}\r\n                              </div>\r\n                              <span className=\"user-block__name\">\r\n                                {member.name === \"null\"\r\n                                  ? member.id\r\n                                  : member.name}\r\n                              </span>\r\n                              <br></br>\r\n                              <br></br>\r\n                              {\r\n                                <div className=\"blocks font-sm-12\">\r\n                                  {showCompanyName\r\n                                    ? \", \" +\r\n                                      this.getUserDataFromChat(\r\n                                        member,\r\n                                        \"designation\"\r\n                                      ) +\r\n                                      \", \" +\r\n                                      this.getUserData(member, \"company\")\r\n                                    : \"\"}\r\n                                </div>\r\n                              }\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nPublicChat.propTypes = {\r\n  channel: PropTypes.object,\r\n  user: PropTypes.object,\r\n};\r\n\r\nexport default PublicChat;\r\n",
    "import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport PublicChat from \"./components/client-chat/PublicChat\";\r\nimport { authx, dbx } from \"./firebase\";\r\nimport chat from \"./chat.png\";\r\n\r\nconst chatRoomName = \"chat-techcircle-antzy\";\r\nconst chatRoomDisplayName = \"Public Chat Room\";\r\n\r\nexport const ChatType = {\r\n  Both: 0,\r\n  publicChat: 1,\r\n  privateChat: 2,\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: null,\r\n    type: ChatType.Both,\r\n    user_Name: \"\",\r\n    email: \"\",\r\n    canEnter: true,\r\n  };\r\n\r\n  getURLPARAM = () => {\r\n    let urlParam = window.location.href.split(\"?\")[1];\r\n    if (urlParam) {\r\n      switch (urlParam) {\r\n        case \"public\":\r\n          this.setState({ type: ChatType.publicChat });\r\n          break;\r\n        case \"private\":\r\n          this.setState({ type: ChatType.privateChat });\r\n          break;\r\n        default:\r\n          this.setState({ type: ChatType.Both });\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    authx.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.getURLPARAM();\r\n        // User is signed in.\r\n        console.log(user.uid);\r\n        this.setState({\r\n          user: {\r\n            id: user.email,\r\n            name: user.displayName,\r\n            photoURL: user.photoURL,\r\n          },\r\n        });\r\n      } else {\r\n        this.getURLPARAM();\r\n        authx.signInWithEmailAndPassword(\"anant@dj.com\", \"anant@dj.com123456\")\r\n        // No user is signed in.\r\n        // this.setState({\r\n        //   user: {\r\n        //     id: \"shubham@digitaljalebi.com\",\r\n        //     name: \"shubham\",\r\n        //   },\r\n        // });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(chatRoomName, this.state.user)\r\n    return (\r\n      \r\n      <>\r\n        {!this.state.canEnter ? (\r\n          <>\r\n            {/* <div className=\"mian_login_cont\">\r\n              <div className=\"center_login_cont\">\r\n                <img src={chat} alt=\"\" className=\"img\" />\r\n                <form action=\"\" className=\"form\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"input\"\r\n                    value={this.state.user_Name}\r\n                    placeholder=\"ENTER YOUR NAME\"\r\n                    onChange={(e) => {\r\n                      this.setState({ user_Name: e.target.value }, () => {});\r\n                    }}\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"input\"\r\n                    value={this.state.email}\r\n                    placeholder=\"ENTER YOUR EMAIL\"\r\n                    onChange={(e) => {\r\n                      this.setState({ email: e.target.value });\r\n                    }}\r\n                  />\r\n                  <button\r\n                    className=\"myBtn\"\r\n                    onClick={() => {\r\n                      this.setState({ canEnter: true });\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    Enter\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div> */}\r\n          </>\r\n        ) : (\r\n          this.state.user !== null && (\r\n            <PublicChat\r\n              channel={{ id: chatRoomName, name: chatRoomDisplayName }}\r\n              user={{\r\n                id: this.state.user.id,\r\n                name: this.state.user.name,\r\n                uimage: this.state.user.photoURL,\r\n              }}\r\n              type={this.state.type}\r\n            >\r\n              {\" \"}\r\n            </PublicChat>\r\n          )\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",
    "// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n",
    "import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"rootchat\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"
  ],
  "sourceRoot": ""
}
