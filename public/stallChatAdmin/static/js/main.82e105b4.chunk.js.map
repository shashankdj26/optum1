{"version":3,"sources":["firebase.js","component/min-component/notify.js","component/min-component/userList.js","component/min-component/emoji.js","const.js","component/home.js","component/login.js","App.js","registerServiceWorker.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authx","auth","dbx","firestore","rdbx","storage","database","Notify","props","state","uid","personId","person","notify","firebase","ref","child","this","on","snap","setState","val","me","document","getElementById","parent","insertBefore","firstChild","className","Component","UserList","closeNav","left","querySelector","rightsection","cNav","oNav","style","flex","display","window","innerWidth","minWidth","openNav","removeNotify","user","set","count","noState","onClick","styleDiv","id","usersList","map","i","singleChat","key","src","img","alt","width","data-toggle","data-placement","title","name","emojis","AppString","Home","getToolTipData","console","log","currentChatUser","messages","givenDB","fromDB","msgs","dbName","stallName","push","time","msg","text","sortArrayElements","length","j","tmp","pushMsg","event","preventDefault","uidArr2","split","trim","uidArr","removeNotification","notification","once","snapshot","Date","now","externalName","getUserAvatarImageByID","userType","userRef","defaultUrl","snapThis","forEach","profile_picture","stallManagerAvatar","userAvatar","userName","fullName","userEmail","email","userCompany","company","scrollToBottom","messagesContainer","ReactDOM","findDOMNode","scroll","scrollHeight","openEmoji","emoji","openEmojiClose","pickEmoji","emo","prevText","signout","localStorage","setItem","isLogout","srotingMessageFromTime","a","b","getUserData","self","exists","State","StateMode","isUserIsOnline","selectChatUser","c","cachedHits","getItem","cc","JSON","parse","username","stallNameID","removeItem","thisState","then","error","bind","logout","textTransform","color","textAlign","fontSize","fontWeight","el","message","moment","fromNow","placeholder","onChange","e","target","value","require","onFocus","type","role","Login","loginWithGmail","pass","password","signInWithEmailAndPassword","result","photoURL","update","addUserList","isJoinedStall","collection","doc","get","fun","stallAdminList","data","AdminList","adminUID","stringify","displayName","isLogin","catch","errorMessage","rootRef","userImage","handleStateChange","handleChange","required","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","render","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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ACA,eACA,eACA,eACA,SACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,SACA,eACA,SACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBClLSC,EACc,aADdA,EAEO,2EAFPA,EAII,2BAJJA,EAKC,QALDA,EAMG,YC6cDC,E,kDAtcX,WAAY3D,GAAQ,IAAD,8BACf,cAAMA,IA8EV4D,eAAiB,SAACvB,GACdwB,QAAQC,IAAI,SACZD,QAAQC,IAAIzB,EAAKmB,OAjFF,EAsFnBT,WAAa,SAAC3C,GAEV,GAAIA,IAAW,EAAKH,MAAM8D,gBAA1B,CAKA,EAAKnD,SAAS,CAAEoD,SAAU,KAE1B,IAAIC,EAAU,EAAKhE,MAAMC,IAAM,IAAME,EACjC8D,EAAS9D,EAAS,IAAM,EAAKH,MAAMC,IACnCiE,EAAO,GACX,EAAKvD,SAAS,CAAEwD,OAAQH,IACRrE,EAAKW,MAAMC,MAAM,EAAKP,MAAMoE,WAAW7D,MAAMyD,GACrDvD,GAAG,eAAe,SAAAC,GACtBkD,QAAQC,IAAI,KACZD,QAAQC,IAAInD,EAAKE,OACbT,IAAW,EAAKH,MAAM8D,iBAKtBpD,EAAKE,QACLsD,EAAKG,KAAK,CACNpE,IAAKS,EAAKE,MAAMX,IAChBqE,KAAM5D,EAAKE,MAAM0D,KACjBf,KAAM7C,EAAKE,MAAMwD,UAAY1D,EAAKE,MAAMwD,UAAY1D,EAAKE,MAAM2C,KAC/DgB,IAAK7D,EAAKE,MAAM4D,OAEpB,EAAK7D,SAAS,CAAEoD,S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","file":"static/js/main.82e105b4.chunk.js","sourcesContent":["import app from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/database\";\r\n\r\n// var config = {\r\n//   apiKey: \"AIzaSyDMRfZeFWKFTKQuJwZV-kBnrjXVMg2-8pA\",\r\n//   authDomain: \"carivs-uk.firebaseapp.com\",\r\n//   databaseURL: \"https://carivs-uk.firebaseio.com\",\r\n//   projectId: \"carivs-uk\",\r\n//   storageBucket: \"carivs-uk.appspot.com\",\r\n//   messagingSenderId: \"945362621408\",\r\n//   appId: \"1:945362621408:web:f73567da1ec0c89570d185\",\r\n//   measurementId: \"G-Z3VLRTGMM5\"\r\n// };\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyDzGNeI8hwj5UZNVcUaD4yfMVK35yvj0X8\",\r\n  authDomain: \"ht-virutalevent.firebaseapp.com\",\r\n  databaseURL: \"https://ht-virutalevent-default-rtdb.firebaseio.com\",\r\n  projectId: \"ht-virutalevent\",\r\n  storageBucket: \"ht-virutalevent.appspot.com\",\r\n  messagingSenderId: \"306628308360\",\r\n  appId: \"1:306628308360:web:6a285b18ec9e784c715e3d\",\r\n  measurementId: \"G-59S3S9W3E2\",\r\n};\r\n\r\napp.initializeApp(config);\r\nconst authx = app.auth();\r\nconst dbx = app.firestore();\r\nconst storage = app.storage();\r\nconst rdbx = app.database();\r\nconst rdatabasex = app.database;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    this.app = app;\r\n    this.auth = app.auth();\r\n    this.db = app.firestore();\r\n    this.firestore = app.firestore();\r\n    this.database = app.database();\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\nexport { dbx, authx, storage, rdbx, rdatabasex };\r\n","import React, { Component } from \"react\";\nimport * as firebase from 'firebase';\n\n\nclass Notify extends Component{\n    constructor(props){\n        super(props)\n        //console.log(this.props.person)\n        this.state = {\n            uid: this.props.uid,\n            personId:this.props.person,\n            notify: null\n        }\n    }\n\n    componentWillMount() {\n        const rootRef = firebase.database()\n        .ref().child('notification')\n        .child(this.state.uid)\n        .child(this.state.personId)\n        .child('count');\n\n        rootRef.on('value', snap => {\n            this.setState({ notify: snap.val() });\n            let me=document.getElementById(this.state.personId);\n            let parent=document.getElementById('my-all-user');\n            parent.insertBefore(me,parent.firstChild);\n        });\n    }\n\n\n    render(){\n        if(this.state.notify>0){\n            return (\n                <span className=\"notify\">\n                    {this.state.notify}\n                </span>\n            )\n        }else{\n            return(\n                <span></span>\n            )\n        }\n    }\n}\n\n\n\nexport default Notify;\n\n\n","import React, { Component } from \"react\";\nimport * as firebase from 'firebase';\nimport Notify from \"../min-component/notify\";\n\n\nclass UserList extends Component{\n    constructor(props){\n        super(props);\n        //console.log(this.props)\n        this.state = {\n            noState: null,\n        }\n\n        \n    }\n\n\n    //Navigation Open close method\n    closeNav = () => {\n        let left = document.querySelector('.left__section');\n        let rightsection = document.querySelector('.right__section');\n        let cNav = document.querySelector('.closeNav');\n        let oNav = document.querySelector('.openNav');\n        left.style.flex = '0';\n        cNav.style.display = 'none';\n        oNav.style.display = 'block';\n        if (window.innerWidth <= 600){\n            left.style.minWidth = \"0px\"\n            rightsection.style.minWidth = \"99%\";\n        }\n    }\n    openNav = () => {\n        let left = document.querySelector('.left__section');\n        let rightsection = document.querySelector('.right__section');\n        let cNav = document.querySelector('.closeNav');\n        let oNav = document.querySelector('.openNav');\n        left.style.flex = '1';\n        cNav.style.display = 'block';\n        oNav.style.display = 'none';\n        if (window.innerWidth <= 600) {\n            left.style.minWidth = \"40%\";\n            rightsection.style.minWidth = \"59%\";\n        }\n    }\n\n    removeNotify = (user)=>{\n        const notification = firebase.database()\n                            .ref('notification')\n                            .child(this.props.uid)\n                            .child(user);\n        notification.set({\n            count: 0\n        })\n    }\n\n   \n\n    render(){\n        return(\n            <div>\n\n                <span className=\"openNav\" onClick={this.openNav}>&#9776;</span>\n                <span className=\"closeNav\" onClick={this.closeNav}>&#9776;</span>\n                \n                <div className=\"userList\">\n\n                    <div style={styleDiv} id=\"my-all-user\">\n                        {\n                            this.props.usersList.map(\n                                (user, i) => {\n                                    if (user.uid !== this.props.uid) {\n                                        return (\n                                            <a \n                                                onClick={\n                                                    () => { \n                                                        this.props.singleChat(user.uid);\n                                                        this.removeNotify(user.uid);\n                                                    }\n                                                } \n                                                key={i}\n                                                id={user.uid}\n                                            >\n                                                <Notify uid={this.props.uid} person={user.uid}/>\n                                                <img src={user.img} alt=\"avatar\"  width=\"36\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Tooltip on top\"/>\n                                                <span data-toggle=\"tooltip\" data-placement=\"top\" title=\"Tooltip on top\">{user.name}</span>\n                                            </a>\n                                        )\n                                    } else {\n                                        return (\n                                            <span key={i}></span>\n                                        )\n                                    }\n                                }\n                            )\n                        }\n\n                    </div>\n                </div>\n\n               \n\n            </div>\n        )\n    }\n\n\n}\n\nlet styleDiv = {\n    display:'grid'\n}\nexport default UserList;","export const emojis = [\n    '😄',\n    '😃',\n    '😀',\n    '😊',\n    '😉',\n    '😍',\n    '😘',\n    '😚',\n    '😗',\n    '😙',\n    '😜',\n    '😝',\n    '😛',\n    '😳',\n    '😁',\n    '😔',\n    '😌',\n    '😒',\n    '😞',\n    '😣',\n    '😢',\n    '😂',\n    '😭',\n    '😪',\n    '😥',\n    '😰',\n    '😅',\n    '😓',\n    '😩',\n    '😫',\n    '😨',\n    '😱',\n    '😠',\n    '😡',\n    '😤',\n    '😖',\n    '😆',\n    '😋',\n    '😷',\n    '😎',\n    '😴',\n    '😵',\n    '😲',\n    '😟',\n    '😦',\n    '😧',\n    '👿',\n    '😮',\n    '😬',\n    '😐',\n    '😕',\n    '😯',\n    '😏',\n    '😑',\n    '👲',\n    '👳',\n    '👮',\n    '👷',\n    '💂',\n    '👶',\n    '👦',\n    '👧',\n    '👨',\n    '👩',\n    '👴',\n    '👵',\n    '👱',\n    '👼',\n    '👸',\n    '😺',\n    '😸',\n    '😻',\n    '😽',\n    '😼',\n    '🙀',\n    '😿',\n    '😹',\n    '😾',\n    '👹',\n    '👺',\n    '🙈',\n    '🙉',\n    '🙊',\n    '💀',\n    '👽',\n    '💩',\n    '🔥',\n    '✨',\n    '🌟',\n    '💫',\n    '💥',\n    '💢',\n    '💦',\n    '💧',\n    '💤',\n    '💨',\n    '👂',\n    '👀',\n    '👃',\n    '👅',\n    '👄',\n    '👍',\n    '👎',\n    '👌',\n    '👊',\n    '✊',\n    '👋',\n    '✋',\n    '👐',\n    '👆',\n    '👇',\n    '👉',\n    '👈',\n    '🙌',\n    '🙏',\n    '👏',\n    '💪',\n    '🚶',\n    '🏃',\n    '💃',\n    '👫',\n    '👪',\n    '💏',\n    '💑',\n    '👯',\n    '🙆',\n    '🙅',\n    '💁',\n    '🙋',\n    '💆',\n    '💇',\n    '💅',\n    '👰',\n    '🙎',\n    '🙍',\n    '🙇',\n    '🎩',\n    '👑',\n    '👒',\n    '👟',\n    '👞',\n    '👡',\n    '👠',\n    '👢',\n    '👕',\n    '👔',\n    '👚',\n    '👗',\n    '🎽',\n    '👖',\n    '👘',\n    '👙',\n    '💼',\n    '👜',\n    '👝',\n    '👛',\n    '👓',\n    '🎀',\n    '🌂',\n    '💄',\n    '💛',\n    '💙',\n    '💜',\n    '💚',\n    '💔',\n    '💗',\n    '💓',\n    '💕',\n    '💖',\n    '💞',\n    '💘',\n    '💌',\n    '💋',\n    '💍',\n    '💎',\n    '👤',\n    '💬',\n    '👣',\n]","export const AppString = {\r\n    USERS_DOC_REALTIME_DB: \"usersTable\",// Cloud Firestore - user Doc\r\n    DEFAULT_AVATAR :'https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png',//User default avatrt if not have\r\n    STALLID : 'Stabroek Solutions',//Stall ID/Name \r\n    STALL_ONLINE:'/user_status_stall_chat/',//Realtime Database - for storing chat user online in chat window\r\n    ADMIN_DOC:'Admin',// Cloud Firestore - Admin Doc\r\n    ADMIN_TABLE:'chatAdmin',// Cloud Firestore - Admin Doc - SubCollection\r\n                            //Inside above subcollection array of map \"AdminList\" -0) adminUID: ,stallName: \r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport moment from 'moment'\nimport { authx, rdbx, dbx } from \"../firebase\";\n//mini Components\nimport UserList from \"./min-component/userList\";\nimport { emojis } from \"./min-component/emoji\";\nimport { AppString } from \"../const\";\n\n\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            uid: null,\n            name: null,\n            usersList: [],\n            messages: [],\n            text: '',\n            emoji: emojis,\n            currentChatUser: null,\n            stallManagerAvatar: AppString.DEFAULT_AVATAR,\n            userAvatar: AppString.DEFAULT_AVATAR,\n            userName: 'userName',\n            userEmail: 'email',\n            userCompany: '',\n            isUserIsOnline: false,\n            stallName: 'Stall A'\n        }\n    }\n\n    //React Hook\n    componentWillMount() {\n        try {\n            window.c = this;\n            const cachedHits = localStorage.getItem('loginKey');\n            if (cachedHits) {\n                let cc = JSON.parse(cachedHits);\n                console.log(cc)\n                let uid = cc.uid;\n                let username = cc.username;\n                let stallNameID = cc.stallName;\n                this.state.uid = uid;\n                this.state.stallName = cc.stallName;\n                this.setState({ uid: uid, name: username, stallName: stallNameID, externalName: cc.externalName })\n                //Take Stall Manager Photo\n                this.getUserAvatarImageByID(this.state.uid, 0);\n                localStorage.removeItem('loginKey', []);\n            } else {\n\n                this.props.isLogout()\n\n            }\n\n            //End LoginInfo\n            let usersList = this.state.usersList;\n            var thisState = this;\n            const stallDataChange = rdbx.ref().child(thisState.state.stallName);\n            stallDataChange.on('child_added', snap => {\n                console.log(snap.key.split('+')[1])\n                let uidArr = snap.key.split('+');\n                rdbx.ref().child(AppString.USERS_DOC_REALTIME_DB).child(uidArr[1]).once('value').then(function (snapshot) {\n\n                    if (snapshot.exists()) {\n                        console.log('Yes HE Chated with me');\n\n                        if (snapshot.key != thisState.state.uid) {\n                            usersList.push({\n                                uid: snapshot.key,\n                                name: snapshot.val().userName,\n                                img: snapshot.val().profile_picture,\n                                company: snapshot.val().company,\n                            })\n                            thisState.setState({ usersList: usersList })\n                        }\n\n                    } else {\n                        console.log('No HE Chated with me');\n                    }\n                });\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    getToolTipData = (user) => {\n        console.log(\"Hello\");\n        console.log(user.name);\n    }\n\n\n    //Select Single Person\n    singleChat = (person) => {\n\n        if (person !== this.state.currentChatUser) {\n            //console.log(person);\n            // console.log(this.state.currentChatUser);\n            return;\n        }\n        this.setState({ messages: [] });\n\n        let givenDB = this.state.uid + '+' + person;\n        let fromDB = person + '+' + this.state.uid;\n        let msgs = [];\n        this.setState({ dbName: givenDB });\n        const rootRef = rdbx.ref().child(this.state.stallName).child(givenDB);\n        rootRef.on('child_added', snap => {\n            console.log('A');\n            console.log(snap.val())\n            if (person !== this.state.currentChatUser) {\n                //  console.log(person);\n                // console.log(this.state.currentChatUser);\n                return;\n            }\n            if (snap.val()) {\n                msgs.push({\n                    uid: snap.val().uid,\n                    time: snap.val().time,\n                    name: snap.val().stallName ? snap.val().stallName : snap.val().name,\n                    msg: snap.val().text\n                })\n                this.setState({ messages: msgs })\n            }\n        });\n\n\n        //Logic need to applay when admin user click then only exicute this script\n\n\n        const rootRef2 = rdbx.ref().child(this.state.stallName).child(fromDB);\n        rootRef2.on('child_added', snap => {\n\n            console.log('B');\n            if (person !== this.state.currentChatUser) {\n                console.log(person);\n                console.log(this.state.currentChatUser);\n                return;\n            }\n\n            if (snap.val()) {\n                msgs.push({\n                    uid: snap.val().uid,\n                    time: snap.val().time,\n                    name: snap.val().name,\n                    msg: snap.val().text\n                })\n                this.setState({ messages: msgs })\n            }\n        });\n        //console.log(givenDB);\n        //console.log(fromDB);\n    }\n\n    sortArrayElements = (msgs) => {\n        for (let i = 0; i < msgs.length; i++) {\n            for (let j = i + 1; j < msgs.length; j++) {\n                if (msgs[i].time > msgs[j].time) {\n                    let tmp = msgs[i];\n                    msgs[i] = msgs[j];\n                    msgs[j] = tmp;\n                }\n            }\n        }\n        return msgs;\n    }\n\n    //Send Message\n    pushMsg = (event) => {\n        event.preventDefault();\n        let uid = this.state.uid;\n        let name = this.state.stallName;//this.state.name; //for specific reson\n        let text = this.state.text;\n        let dbName = this.state.dbName;\n\n        let uidArr2 = dbName.split('+');\n        if (uid === uidArr2[1]) {\n            console.log('Can not message to Me and Me');\n            return;\n        }\n\n        if (text.trim() === '') {\n            return\n        } else {\n            //notification\n            if (dbName !== 'chatRoom') {\n                let uidArr = dbName.split('+');\n                const removeNotification = rdbx.ref('notification').child(uid).child(uidArr[1]);\n                const notification = rdbx.ref().child('notification').child(uidArr[1]);\n\n                notification.child(uid).once('value', snapshot => {\n                    if (snapshot.val()) {\n                        notification.child(uid).set({\n                            count: snapshot.val().count + 1\n                        })\n                    } else {\n                        notification.child(uid).set({\n                            count: 1\n                        })\n                    }\n                })\n                removeNotification.set({\n                    count: 0\n                })\n            }\n\n            const rootRef = rdbx.ref().child(this.state.stallName).child(dbName);\n            rootRef.push().set({\n                uid: uid,\n                time: Date.now(),\n                name: name,\n                stallName: this.state.externalName,\n                text: text\n            });\n            this.setState({ text: '' });\n        }\n    }\n\n    getUserAvatarImageByID = (id, userType) => {\n\n        const userRef = rdbx.ref(AppString.USERS_DOC_REALTIME_DB);\n        let defaultUrl = AppString.DEFAULT_AVATAR;\n        var snapThis = this;\n\n        userRef.on('value', (snapshot) => {\n            snapshot.forEach(function (child) {\n                if (id === child.key) {\n                    defaultUrl = child.val().profile_picture;\n                    if (userType === 0) {\n                        snapThis.setState({ stallManagerAvatar: defaultUrl });\n                    } else {\n                        snapThis.setState({ userAvatar: defaultUrl, userName: child.val().fullName, userEmail: child.val().email, userCompany: child.val().company });\n                    }\n                }\n            })\n\n        })\n\n        if (userType === 0) {\n            snapThis.setState({ stallManagerAvatar: defaultUrl });\n        } else {\n            this.setState({ userAvatar: defaultUrl });\n        }\n\n    }\n\n    //Scroll message UI-kit\n    scrollToBottom = () => {\n        const messagesContainer = ReactDOM.findDOMNode(this.messagesContainer);\n        //console.log(messagesContainer.scrollHeight);\n        if (messagesContainer)\n            messagesContainer.scroll(0, messagesContainer.scrollHeight);\n    }\n    // emoji open\n    openEmoji = () => {\n        let emoji = document.querySelector('.emoji');\n        (emoji.style.display === 'block')\n            ? emoji.style.display = \"none\"\n            : emoji.style.display = \"block\"\n    }\n    openEmojiClose = () => {\n        let emoji = document.querySelector('.emoji');\n        if (emoji.style.display === 'block') { emoji.style.display = \"none\" }\n    }\n\n    pickEmoji = (emo) => {\n        let prevText = this.state.text;\n        this.setState({ text: prevText + emo })\n    }\n\n    signout = () => {\n        localStorage.setItem('loginKey', []);\n\n        this.props.isLogout()\n    }\n    //Sorting by time\n    srotingMessageFromTime = (a, b) => {\n        return a.time > b.time;\n    }\n\n    getUserData = (id) => {\n\n        // var docRef = dbx.collection(\"users\").doc(id);\n        let self = this;\n        // docRef.get().then(function (doc) {\n        //     if (doc.exists) {\n        //         console.log(\"Document data:\", doc.data());\n        //         if (doc.data().company) {\n        //             self.setState({ userCompany: doc.data().company })\n        //         } else {\n        //             self.setState({ userCompany: 'Company Name Not Found' })\n        //         }\n\n        //     } else {\n        //         // doc.data() will be undefined in this case\n        //         console.log(\"No such document!\");\n        //         self.setState({ userCompany: 'Company Name Not Found' })\n        //     }\n        // }).catch(function (error) {\n        //     console.log(\"Error getting document:\", error);\n        //     self.setState({ userCompany: 'Company Name Not Found' })\n        // });\n\n\n        //Online Off Line Check\n        const userOnlineCheck = rdbx.ref().child(AppString.STALL_ONLINE).child(id);\n        userOnlineCheck.on('value', snap => {\n            if (snap.exists()) {\n                if (\"offline\" === snap.val().State.StateMode) {\n                    self.setState({ isUserIsOnline: false })\n                } else {\n                    self.setState({ isUserIsOnline: true })\n                }\n            } else {\n                self.setState({ isUserIsOnline: false })\n            }\n        });\n\n    }\n\n    selectChatUser = (id) => {\n        this.state.currentChatUser = id;\n        this.setState({ currentChatUser: id })\n        this.singleChat(id);\n        this.getUserAvatarImageByID(id, 1);\n        this.getUserData(id);\n    }\n\n    render() {\n        return (\n            <div>\n\n                <div className=\"main__container\">\n                    <div className='top-header'>\n\n                        <img src={this.state.stallManagerAvatar} alt=\"avatar\" width=\"36\" />\n                        <div className=\"stallName\">{this.state.stallName}</div>\n                        <button className=\"signout\" onClick={this.signout}> Signout </button>\n                    </div>\n\n                    <div className=\"wrapper\">\n\n                        <div className=\"left__section scrollbar-style\">\n                            <UserList\n                                usersList={this.state.usersList}\n                                uid={this.state.uid}\n                                singleChat={this.selectChatUser.bind(this)}\n                                logout={this.props.isLogout}\n                            />\n                        </div>\n\n                        <div className=\"right__section\">\n                            {\n                                this.state.currentChatUser === null ? null : (\n                                    <div className=\"user-data-info\">\n                                        <div> <img src={this.state.userAvatar} alt=\"avatar\" className=\"user-data-info-image\" /> </div>\n                                        <span className=\"user-data-info-text\">\n                                            <strong style={{ textTransform: 'capitalize', color: '#000' }}>{this.state.userName}</strong>\n                                        </span>\n                                        <span className=\"user-data-info-text\">\n                                            <strong style={{ textTransform: 'capitalize', color: '#000' }}>{this.state.userEmail}</strong>\n                                        </span>\n                                        <span className=\"user-data-info-text\">\n                                            <strong style={{ textTransform: 'capitalize', color: '#000' }}>{this.state.userCompany}</strong>\n                                        </span>\n                                        <span className=\"user-data-info-text\">\n                                            <strong className={this.state.isUserIsOnline ? 'onlineUser' : 'offlineUser'}>{this.state.isUserIsOnline ? 'Online' : 'Offline'}</strong>\n                                        </span>\n                                    </div>)\n                            }\n\n                            {/* checking current chat User is null  */}\n                            {this.state.currentChatUser === null ?\n                                (<div style={{\n                                    textAlign: 'center',\n                                    fontSize: '2rem',\n                                    fontWeight: 'bold',\n                                }}>\n                                    Plese select any user\n                                </div>) : (\n\n\n\n                                    <div className=\"message__box scrollbar-style\" ref={(el) => { this.messagesContainer = el; }}>\n\n                                        {this.sortArrayElements(this.state.messages).map(\n                                            (message, i) => {\n                                                if (message.uid === this.state.uid) {\n                                                    return (\n                                                        <div className=\"msg__text\" key={i}>\n\n                                                            <div> <img src={this.state.stallManagerAvatar} alt=\"avatar\" /> </div>\n\n                                                            <span>\n                                                                <strong style={{ textTransform: 'capitalize', color: '#9E9E9E' }}>{this.state.stallName}</strong><br />\n                                                                {message.msg}\n                                                                <br />\n                                                                <small style={{ color: '#9E9E9E' }}>{moment(message.time).fromNow()}</small>\n                                                            </span>\n                                                        </div>\n                                                    )\n                                                } else {\n                                                    return (\n                                                        <div className=\"msg__text__right\" key={i}>\n                                                            <div> <img src={this.state.userAvatar} alt=\"avatar\" /> </div>\n                                                            <span>\n                                                                <strong style={{ textTransform: 'capitalize', color: '#9E9E9E' }}>{message.name}</strong><br />\n                                                                {message.msg}\n                                                                <br />\n                                                                <small style={{ color: '#9E9E9E' }}>{moment(message.time).fromNow()}</small>\n                                                            </span>\n                                                        </div>\n                                                    )\n                                                }\n                                            }\n                                        )\n                                        }\n\n                                    </div>\n\n                                )}\n\n                            {this.state.currentChatUser !== null ? (\n\n                                <form>\n                                    <div className=\"message__type__box\">\n                                        <input\n                                            placeholder=\"Type Your Message\"\n                                            onChange={(e) => { this.setState({ text: e.target.value }) }}\n                                            value={this.state.text}\n                                            require=\"true\"\n                                            onFocus={this.openEmojiClose}\n                                        />\n                                        <span className=\"emojiIcon\" onClick={this.openEmoji}> ☺ </span>\n                                        <button type=\"submit\" onClick={this.pushMsg} > <i className=\"glyphicon glyphicon-send\"></i> </button>\n                                    </div>\n                                </form>\n\n                            ) : null}\n\n\n\n                        </div>\n\n                    </div>\n\n\n                    <div className=\"emoji\">\n                        {this.state.emoji.map(\n                            (emo, i) =>\n                                <a key={i} onClick={() => { this.pickEmoji(emo) }}> <span role=\"img\">{emo}</span> </a>\n                        )}\n                    </div>\n\n                </div>\n\n            </div >\n        )\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { authx,rdbx,dbx } from \"../firebase\";\nimport { AppString } from \"../const\";\n \nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      display: 'inline-block', \n      email: '',\n      password: '',\n      error: null,\n      alreaylogged: false\n    };\n  }\n\n  loginWithGmail = e => {\n    e.preventDefault();\n\n   { console.log('Clicked On Login')}\n    \n     const { email,password } = this.state;\n\n     const pass = `${email}123456`\n    \n  \n    authx.signInWithEmailAndPassword(email,pass).then(result => {\n        //If already registred user\n        let userRef = rdbx.ref().child(AppString.USERS_DOC_REALTIME_DB).child(result.user.uid);\n        \n        userRef.once(\"value\", snapshot => {\n          var isAvailable = snapshot.val();\n          if (!isAvailable) {\n            this.addUserList(result);\n          } else {\n            //Check Default Image Is Their or not\n            if(result.user.photoURL){\n              userRef.update({ profile_picture: result.user.photoURL });\n            }else{\n              userRef.update({ profile_picture: AppString.DEFAULT_AVATAR });\n            }\n          }\n        });\n\n      let isJoinedStall=false;\n      dbx.collection(AppString.ADMIN_DOC).doc(AppString.ADMIN_TABLE).get().then(fun=>{ \n          let stallAdminList=fun.data();\n\n          for(let i=0;i<stallAdminList.AdminList.length;i++){\n            if(stallAdminList.AdminList[i].adminUID===result.user.uid)\n            {\n              isJoinedStall=true;\n              localStorage.setItem(\n                \"loginKey\",\n                JSON.stringify({\n                  uid: result.user.uid,\n                  username: result.user.displayName || \"Admin\",\n                  stallName:stallAdminList.AdminList[i].stallName,\n                  externalName: stallAdminList.AdminList[i].externalName\n                })\n              );\n              //Redirecting to home page\n              this.props.isLogin();\n              console.log(\"Success Login\");\n              break;\n            }\n\n          }\n\n          if(!isJoinedStall){\n            this.setState({ error: 'You have no permission to login in Stall Admin Area' });\n          }\n      });\n      \n      })\n      .catch(error => {\n        var errorMessage = error.message;\n        this.setState({ error: errorMessage });\n      });\n  };\n\n  handleChange(e, name) {\n    this.handleStateChange([name], e.target.value);\n  }\n\n  handleStateChange(name, value) {\n    this.setState({ [name]: value });\n  }\n\n\n  addUserList = result => {\n    const rootRef = rdbx.ref().child(AppString.USERS_DOC_REALTIME_DB).child(result.user.uid);\n\n    let userImage='';\n    if(result.user.photoURL){\n      userImage= result.user.photoURL;\n    }else{\n      userImage= AppString.DEFAULT_AVATAR;\n    }\n\n\n    rootRef.set({\n      userName:result.user.displayName,\n      profile_picture: userImage,\n      fullName: result.user.displayName,\n      email: result.user.email\n    });\n\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n\n          <div className=\"row\">\n            \n            <div className=\"col-md-6 col-md-offset-3 outer-box-login\">\n\n              <img src=\"logo.png\"></img>\n              <h3>Admin Chat Login</h3>\n              <br />\n              \n              <div className=\"login-area\">\n\n              <div className=\"form-group\">\n                  <input\n                    id=\"email\"\n                    className=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"Enter your email ID\"\n                    onChange={(e) => this.handleChange(e, \"email\")}\n                    value={this.state.email}\n                    required\n                  />\n                </div>\n\n                {/* <div className=\"form-group\">\n                  <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"Enter your password\"\n                    id=\"password\"\n                    onChange={(e) => this.handleChange(e, \"password\")}\n                    value={this.state.password}\n                    required\n                  />\n                </div> */}\n             \n              <button\n                type=\"button\"\n                className=\"login-btn\"\n                onClick={this.loginWithGmail}\n                style={{ display: this.state.display }}\n              >\n                Login\n              </button>\n              <br />\n              <br />\n\n              {this.state.error ? (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {this.state.error}\n                </div>\n              ) : (\n                \"\"\n              )}\n\n              </div>\n                \n\n            </div>\n\n          </div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\n \nexport default Login;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from \"./component/home\";\nimport Login from \"./component/login\";\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      isLogin: false\n    }\n  }\n\n  componentWillMount(){\n    const cachedHits = localStorage.getItem('loginKey');\n    if(cachedHits){\n      this.setState({isLogin:true})\n    }\n  }\n\n  isLogin = ()=>{\n    this.setState({isLogin:true})\n  }\n  isLogout= () =>{\n    localStorage.removeItem('loginKey', []);\n    this.setState({isLogin:false})\n  }\n\n\n\n  render() {\n    \n    return (\n      <div>\n        {(this.state.isLogin)\n          ? <Home isLogout={this.isLogout}/>\n          : <Login isLogin={this.isLogin} />\n        }\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { authx,rdbx,dbx } from \"./firebase\";\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}