{"version":3,"sources":["firebase.js","components/client-chat/PublicChat.js","App.js","serviceWorker.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authx","auth","dbx","firestore","rdbx","storage","database","fieldValue","FieldValue","UserInfromationTable","PublicChat","props","state","error","isLoading","messages","channels","replied","lastMessageTime","activeMessages","publicChannelMembers","publicChannel","activeChannel","activeTab","type","ChatType","privateChat","activeMember","searchText","chatuser","notifyEmail","getUserData","user","need","i","length","id","email","getUserDataFromChat","getUserAvatarImage","getUserAvatarImageForPrivChat","handleError","console","setState","setupChatClient","client","getChannelByUniqueName","channelId","then","channel","catch","body","code","createChannel","uniqueName","friendlyName","channelName","isPrivate","join","getMessages","messagePage","messagesLoaded","on","message","messageAdded","setInterval","getMembers","membersLoaded","subscribeChannel","getSubscribedChannels","paginator","items","forEach","subscribeChannelMessages","twilioMessageToMessage","sid","text","attributes","timestamp","dateCreated","setCurrentTab","tab","onPublicChanelClick","members","map","member","toMember","identity","filter","vars","split","name","activateChannel","handleOnline","SaveForNotify","toemail","collection","doc","get","exists","update","notify_to","date","Date","now","set","log","PublicMessageAddedInFirebase","msg","msgby","serverTimestamp","sentby","PrivateMessageAddedInFirebase","receiver","sender","msgbetween","reciever","previousMessage","push","scroll","value","value1","sendMessage","event","current","onMemberClick","ids","sort","setupChannel","invite","reason","e","setTimeout","maxScrollTop","messageDiv","scrollHeight","clientHeight","scrollTop","onSearchTextChange","showUserImage","RetunKey","str","Math","floor","random","uimage","React","createRef","this","stallID","window","c","ref","snap","data","val","Object","keys","key","onAuthStateChanged","displayName","photoURL","fetch","headers","method","encodeURIComponent","res","json","Chat","create","token","shutdown","className","toLocaleLowerCase","includes","x","y","xTimestamp","setFullYear","getFullYear","final","xi","href","src","alt","onClick","placeholder","search","onChange","target","Both","style","display","marginRight","width","onKeyPress","Component","publicChat","App","getURLPARAM","urlParam","location","uid","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a80eef3.chunk.js","sourcesContent":["import app from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/database\";\r\n\r\n// var config = {\r\n//   apiKey: \"AIzaSyBWLia0wFSHCWzZY8MwHizgZ26ihPzuT8M\",\r\n//   authDomain: \"cipla-embart.firebaseapp.com\",\r\n//   databaseURL: \"https://cipla-embart.firebaseio.com\",\r\n//   projectId: \"cipla-embart\",\r\n//   storageBucket: \"cipla-embart.appspot.com\",\r\n//   messagingSenderId: \"98727109263\",\r\n//   appId: \"1:98727109263:web:570856080f82e5c71e46fa\",\r\n//   measurementId: \"G-VHBSQJV27C\"\r\n// };\r\n\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyBwwK-YDdmEhhlszL7AIqUi1ww9z6qBPfg\",\r\n  authDomain: \"vc-circle-cd367.firebaseapp.com\",\r\n  databaseURL: \"https://vc-circle-cd367-default-rtdb.firebaseio.com\",\r\n  projectId: \"vc-circle-cd367\",\r\n  storageBucket: \"vc-circle-cd367.appspot.com\",\r\n  messagingSenderId: \"515670184062\",\r\n  appId: \"1:515670184062:web:7ebe5cc403b91d144ec82f\",\r\n  measurementId: \"G-S9JV9Z6XXD\"\r\n};\r\n\r\napp.initializeApp(config);\r\nconst authx = app.auth();\r\nconst dbx = app.firestore();\r\nconst storage = app.storage();\r\nconst rdbx = app.database();\r\nconst rdatabasex = app.database;\r\nconst fieldValue = app.firestore.FieldValue;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    this.app = app;\r\n    this.auth = app.auth();\r\n    this.db = app.firestore();\r\n    this.firestore = app.firestore();\r\n    this.database = app.database();\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\nexport { dbx, authx, storage, rdbx, rdatabasex, fieldValue };\r\n","import React, { Component } from \"react\";\r\nimport \"./PublicChat.css\";\r\nimport Chat from \"twilio-chat\";\r\nimport PropTypes from \"prop-types\";\r\nimport { authx, dbx, fieldValue, rdbx } from \"../../firebase\";\r\nimport { instanceOf } from \"prop-types\";\r\nimport { ChatType } from \"../../App\";\r\n\r\nconst dontLoadUserImage = true;\r\nconst showEmailID = true;\r\nconst showCompanyName = true;\r\n\r\n\r\nvar UserInfromationTable = [];\r\nclass PublicChat extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoading: true,\r\n    messages: {},\r\n    channels: {},\r\n    replied: {},\r\n    lastMessageTime: {},\r\n    activeMessages: [],\r\n    publicChannelMembers: [],\r\n    publicChannel: null,\r\n    activeChannel: null,\r\n    activeTab: this.props.type !== ChatType.privateChat ? \"tab1\" : 'tab2',\r\n    activeMember: null,\r\n    searchText: \"\",\r\n    chatuser: null,\r\n    notifyEmail: \"\",\r\n    type: this.props.type,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.user = {\r\n      channelId: props.channel.id,\r\n      channelName: props.channel.name,\r\n      id: props.user.id,\r\n      name: props.user.name,\r\n      uimage: props.user.uimage,\r\n    };\r\n\r\n    if (props.user.uimage == null || props.user.uimage) {\r\n      this.uimage = \"assets/images/Profile-picture.png\";\r\n      this.setState({ uimage: \"assets/images/Profile-picture.png\" });\r\n    }\r\n\r\n    this.message = React.createRef();\r\n    this.messageDiv = React.createRef();\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n\r\n    let stall_Id = this.state.stallID;\r\n    let self = this;\r\n    window.c = this\r\n    rdbx.ref('/users').on('value', (snap) => {\r\n      if (snap.exists()) {\r\n        const data = snap.val();\r\n        console.log(data)\r\n        Object.keys(data).forEach(key => {\r\n          UserInfromationTable.push(data[key]);\r\n        })\r\n      } else {\r\n        console.error('No User data found')\r\n      }\r\n    })\r\n\r\n    // dbx.collection(\"users\").get().then(function (querySnapshot) {\r\n    //   querySnapshot.forEach(function (doc) {\r\n    //     // doc.data() is never undefined for query doc snapshots\r\n    //     //  console.log(doc.id, \" => \", doc.data());\r\n    //     UserInfromationTable.push(doc.data());\r\n    //   });\r\n    // });\r\n\r\n  }\r\n\r\n  getUserData = (user, need) => {\r\n    if (!showEmailID) {\r\n      return \"\";\r\n    }\r\n    if (!user) {\r\n      return '';\r\n    }\r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user.id === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][need] ? UserInfromationTable[i][need] : '';\r\n      }\r\n    }\r\n    return 'New User';\r\n  }\r\n\r\n  getUserDataFromChat = (user, need) => {\r\n    if (!showCompanyName) {\r\n      return '';\r\n    }\r\n    if (!user) {\r\n      return '';\r\n    }\r\n\r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user.id === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][need] ? UserInfromationTable[i][need] : '';\r\n      }\r\n    }\r\n    return 'Company name';\r\n  }\r\n\r\n  getUserAvatarImage = (user, need) => {\r\n\r\n    if (dontLoadUserImage) {\r\n      return 'assets/images/Profile-picture.png';\r\n    }\r\n\r\n    if (!user) {\r\n      return 'assets/images/Profile-picture.png';\r\n    }\r\n    //NOTE: I taking image from user table  \r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user.id === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i][need] ? UserInfromationTable[i][need] : '';\r\n      }\r\n    }\r\n    return 'assets/images/Profile-picture.png';\r\n  }\r\n\r\n\r\n  getUserAvatarImageForPrivChat = (user) => {\r\n\r\n    if (dontLoadUserImage) {\r\n      return 'assets/images/Profile-picture.png';\r\n    }\r\n\r\n    if (!user) {\r\n      return 'assets/images/Profile-picture.png';\r\n    }\r\n\r\n    //NOTE: I taking image from user table  \r\n    for (let i = 0; i < UserInfromationTable.length; i++) {\r\n      if (user === UserInfromationTable[i].email) {\r\n        return UserInfromationTable[i]['profile_picture'];\r\n      }\r\n    }\r\n    return 'assets/images/Profile-picture.png';\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    authx.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        // User is signed in.\r\n        //.log(user.uid);\r\n        this.setState({\r\n          chatuser: { email: user.email, name: user.displayName, photoURL: user.photoURL },\r\n        });\r\n        console.log(\"Chat User \" + user.email);\r\n      } else {\r\n        // No user is signed in.\r\n        this.setState({\r\n          chatuser: { email: \"shubham@dj.com\", name: \"Shubham\" },\r\n        });\r\n        console.log(\"Chat User not Loaded shubham@dj.com\");\r\n      }\r\n    });\r\n\r\n    fetch(\r\n      // \"https://twilio-chat-api-dot-virtualeventdemo.el.r.appspot.com/chat/token\",\r\n      'https://chat.photoboothassetmanagement.co.in/chat/token',\r\n      {\r\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        method: \"POST\",\r\n        body: `identity=${encodeURIComponent(\r\n          this.user.id + \",\" + this.user.name\r\n        )}`,\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => Chat.create(data.token))\r\n      .then(this.setupChatClient)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  handleError = (error) => {\r\n    console.error(error);\r\n    this.setState({\r\n      error: \"Could not load chat.\",\r\n    });\r\n  };\r\n\r\n  setupChatClient = (client) => {\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName(this.user.channelId)\r\n      .then((channel) => channel)\r\n      .catch((error) => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({\r\n            uniqueName: this.user.channelId,\r\n            friendlyName: this.user.channelName,\r\n            isPrivate: false,\r\n          });\r\n        } else {\r\n          this.handleError(error);\r\n        }\r\n      })\r\n      .then((channel) => {\r\n        this.setState({ publicChannel: channel });\r\n        return this.state.publicChannel.join().catch(() => { });\r\n      })\r\n      .then(() => {\r\n        var self = this;\r\n        this.setState({ isLoading: false });\r\n        this.state.publicChannel\r\n          .getMessages()\r\n          .then((messagePage) => {\r\n            if (this.props.type !== ChatType.privateChat)\r\n              this.messagesLoaded(this.state.publicChannel, messagePage, true)\r\n          }\r\n          );\r\n        this.state.publicChannel.on(\"messageAdded\", (message) =>\r\n          this.messageAdded(this.state.publicChannel, message)\r\n        );\r\n        setInterval(() => {\r\n          this.state.publicChannel.getMembers().then(this.membersLoaded);\r\n        }, 1000);\r\n\r\n        // setTimeout(()=>{\r\n        //     self.setCurrentTab(\"tab2\");\r\n        // }, 1500)\r\n      })\r\n      .catch(this.handleError);\r\n\r\n    this.client.on(\"channelInvited\", (channel) => {\r\n      channel.join();\r\n      this.subscribeChannel(channel);\r\n    });\r\n\r\n    this.client.getSubscribedChannels().then((paginator) => {\r\n      paginator.items.forEach((channel) => {\r\n        this.subscribeChannel(channel);\r\n      });\r\n    });\r\n  };\r\n\r\n  subscribeChannel(channel) {\r\n    let channels = this.state.channels;\r\n    channels[channel.uniqueName] = channel;\r\n    this.setState({ channels: channels });\r\n    this.subscribeChannelMessages(channel);\r\n  }\r\n\r\n  subscribeChannelMessages = (channel) => {\r\n    channel\r\n      .getMessages()\r\n      .then((messagePage) => this.messagesLoaded(channel, messagePage, false));\r\n    channel.on(\"messageAdded\", (message) =>\r\n      this.messageAdded(channel, message)\r\n    );\r\n  };\r\n\r\n  twilioMessageToMessage = (message) => {\r\n    return {\r\n      id: message.sid,\r\n      text: message.body,\r\n      user: message.attributes.user || {},\r\n      timestamp: message.dateCreated,\r\n    };\r\n  };\r\n\r\n  setCurrentTab = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n    if (tab == \"tab1\") {\r\n      this.onPublicChanelClick();\r\n    } else if (tab == \"tab2\") {\r\n      this.setState({ activeChannel: null });\r\n    }\r\n  };\r\n\r\n  membersLoaded = (members) => {\r\n    let publicChannelMembers = members\r\n      .map((member) => this.toMember(member.identity))\r\n      .filter((member) => member.id != this.user.id);\r\n    this.setState({ publicChannelMembers: publicChannelMembers });\r\n  };\r\n\r\n  toMember = (identity) => {\r\n    let vars = identity.split(\",\");\r\n    return { id: vars[0], name: vars[1], identity: identity };\r\n  };\r\n\r\n  messagesLoaded = (channel, messagePage, activateChannel) => {\r\n    let messages = this.state.messages;\r\n    messages[channel.sid] = messagePage.items.map(this.twilioMessageToMessage);\r\n    this.setState({ messages: messages });\r\n\r\n    if (messagePage.items.length > 0) {\r\n      let message = messages[channel.sid][messagePage.items.length - 1];\r\n      if (message.user.name == this.user.name) {\r\n        this.handleOnline(channel, message, true);\r\n      } else {\r\n        this.handleOnline(channel, message, false);\r\n      }\r\n    }\r\n\r\n    if (activateChannel) {\r\n      this.activateChannel(channel);\r\n    }\r\n  };\r\n\r\n  SaveForNotify = (toemail) => {\r\n    dbx\r\n      .collection(\"ChatNotification\")\r\n      .doc(toemail)\r\n      .get()\r\n      .then(function (doc) {\r\n        if (doc.exists) {\r\n          dbx.collection(\"ChatNotification\").doc(toemail).update({\r\n            notify_to: toemail,\r\n            date: Date.now(),\r\n          });\r\n        } else {\r\n          // doc.data() will be undefined in this case\r\n          dbx.collection(\"ChatNotification\").doc(toemail).set({\r\n            notify_to: toemail,\r\n            date: Date.now(),\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n  };\r\n\r\n\r\n\r\n  PublicMessageAddedInFirebase = (msg, msgby) => {\r\n    dbx\r\n      .collection(\"PublicChatData\")\r\n      .doc()\r\n      .set({\r\n        date: fieldValue.serverTimestamp(),\r\n        message: msg,\r\n        sentby: msgby,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Success updating document:\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error updating document:\", error);\r\n      });\r\n  };\r\n\r\n  PrivateMessageAddedInFirebase = (msg, channel, receiver, sender) => {\r\n    dbx\r\n      .collection(\"PrivateChatData\")\r\n      .doc()\r\n      .set({\r\n        date: fieldValue.serverTimestamp(),\r\n        message: msg,\r\n        msgbetween: channel,\r\n        reciever: receiver,\r\n        sender: sender,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Success updating document:\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error updating document:\", error);\r\n      });\r\n  };\r\n\r\n  messageAdded = (channel, message) => {\r\n    if (this.previousMessage == null) {\r\n      this.previousMessage = message;\r\n    } else if (this.previousMessage.sid == message.sid) {\r\n      return;\r\n    }\r\n    this.previousMessage = message;\r\n\r\n    let messages = this.state.messages;\r\n    message = this.twilioMessageToMessage(message);\r\n\r\n    if (messages[channel.sid]) {\r\n      messages[channel.sid].push(message);\r\n    } else {\r\n      messages[channel.sid] = [];\r\n      messages[channel.sid].push(message);\r\n    }\r\n    this.setState({ messages: messages });\r\n\r\n    if (message.user.name == this.user.name) {\r\n      this.handleOnline(channel, message, true);\r\n    } else {\r\n      this.handleOnline(channel, message, false);\r\n    }\r\n\r\n    if (\r\n      channel.sid == (this.state.activeChannel && this.state.activeChannel.sid)\r\n    ) {\r\n      this.scroll();\r\n    }\r\n\r\n    //this.GetNotification();\r\n\r\n\r\n    // if (this.state.activeTab == \"tab2\") {\r\n    //   console.log(\"Message Sent To: \" + this.state.activeMember.id);\r\n    //   console.log(\"Message Sent By: \" + this.state.chatuser.email);\r\n    //   console.log(\"Channel: \" + channel.uniqueName);\r\n    //   console.log(\"Message: \" + message.text);\r\n    // }\r\n\r\n    // if (this.state.activeTab == \"tab1\") {\r\n    //   console.log(\"Message Sent By: \" + this.state.chatuser.email);\r\n    //   console.log(\"Channel: \" + channel.friendlyName);\r\n    //   console.log(\"Message: \" + message.text);\r\n    // }\r\n  };\r\n\r\n  handleOnline = (channel, message, value) => {\r\n    let replied = this.state.replied;\r\n    let id = channel.uniqueName\r\n      .split(\",\")\r\n      .filter((value1) => value1 != this.user.id)[0];\r\n    if (value == true) {\r\n      delete replied[id];\r\n      console.log(\"delete\");\r\n    } else {\r\n      replied[id] = value;\r\n      console.log(replied);\r\n    }\r\n\r\n    //console.log(\"id \"+ id + \" replied \"+value);\r\n    this.setState({ replied: replied });\r\n\r\n    let lastMessageTime = this.state.lastMessageTime;\r\n    lastMessageTime[id] = message.timestamp;\r\n    this.setState({ lastMessageTime: lastMessageTime });\r\n  };\r\n\r\n  sendMessage = (event) => {\r\n    if (this.message.current.value) {\r\n      this.state.activeChannel.sendMessage(this.message.current.value, {\r\n        user: this.user,\r\n      });\r\n\r\n      if (this.state.activeTab == \"tab1\") {\r\n\r\n        this.PublicMessageAddedInFirebase(\r\n          this.message.current.value,\r\n          this.state.chatuser.email\r\n        );\r\n      }\r\n\r\n      if (this.state.activeTab == \"tab2\") {\r\n\r\n        this.PrivateMessageAddedInFirebase(\r\n          this.message.current.value,\r\n          this.state.activeChannel.uniqueName,\r\n          this.state.activeMember.id,\r\n          this.state.chatuser.email\r\n        );\r\n\r\n        this.SaveForNotify(this.state.activeMember.id);\r\n      }\r\n\r\n      this.message.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  onMemberClick = (member) => {\r\n    let ids = [member.id, this.user.id];\r\n    ids.sort();\r\n    let channelId = ids.join();\r\n\r\n    if (this.state.channels[channelId] == null) {\r\n      this.setupChannel(this.client, channelId, member);\r\n    } else {\r\n      this.activateChannel(this.state.channels[channelId]);\r\n      this.setState({ activeMember: member });\r\n    }\r\n  };\r\n\r\n  setupChannel = (client, channelId, member) => {\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName(channelId)\r\n      .then((channel) => channel)\r\n      .catch((error) => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({\r\n            uniqueName: channelId,\r\n            isPrivate: true,\r\n          });\r\n        } else {\r\n          this.handleError(error);\r\n        }\r\n      })\r\n      .then((channel) => {\r\n        this.channel = channel;\r\n        return this.channel.join().catch(() => { });\r\n      })\r\n      .then(() => {\r\n        try {\r\n          this.channel\r\n            .invite(member.identity)\r\n            .catch((reason) => console.log(reason));\r\n        } catch (e) { }\r\n        this.subscribeChannel(this.channel);\r\n        this.setState({ activeMember: member });\r\n      })\r\n      .catch(this.handleError);\r\n  };\r\n\r\n  activateChannel = (channel) => {\r\n    this.setState({ activeChannel: channel });\r\n    this.setState({ activeMessages: this.state.messages[channel.sid] });\r\n    this.scroll();\r\n  };\r\n\r\n  onPublicChanelClick = () => {\r\n    this.activateChannel(this.state.publicChannel);\r\n    setTimeout(this.scroll, 100);\r\n  };\r\n\r\n  scroll = () => {\r\n    //console.log(\"scroll\");\r\n    const scrollHeight = this.messageDiv.current.scrollHeight;\r\n    const height = this.messageDiv.current.clientHeight;\r\n    const maxScrollTop = scrollHeight - height;\r\n    this.messageDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n  };\r\n\r\n  onSearchTextChange = (value) => {\r\n    this.setState({ searchText: value });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.client.shutdown();\r\n  }\r\n\r\n  showUserImage = () => {\r\n    if (!dontLoadUserImage) {\r\n      return this.user.uimage;\r\n    }\r\n    return 'assets/images/Profile-picture.png';\r\n  }\r\n\r\n  RetunKey = (str) => {\r\n    let r = Math.floor(Math.random() * 100000);\r\n    let rk = str + \"\" + r;\r\n    return rk;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <div className=\"fullScr\">{this.state.error}</div>;\r\n    } else if (this.state.isLoading) {\r\n      return <div className=\"fullScr\">Loading Chat...</div>;\r\n    }\r\n\r\n    let searchText = this.state.searchText;\r\n    let publicChannelMembers = this.state.publicChannelMembers\r\n      .filter((member) => {\r\n        return searchText == \"\"\r\n          ? true\r\n          : (member.name || \"\")\r\n            .toLocaleLowerCase()\r\n            .includes(searchText.toLocaleLowerCase());\r\n      })\r\n      .sort((x, y) => {\r\n        let xTimestamp = this.state.lastMessageTime[x.id]\r\n          ? this.state.lastMessageTime[x.id]\r\n          : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\r\n        let yTimestamp = this.state.lastMessageTime[y.id]\r\n          ? this.state.lastMessageTime[y.id]\r\n          : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\r\n        return yTimestamp - xTimestamp;\r\n      });\r\n\r\n    let final = [];\r\n    for (let xi = 0; xi < publicChannelMembers.length; xi++) {\r\n      //console.log(publicChannelMembers[xi].name);\r\n      let name = publicChannelMembers[xi].name;\r\n      if (name != \"null\" && name != null) {\r\n        final.push(publicChannelMembers[xi]);\r\n      }\r\n    }\r\n    // console.log(publicChannelMembers);\r\n    //console.log(final);\r\n    publicChannelMembers = final;\r\n    return (\r\n      <>\r\n        <div className=\"wrapper h-100\">\r\n          <header className=\"header\">\r\n            <a href=\"#\" className=\"header__logo\">\r\n              <img src=\"assets/images/logo.png\" alt=\"\" />\r\n            </a>\r\n            {/* <a href=\"#\" className=\"header__close\">\r\n                        <i className=\"icon-close\"></i>\r\n                    </a> */}\r\n          </header>\r\n          <div className=\"contentCntr\">\r\n            <aside className=\"sidebar show-on-desktop\">\r\n\r\n              <div className=\"sidebar__header\">\r\n                <div className=\"sidebar__user\">\r\n                  <div className=\"user-block\">\r\n                    <div className=\"user-block__pic\">\r\n                      <img src={this.showUserImage()} alt=\"\" />\r\n                      {/* <span className=\"user-block__online\"></span> */}\r\n                    </div>\r\n                    <span className=\"user-block__name\">{this.user.name}</span>\r\n                  </div>\r\n                </div>\r\n                <a\r\n                  className=\"sidebar__link\"\r\n                  onClick={(event) => this.onPublicChanelClick()}\r\n                >\r\n                  {this.user.channelName}\r\n                </a>\r\n                <a className=\"sidebar__link\">\r\n                  Chat ({publicChannelMembers.length})\r\n                </a>\r\n              </div>\r\n\r\n              <div className=\"sidebar__body\">\r\n                <div className=\"search-block\">\r\n                  <div className=\"search-block__form\">\r\n                    <input\r\n                      className=\"search-block__input\"\r\n                      type=\"text\"\r\n                      placeholder=\"Search\"\r\n                      ref={this.search}\r\n                      onChange={(event) =>\r\n                        this.onSearchTextChange(event.target.value)\r\n                      }\r\n                    />\r\n                    <button className=\"search-block__btn\">\r\n                      <i className=\"icon-search\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"user-block-list\">\r\n                  <div>\r\n                    {publicChannelMembers.map((member) => (\r\n                      <div\r\n                        className=\"user-block\"\r\n                        key={member.identity}\r\n                        onClick={(event) => this.onMemberClick(member)}\r\n                      >\r\n                        <div className=\"user-block__pic\">\r\n                          <img src={this.user.uimage} alt=\"\" />\r\n                          <span\r\n                            className={\r\n                              this.state.replied[member.id] == true\r\n                                ? \"\"\r\n                                : \"user-block__dnd\"\r\n                            }\r\n                          ></span>\r\n                        </div>\r\n                        <span className=\"user-block__name\">\r\n                          {member.name === 'null' ? member.id : member.name}\r\n                        </span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </aside>\r\n\r\n            <section className=\"chat-container\">\r\n              <div className=\"chat-section\">\r\n                {\r\n                  this.props.type === ChatType.Both &&\r\n                  <>\r\n                    <div className=\"chat-section__header chat-section__tabs hide-on-desktop\">\r\n                      <ul>\r\n                        <li onClick={(event) => this.setCurrentTab(\"tab1\")}>\r\n                          <a\r\n                            className={\r\n                              (this.state.activeChannel &&\r\n                                this.state.activeChannel.uniqueName) ==\r\n                                this.user.channelId\r\n                                ? \"active\"\r\n                                : \"\"\r\n                            }\r\n                          >\r\n                            {this.user.channelName}\r\n                          </a>\r\n                        </li>\r\n                        <li onClick={(event) => this.setCurrentTab(\"tab2\")}>\r\n                          <a\r\n                            className={\r\n                              this.state.activeTab == \"tab2\" ? \"active\" : \"\"\r\n                            }\r\n                          >\r\n                            ALL PARTICIPIENTS ({publicChannelMembers.length})\r\n                      </a>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </>\r\n                }\r\n\r\n\r\n                <div\r\n                  className=\"chat-section__header\"\r\n                  style={{ display: this.state.activeChannel ? \"\" : \"none\" }}\r\n                >\r\n                  <div className=\"user-block\">\r\n                    {\r\n                      this.state.activeTab !== 'tab1' &&\r\n                      <div onClick={() => this.setState({ activeChannel: null })} style={{ marginRight: '0.5rem' }}>\r\n                        <img style={{ width: '1.5rem' }} src={'./assets/images/back.png'} alt={'<'}></img>\r\n                      </div>\r\n                    }\r\n                    <div className=\"user-block__pic\">\r\n                      <img src={((this.state.activeChannel && this.state.activeChannel.friendlyName) ? \"assets/images/groupChatIcon.png\" : (this.getUserAvatarImage(this.state.activeMember, 'profile_picture')))} alt=\"\" />\r\n                    </div>\r\n                    <span className=\"user-block__name\">\r\n                      {(this.state.activeChannel &&\r\n                        this.state.activeChannel.friendlyName) ||\r\n                        (this.state.activeMember &&\r\n                          this.state.activeMember.name)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"chat-section__body chat-section__body--list\">\r\n                  <div\r\n                    className=\"chat-section\"\r\n                    style={{ display: this.state.activeChannel ? \"\" : \"none\" }}\r\n                  >\r\n                    <div className=\"chat-section__body\" ref={this.messageDiv}>\r\n                      {this.state.activeMessages &&\r\n                        this.state.activeMessages.map((message) => (\r\n                          <div\r\n\r\n                            className={`chat-section__message chat-section__message--${this.user.id == message.user.id\r\n                              ? \"sent\"\r\n                              : \"received\"\r\n                              }`}\r\n                            key={this.RetunKey(message.identity)}\r\n                          >\r\n                            {this.user.id == message.user.id && (\r\n                              <>\r\n                                {\" \"}\r\n                                <span className=\"chat-section__text\">\r\n                                  {message.text}\r\n                                </span>\r\n                                <span className=\"chat-section__profile\">\r\n                                  <span className=\"chat-section__profile__pic\">\r\n                                    <img src={(this.user.uimage == null) ? 'assets/images/Profile-picture.png' : this.user.uimage} alt=\"\" />\r\n                                  </span>\r\n                                  {/* {message.user.name} */}\r\n                                  {\r\n                                    showCompanyName ? (message.user.name + ', ' + this.getUserDataFromChat(message.user, 'designation') + ', ' + this.getUserDataFromChat(message.user, 'company')) : (message.user.name)\r\n                                  }\r\n                                </span>\r\n                              </>\r\n                            )}\r\n                            {this.user.id != message.user.id && (\r\n                              <>\r\n                                <span className=\"chat-section__profile\">\r\n                                  <span className=\"chat-section__profile__pic\">\r\n                                    <img src={this.getUserAvatarImage(message.user, 'profile_picture')} alt=\"\" />\r\n                                    {\r\n                                      showCompanyName ? (message.user.name + ', ' + this.getUserDataFromChat(message.user, 'designation') + ', ' + this.getUserDataFromChat(message.user, 'company')) : (message.user.name)\r\n                                    }\r\n                                  </span>\r\n                                </span>\r\n                                <span className=\"chat-section__text\">\r\n                                  {message.text}\r\n                                </span>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    {this.state.activeChannel && (\r\n                      <div className=\"chat-section__footer\">\r\n                        <div className=\"chat-section__form\">\r\n                          <input\r\n                            ref={this.message}\r\n                            type=\"text\"\r\n                            className=\"chat-section__input\"\r\n                            placeholder=\"Type a Message\"\r\n                            onKeyPress={(event) =>\r\n                              event.key === \"Enter\" && this.sendMessage(event)\r\n                            }\r\n                          ></input>\r\n                          <button\r\n                            onClick={(event) => this.sendMessage(event)}\r\n                            className=\"chat-section__btn\"\r\n                          >\r\n                            <i className=\"icon-send\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"sidebar__body\"\r\n                    style={{\r\n                      display:\r\n                        this.state.activeChannel == null &&\r\n                          this.state.activeTab != \"tab1\"\r\n                          ? \"\"\r\n                          : \"none\",\r\n                    }}\r\n                  >\r\n                    <div className=\"sidebar__body\">\r\n                      <div className=\"search-block\">\r\n                        <div className=\"search-block__form\">\r\n                          <input\r\n                            className=\"search-block__input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            ref={this.search}\r\n                            onChange={(event) =>\r\n                              this.onSearchTextChange(event.target.value)\r\n                            }\r\n                          />\r\n                          <button className=\"search-block__btn\">\r\n                            <i className=\"icon-search\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"user-block-list\">\r\n                        <div>\r\n                          {publicChannelMembers.map((member) => (\r\n                            <div\r\n                              className=\"user-block\"\r\n                              key={member.identity}\r\n                              onClick={(event) => this.onMemberClick(member)}\r\n                            >\r\n                              <div className=\"user-block__pic\">\r\n                                <img src={this.getUserAvatarImage(member, 'profile_picture')} alt=\"\" />\r\n                                {this.state.replied[member.id] != null && (\r\n                                  <span\r\n                                    className={\r\n                                      this.state.replied[member.id] == true\r\n                                        ? \"\"\r\n                                        : \"user-block__dnd\"\r\n                                    }\r\n                                  ></span>\r\n                                )}\r\n                              </div>\r\n                              <span className=\"user-block__name\">{member.name === 'null' ? member.id : member.name}</span><br></br><br></br>\r\n                              {<div className=\"blocks font-sm-12\">\r\n                                {\r\n                                  showCompanyName ? (', ' + this.getUserDataFromChat(member, 'designation') + \", \" + this.getUserData(member, 'company')) : \"\"\r\n                                }</div>}\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nPublicChat.propTypes = {\r\n  channel: PropTypes.object,\r\n  user: PropTypes.object,\r\n};\r\n\r\nexport default PublicChat;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport PublicChat from \"./components/client-chat/PublicChat\";\r\nimport { authx, dbx } from \"./firebase\";\r\n\r\n\r\nconst chatRoomName = \"chat-techcircle\";\r\nconst chatRoomDisplayName = \"Public Chat Room\";\r\n\r\nexport const ChatType = {\r\n  Both: 0,\r\n  publicChat: 1,\r\n  privateChat: 2,\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: null,\r\n    type: ChatType.Both,\r\n  };\r\n\r\n  getURLPARAM = () =>{\r\n    let urlParam = window.location.href.split('?')[1]\r\n    if (urlParam) {\r\n      switch (urlParam) {\r\n        case 'public':\r\n          this.setState({ type: ChatType.publicChat })\r\n          break;\r\n        case 'private':\r\n          this.setState({ type: ChatType.privateChat })\r\n          break;\r\n        default:\r\n          this.setState({ type: ChatType.Both })\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    authx.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.getURLPARAM()\r\n        // User is signed in.\r\n        console.log(user.uid);\r\n        this.setState({ user: { id: user.email, name: user.displayName, photoURL: user.photoURL } })\r\n      } else {\r\n        this.getURLPARAM()\r\n        // No user is signed in.\r\n        this.setState({ user: { id: \"shubham@dj.com\", name: \"Shubham\" } });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.user != null && (\r\n          <PublicChat\r\n            channel={{ id: chatRoomName, name: chatRoomDisplayName }}\r\n            user={{ id: this.state.user.id, name: this.state.user.name, uimage: this.state.user.photoURL }}\r\n            type={this.state.type}\r\n          >\r\n            {\" \"}\r\n          </PublicChat>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"rootchat\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}