{"version":3,"sources":["Firebase/index.js","Firebase/constant.js","Firebase/chatManager.js","Firebase/publicChatManager.js","Utility/index.js","Context/Auth/UserContextProvider.js","Context/UIContextProvider.js","Context/Chat/ChatContextProvider.js","Containers/Menu/Menu.js","Containers/Messages/index.js","Assets/svg/arrow.svg","Containers/PublicChat/PublicChat.js","Containers/IncallChat/IncallChat.js","Containers/Loader/Loader.js","Containers/Participants/Participants.js","Containers/PrivateChatRoom/PrivateChatRoom.js","Containers/PrivateChat/PrivateChat.js","Constants/PollStates.js","Components/Poll/index.js","Constants/CollectionConstants.js","Managers/PollManager.js","Containers/PollContainer/PollContainer.js","Managers/NotificationManager.js","Containers/NotificationContainer/NotificationContainer.js","Pages/Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","database","auth","analytics","AppString","user_ActiveStatus","user","isOnlineForDatabase","StateMode","userStatusDatabaseRef","ref","uid","onDisconnect","remove","then","set","name","displayName","id","UpdateUserTable","a","Promise","res","rej","userRef","once","snapshot","userData","userName","fullName","email","photoURL","profile_picture","err","console","log","callback","on","exists","val","code","orderByChild","result","count","forEach","child","key","singalTypingIndicator","roomId","userId","value","update","userOnlinePresence","listenerRef","onDisconnectRef","goOfflineInRoom","getOnlinPresentUserInRoom","refVar","message","generatePushID","PUSH_CHARS","lastPushTime","lastRandChars","now","Date","getTime","duplicateTime","timeStampChars","Array","i","charAt","Math","floor","Error","join","random","length","AvatarStyle","ChatTextStyle","getInitals","nameArr","trim","split","element","toUpperCase","sortObjectArray","arr","sort","b","UserContext","createContext","UserContextProvider","props","useState","JSON","parse","localStorage","getItem","setUser","useEffect","window","parent","loginUser","password","signInWithEmailAndPassword","userCred","catch","finally","login","onAuthStateChanged","setItem","stringify","isChecked","removeItem","Provider","children","UIContext","MenuStates","UIContextProvider","useContext","activeMenu","setActiveMenu","hidePoll","setHidePoll","isPollAdmin","setPollAdmin","userColorClassRecord","useRef","urlQuery","URLSearchParams","location","search","get","getParticipantColorNumber","mainObject","current","hasOwnProperty","ChatContext","ChatContextProvider","onlineUserslist","setOnlineUserslist","allParticipantList","setAllParticipantList","activeRoom","setActiveRoom","unseenMessageMetaData","setUnseenMessageMetaData","userLastInteractedRoom","setUserLastInteractedRoom","status","data","publicNotification","setPublicNotification","roomName","incallChatActive","setIncallChatActive","showInCallChat","setShowInCallChat","publicRoomName","setPublicRoom","notificationListenerRef","userInteractedRoomRef","InCallPresenceListenerRef","InCallOnlineUserListenerRef","InCallRoomValueRef","inCallRoomParticipantList","setInCallRoomParticipantList","activeMenuRef","toggleIncallChat","error","off","cancel","attachListenerPublic","realDB","attachPublicChatListener","PublicChatListenerRef","notification","type","senderId","senderName","room","publicRoomURl","Object","keys","push","details","getUserInteractedRoom","roomid","roomDetails","otherParticipantId","participants","filter","otherParticipantName","otherParticipant","createdAt","newResult","getOnlineUsers","getAllParticipants","openChatWithUser","currentUserId","otherUserId","participant","closePreviousChatRoom","Menu","className","onClick","href","Message","time","avartStyleRandom","toLocaleTimeString","timeStyle","ReceivedMsg","React","memo","SentMsg","PublicChat","state","messages","listenerCounter","scrollProgress","allowScrolling","pageSize","pageNumber","initialScrollDone","shouldAutoScroll","firstTime","typedMessage","inputRef","createRef","handleScroll","messageDiv","scrollHeight","scrollTop","clientHeight","setState","offsetTop","loadMessages","page","limit","offset","path","msgRef","limitToLast","reverse","slice","getMessageVideoChat","previousMessages","pop","newMessages","scroll","uuid4","array","Uint8Array","crypto","getRandomValues","idx","replace","toString","padStart","setTimeout","maxScrollTop","onSendMessageClick","event","preventDefault","messageData","context","uniquerId","newMessage","ServerValue","TIMESTAMP","msgKey","this","removeEventListener","focus","getMessageListenerVideoChat","showNotification","nextProps","nextContext","activeSideMenu","prevProps","prevState","showHeader","map","onSubmit","placeholder","onChange","e","target","disabled","Component","contextType","InCallChatHeader","useMemo","onbackClick","src","arrowSvg","alt","values","placement","trigger","overlay","toLowerCase","IncallChat","Loader","UserTile","role","initals","UsersSection","heading","userList","getTrimedMessage","sendId","substr","RecentMessageSection","recentList","recentMsg","Participants","PrivateChatRoom","setTypedMessage","typingIndicator","setTypingIndicator","activeRoomMessage","setActiveRoomMessage","chatBodyRef","manualScrollUp","currentChatListenerRef","typingListenerRef","typingDisconnectRef","otherUserUid","attachListener","attachOnDisconnectForTyping","addEventListener","maxHeight","getBoundingClientRect","height","scrollTo","messageDetails","currentUserName","currentUid","otherUserName","chatMetaData","increment","sendMessage1on1","PrivateChat","POLL_STATES","PollResult","currentIndex","index","question","options","totalResponse","option","response","style","width","PollQuestion","handleSubmit","checkIfAlreadyAnswered","feedbacks","eventId","answer","setAnswer","showError","setShowError","feedbackSuccess","setFeedbackSuccess","feedback","setFeedback","checked","color","marginBottom","textAlign","position","PollUser","visiblePollData","submitResponse","pollAnswerredData","marginTop","pollItem","overflow","POLL_COLLECTION","POLLRESPONSE_COLLECTION","BACKSTAGE_COLLECTION","uniqid","require","pollListenerRef","PollManager","form","docRef","collection","doc","option1","option2","option3","option4","timestamp","Timestamp","delete","pollId","where","onSnapshot","query","empty","_data","docs","pollRef","responseRef","runTransaction","transcation","feedbackData","date","FieldValue","_option","targetId","timeStamp","serverTimestamp","parseInt","PollContainer","isPollUser","pollAnalytics","setPollAnswerredData","pollData","setPollData","pollForm","setPollForm","isPollFormOpen","setIsPollFormOpen","isFeedbackExpand","setIsFeedbackExpand","pollFeedback","setPollFeedback","isPollFeedback","setIsPollFeedback","createNewPollbtnOpen","setCreateNewPollbtnOpen","loading","setLoading","open","showDeleteModal","setShowDeleteModal","getPoll","getAllPollAnsweredDataForCurrentUser","_pollAnswerredData","pollIds","indexOf","item","sortData","handleformSubmit","updatedData","ind","newForm","allForms","handleDeleteFeedbackPoll","handleFeedBackSubmit","handleDeletePoll","updateItem","whichvalue","newvalue","g","formType","border","alignSelf","display","paddingRight","autoFocus","required","justifyContent","fontWeight","paddingTop","float","cursor","padingLeft","DeleteModal","NotificationManager","notificaton","pollNotification","setPollNotification","published","pollNotificationForm","setPollNotificationForm","getPollNotification","handleNotificationSubmit","Home","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de39f348.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/database\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/functions\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCmOLevauXelxq4AkhIcxyeZj5Mjdev-kI\",\r\n  authDomain: \"peter-alexander-f1f90.firebaseapp.com\",\r\n  databaseURL:\r\n    \"https://peter-alexander-f1f90-default-rtdb.asia-southeast1.firebasedatabase.app\",\r\n  projectId: \"peter-alexander-f1f90\",\r\n  storageBucket: \"peter-alexander-f1f90.appspot.com\",\r\n  messagingSenderId: \"785012247671\",\r\n  appId: \"1:785012247671:web:d40d1aa683262b71710a72\",\r\n  measurementId: \"G-WBH5X5XF1H\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\nexport const firestore = firebase.firestore();\r\nexport const database = firebase.database();\r\nexport const analytics = firebase.analytics();\r\nexport const auth = firebase.auth();\r\n\r\nexport function login(name, password) {\r\n  auth\r\n    .signInWithEmailAndPassword(name, password)\r\n    .then((userCred) => {\r\n      console.log(userCred);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally((a) => console.log(a, \"finaly\"));\r\n}\r\n\r\nexport function updateName(user, name) {\r\n  if (!user.displayName) {\r\n    user.updateProfile({\r\n      displayName: name,\r\n    });\r\n  }\r\n}\r\n","export const AppString = {\r\n    USERS_DOC_REALTIME_DB: \"usersTable\",\r\n    DEFAULT_AVATAR: \"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png\",\r\n    USER_STATUS: \"user_status\",\r\n    // USER_STATUS: \"userInCall_status\",\r\n\r\n    ROOMS_LIST: \"roomsList\",\r\n    MEMBERS_LIST: \"membersList\",\r\n    ROOM_MESSAGES: \"roomMessages\",\r\n    ROOM_METADATA: \"roomMetadata\",\r\n    USER_NOTIFICATION: \"userNotification\",\r\n    ROOM_TYPING_INDICATOR: \"roomTypingStatus\",\r\n    INCALL_UserPresence : \"IncallPresence\"\r\n}","import firebase, { database } from \".\";\r\nimport { AppString } from \"./constant\";\r\n\r\nexport const user_ActiveStatus = (user) => {\r\n    let isOfflineForDatabase = {\r\n        StateMode: 'offline',\r\n    };\r\n    let isOnlineForDatabase = {\r\n        StateMode: 'online',\r\n    };\r\n    let userStatusDatabaseRef = database.ref('/chat/' + AppString.USER_STATUS + '/' + user.uid);\r\n    let onDisconnectRef = userStatusDatabaseRef.onDisconnect()\r\n    onDisconnectRef.remove().then(() => {\r\n        userStatusDatabaseRef.set({\r\n            ...isOnlineForDatabase,\r\n            name: user.displayName ?? \"\",\r\n            id: user.uid,\r\n        });\r\n    });\r\n}\r\n\r\nexport async function UpdateUserTable(user) {\r\n    return new Promise((res, rej) => {\r\n        let userRef = database.ref(`/chat/${AppString.USERS_DOC_REALTIME_DB}/${user.uid}`)\r\n        userRef.once(\"value\", async (snapshot) => {\r\n            let userData = {\r\n                userName: user.displayName,\r\n                fullName: user.displayName,\r\n                name: user.displayName,\r\n                id: user.uid,\r\n                email: user.email,\r\n            }\r\n            if (user.photoURL) {\r\n                userData = {\r\n                    ...userData,\r\n                    profile_picture: user.photoURL,\r\n                }\r\n            } else {\r\n                userData = {\r\n                    ...userData,\r\n                    profile_picture: AppString.DEFAULT_AVATAR,\r\n                }\r\n            }\r\n            await userRef.set(userData);\r\n\r\n            // if (!snapshot.exists()) {\r\n\r\n            // } else {\r\n            //     //Check Default Image Is Their or not\r\n            //     if (user.photoURL) {\r\n            //         await userRef.update({ profile_picture: user.photoURL });\r\n            //     } else {\r\n            //         await userRef.update({ profile_picture: AppString.DEFAULT_AVATAR });\r\n            //     }\r\n            // }\r\n            res()\r\n        }, err => {\r\n            console.log(err)\r\n            rej(err)\r\n        });\r\n    })\r\n}\r\n\r\nexport async function getOnlineUsers(callback) {\r\n    let userRef = database.ref(`/chat/${AppString.USER_STATUS}`)\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}\r\n\r\nexport async function getAllParticipants(callback) {\r\n    let userRef = database.ref(`/chat/${AppString.USERS_DOC_REALTIME_DB}`).orderByChild(\"email\")\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            let result = {}\r\n            let count = 1;\r\n            snapshot.forEach((child) => {\r\n                // console.log(child.key);\r\n                // console.log(child.val());\r\n                result[`${count}-${child.key}`] = child.val()\r\n                count++;\r\n            })\r\n            // console.log(result)\r\n            if (callback) {\r\n                callback(result)\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function getRoomIdWithUser(currentUserId, otherUserId) {\r\n    let id = \"\"\r\n    if (currentUserId > otherUserId) {\r\n        id = currentUserId + \"+\" + otherUserId\r\n    } else {\r\n        id = otherUserId + \"+\" + currentUserId\r\n    }\r\n    return id\r\n}\r\n\r\nexport async function getOldMessagesFromRoom(roomId) {\r\n    return new Promise((response, reject) => {\r\n        let userRef = database.ref(`/chat/messages/${roomId}`)\r\n        userRef.on(\"value\", async (snapshot) => {\r\n            if (snapshot.exists()) {\r\n                response(snapshot.val())\r\n            } else {\r\n                response([])\r\n            }\r\n        }, err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n\r\nexport function attachNewMessagesListener(refVar, roomId, callback) {\r\n    let userRef = database.ref(`/chat/${AppString.ROOM_MESSAGES}/${roomId}`)\r\n    refVar = userRef.on(\"child_added\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}\r\n\r\nexport function sendMessage1on1(currentUserName, currentUid, otherUserUid, otherUserName, roomId, message) {\r\n    //update your roomList with current roomName\r\n    const roomListRef = database.ref(`/chat/${AppString.ROOMS_LIST}/${currentUid}`)\r\n    roomListRef.update({\r\n        [roomId]: true\r\n    })\r\n    //update members in MembersNode\r\n    // const memberNodeRef = database.ref(`/chat/${AppString.MEMBERS_LIST}/${roomId}`)\r\n    // memberNodeRef.update({\r\n    //     [currentUid]: true,\r\n    //     [otherUserUid]: true\r\n    // })\r\n    //add message in MessagesNode - {  }\r\n    const messageNodeRef = database.ref(`/chat/${AppString.ROOM_MESSAGES}/${roomId}`).push()\r\n    messageNodeRef.set({\r\n        name: currentUserName,\r\n        id: currentUid,\r\n        createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n        message: message,\r\n        room: roomId,\r\n    })\r\n    //update chatRoom meta data under roomMetadataNode\r\n    let chatMetaData = {\r\n        message: message,\r\n        room: roomId,\r\n        createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n        name: currentUserName,\r\n        id: currentUid,\r\n        [currentUid]: currentUserName,\r\n        [otherUserUid]: otherUserName,\r\n        participants: [currentUid, otherUserUid]\r\n    }\r\n    const currentUserRoomMetadataNodeRef = database.ref(`/chat/${AppString.ROOM_METADATA}/${currentUid}/${roomId}`)\r\n    currentUserRoomMetadataNodeRef.update(chatMetaData)\r\n\r\n    const otherUserRoomMetadataNodeRef = database.ref(`/chat/${AppString.ROOM_METADATA}/${otherUserUid}/${roomId}`)\r\n    otherUserRoomMetadataNodeRef.update(chatMetaData)\r\n\r\n    //add notification to other usernode and remove current userNotification if any\r\n    const currentUserNotificationNode = database.ref(`/chat/${AppString.USER_NOTIFICATION}/${currentUid}/${otherUserUid}`)\r\n    currentUserNotificationNode.remove()\r\n\r\n    const otherUserNotificationNode = database.ref(`/chat/${AppString.USER_NOTIFICATION}/${otherUserUid}/${currentUid}`)\r\n    otherUserNotificationNode.update({\r\n        count: firebase.database.ServerValue.increment(1),\r\n        message: message,\r\n        roomId: roomId,\r\n        createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n        name: currentUserName,\r\n        id: currentUid\r\n    })\r\n}\r\n\r\nexport function attachNotificationListener(refVar, userId, callback) {\r\n    let userRef = database.ref(`/chat/${AppString.USER_NOTIFICATION}/${userId}`)\r\n    refVar = userRef\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\", message: \"No notification found\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}\r\n\r\nexport function removeNotification(userId, otherUserUid) {\r\n    let userRef = database.ref(`/chat/${AppString.USER_NOTIFICATION}/${userId}/${otherUserUid}`)\r\n    userRef.remove()\r\n}\r\n\r\nexport function attachTypingIndicator(roomId, otherUserId, refVar, callback) {\r\n    let userRef = database.ref(`/chat/${AppString.ROOM_TYPING_INDICATOR}/${roomId}/${otherUserId}`)\r\n    refVar = userRef\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"noStatus\", message: \"No Typing Status found\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}\r\n\r\nexport function singalTypingIndicator(roomId, userId, value) {\r\n    let userRef = database.ref(`/chat/${AppString.ROOM_TYPING_INDICATOR}/${roomId}/`)\r\n    userRef.update({\r\n        [userId]: value\r\n    })\r\n\r\n}\r\n\r\nexport function attachOnDisconnectForTyping(refVar, roomId, userId) {\r\n    let userRef = database.ref(`/chat/${AppString.ROOM_TYPING_INDICATOR}/${roomId}/`)\r\n    let disconnectRef = userRef.onDisconnect()\r\n    disconnectRef.update({\r\n        [userId]: false\r\n    });\r\n    refVar = disconnectRef\r\n}\r\n\r\nexport function getUserInteractedRoom(refVar, userId, callback) {\r\n    let userRef = database.ref(`/chat/${AppString.ROOM_METADATA}/${userId}`).orderByChild(`createdAt`);\r\n    refVar = userRef\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        // console.log(userId)\r\n        // console.log(snapshot.val())\r\n\r\n        // let result = {}\r\n        // let count = 1;\r\n        // snapshot.forEach((child) => {\r\n        //     console.log(child.key);\r\n        //     console.log(child.val());\r\n        //     result[`${count}-${child.key}`] = child.val()\r\n        //     count++;\r\n        // })\r\n\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"noStatus\", message: \"No Typing Status found\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}\r\n\r\nexport const userOnlinePresence = (user, roomId, listenerRef) => {\r\n    let isOnlineForDatabase = {\r\n        StateMode: 'online',\r\n    };\r\n    let userStatusDatabaseRef = database.ref(`/chat/${AppString.INCALL_UserPresence}/${roomId}/${user.uid}`);\r\n    let onDisconnectRef = userStatusDatabaseRef.onDisconnect()\r\n    listenerRef = onDisconnectRef;\r\n    onDisconnectRef.remove().then(() => {\r\n        userStatusDatabaseRef.set({\r\n            ...isOnlineForDatabase,\r\n            name: user.displayName ?? \"\",\r\n            id: user.uid,\r\n        });\r\n    });\r\n}\r\n\r\nexport const goOfflineInRoom = (user, roomId) => {\r\n    let userStatusDatabaseRef = database.ref(`/chat/${AppString.INCALL_UserPresence}/${roomId}/${user.uid}`);\r\n    userStatusDatabaseRef.remove()\r\n\r\n}\r\n\r\nexport const getOnlinPresentUserInRoom = (roomId, refVar, callback) => {\r\n    let userRef = database.ref(`/chat/${AppString.INCALL_UserPresence}/${roomId}`)\r\n    refVar = userRef\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\", message: \"No notification found\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}","import firebase, { database as realDB } from \".\";\r\nimport { AppString } from \"./constant\";\r\n\r\nconst generatePushID = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n\r\n    // Timestamp of last push, used to prevent local collisions if you push twice in one ms.\r\n    var lastPushTime = 0;\r\n\r\n    // We generate 72-bits of randomness which get turned into 12 characters and appended to the\r\n    // timestamp to prevent collisions with other clients.  We store the last characters we\r\n    // generated because in the event of a collision, we'll use those same characters except\r\n    // \"incremented\" by one.\r\n    var lastRandChars = [];\r\n\r\n    return function () {\r\n        var now = new Date().getTime();\r\n        var duplicateTime = (now === lastPushTime);\r\n        lastPushTime = now;\r\n\r\n        var timeStampChars = new Array(8);\r\n        for (var i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        if (now !== 0) throw new Error('We should have converted the entire timestamp.');\r\n\r\n        var id = timeStampChars.join('');\r\n\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        } else {\r\n            // If the timestamp hasn't changed since last push, use the same random number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        if (id.length != 20) throw new Error('Length should be 20.');\r\n\r\n        return id;\r\n    };\r\n})();\r\n\r\nexport const getMessageVideoChat = (roomId, page, limit = 20, offset = 0) => {\r\n    return new Promise(async (res, rej) => {\r\n        try {\r\n            let path = `chat/${AppString.ROOM_MESSAGES}/${roomId}/`\r\n            // console.log(path)\r\n            var msgRef = realDB.ref(path).orderByChild('createdAt',).limitToLast(page * limit + limit)\r\n            const snapshot = await msgRef.once('value')\r\n            if (!snapshot.exists()) {\r\n                let error = { code: 'NoMsg', message: 'no message ' }\r\n                throw (error)\r\n            }\r\n            let arr = []\r\n            snapshot.forEach(function (child) {\r\n                arr.push(child.val())\r\n            });\r\n            // console.log(arr, arr.length, page * limit, page * limit + limit);\r\n            // console.log(offset)\r\n            arr = arr.reverse();\r\n            arr = arr.slice((page * limit) + offset, (page * limit) + limit + offset);\r\n            arr = arr.reverse();\r\n            // arr = arr.slice(0, limit);\r\n            // console.log(arr)\r\n            res(arr)\r\n        } catch (error) {\r\n            rej(error)\r\n        }\r\n    })\r\n}\r\n\r\nexport const getMessageListenerVideoChat = (roomId, callback) => {\r\n    try {\r\n        let path = `chat/${AppString.ROOM_MESSAGES}/${roomId}/`\r\n        var msgRef = realDB.ref(path).orderByChild('createdAt').limitToLast(1)\r\n        msgRef.on('child_added', (data) => {\r\n            if (callback) {\r\n                callback(null, data.val())\r\n            }\r\n        });\r\n    } catch (error) {\r\n        if (callback) {\r\n            callback(error)\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendMessageVideoChat = (message) => {\r\n    return new Promise(async (res, rej) => {\r\n        try {\r\n            let uniquerId = generatePushID()\r\n            const newMessage = {\r\n                ...message,\r\n                createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n                msgKey: uniquerId,\r\n            }\r\n            var msgRef = realDB.ref(`chat/${AppString.ROOM_MESSAGES}/${message.room}/${uniquerId}`)\r\n            await msgRef.set(newMessage)\r\n\r\n            const currentRoomMetadataNodeRef = realDB.ref(`/chat/${AppString.ROOM_METADATA}/${message.room}`)\r\n            currentRoomMetadataNodeRef.update(newMessage)\r\n            res()\r\n        } catch (error) {\r\n            rej(error)\r\n        }\r\n    })\r\n}\r\n\r\nexport function attachPublicChatListener(refVar, roomId, callback) {\r\n    let userRef = realDB.ref(`/chat/${AppString.ROOM_METADATA}/${roomId}`)\r\n    refVar = userRef\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\", message: \"No Chat found\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}","export const AvatarStyle = [\"user-profile__image--red\", \"user-profile__image--green\", \" \"]\r\nexport const ChatTextStyle = [\"chat-user-title--red\", \"chat-user-title--green\", \" \"]\r\nexport const UserIconStyle = [\"user-icon2\", \"user-icon3\", \" \"]\r\nexport const LOREM_TEXT = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip.\"\r\n\r\nexport function getInitals(name) {\r\n    let result = \"\"\r\n    let nameArr = name.trim().split(\" \")\r\n    if (nameArr.length > 0) {\r\n        nameArr.forEach(element => {\r\n            result += element[0]\r\n        });\r\n    } else {\r\n        result = name[0]\r\n    }\r\n    return result.toUpperCase()\r\n}\r\n\r\nexport const sortObjectArray = (arr, key) => {\r\n    const sorter = (a, b) => {\r\n        return b[key] - a[key]\r\n    }\r\n    arr.sort(sorter);\r\n};","import React, { createContext, useState, useEffect } from 'react'\r\nimport { auth, login, updateName } from '../../Firebase';\r\nimport { UpdateUserTable, user_ActiveStatus } from '../../Firebase/chatManager';\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport default function UserContextProvider(props) {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('userAuth')));\r\n\r\n    useEffect(() => {\r\n        window.parent.loginUser = (email, password) => {\r\n            login(email, password)\r\n        }\r\n        auth.onAuthStateChanged(async (user) => {\r\n            if (user) {\r\n                console.log(user.email, user.displayName)\r\n                localStorage.setItem('userAuth', JSON.stringify(user))\r\n                await UpdateUserTable(user)\r\n                user_ActiveStatus(user)\r\n                setUser({ ...user, isChecked: true })\r\n                // updateName(user,\"testUser2\")\r\n            } else {\r\n                localStorage.removeItem('userAuth')\r\n                setUser(null)\r\n                // login(\"shubham@dj.com\", \"up14y7434\")\r\n                // login(\"testuser1@chat.com\",\"up14y7434\")\r\n                // login(\"testuser2@chat.com\",\"up14y7434\")\r\n            }\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user }}>\r\n            {props.children}\r\n        </UserContext.Provider>\r\n    )\r\n}\r\n","import { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { firestore } from \"../Firebase\";\r\nimport { UserContext } from \"./Auth/UserContextProvider\";\r\n\r\nexport const UIContext = createContext();\r\n\r\nexport const MenuStates = {\r\n    participants: 0,\r\n    publicChat: 1,\r\n    polls: 2,\r\n    notification: 3,\r\n};\r\n\r\nexport const UIContextProvider = (props) => {\r\n    const { user } = useContext(UserContext)\r\n    const [activeMenu, setActiveMenu] = useState(MenuStates.participants);\r\n    const [hidePoll, setHidePoll] = useState(true)\r\n    const [isPollAdmin, setPollAdmin] = useState(false)\r\n    const userColorClassRecord = useRef(localStorage.getItem(\"participantColor\") ? JSON.parse(localStorage.getItem(\"participantColor\")) : {})\r\n\r\n\r\n    useEffect(() => {\r\n        const urlQuery = new URLSearchParams(window.location.search);\r\n        let showPoll = urlQuery.get(\"showPoll\");\r\n        if (showPoll === \"true\") {\r\n            setHidePoll(false)\r\n        }\r\n\r\n        // let publicRoomURl = urlQuery.get(\"publicRoom\");\r\n        // if (publicRoomURl) {\r\n        //     setPublicRoom(publicRoomURl)\r\n        // }\r\n\r\n        let pollAdmin = urlQuery.get(\"pollAdmin\");\r\n        if (pollAdmin === \"true\") {\r\n            setPollAdmin(true)\r\n        } else {\r\n            // setPollAdmin(false)\r\n        }\r\n\r\n        // let videoCall = urlQuery.get(\"videoCall\");\r\n        // if (videoCall === \"true\") {\r\n        //     setHidePoll(false)\r\n        // } else {\r\n\r\n        // }\r\n\r\n    }, [])\r\n\r\n\r\n    const getParticipantColorNumber = (id) => {\r\n        // console.log(id)\r\n        let mainObject = userColorClassRecord.current\r\n        if (!mainObject.hasOwnProperty(id)) {\r\n            let val = Math.floor(Math.random() * 3)\r\n            mainObject[id] = val\r\n            localStorage.setItem(\"participantColor\", JSON.stringify(userColorClassRecord.current))\r\n        }\r\n        return mainObject[id]\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <UIContext.Provider value={{ activeMenu, setActiveMenu, hidePoll, isPollAdmin, getParticipantColorNumber }}>\r\n            {props.children}\r\n        </UIContext.Provider>\r\n    )\r\n}\r\n","import React, { createContext, useContext, useEffect, useRef, useState } from 'react'\r\nimport { attachNotificationListener, getAllParticipants, getOnlineUsers, getOnlinPresentUserInRoom, getRoomIdWithUser, getUserInteractedRoom, goOfflineInRoom, userOnlinePresence } from '../../Firebase/chatManager'\r\nimport { attachPublicChatListener } from '../../Firebase/publicChatManager'\r\nimport { sortObjectArray } from '../../Utility'\r\nimport { UserContext } from \"../Auth/UserContextProvider\"\r\nimport { UIContext } from '../UIContextProvider'\r\n\r\nexport const ChatContext = createContext()\r\n\r\nexport default function ChatContextProvider(props) {\r\n    const { user } = useContext(UserContext)\r\n    const [onlineUserslist, setOnlineUserslist] = useState({})\r\n    const [allParticipantList, setAllParticipantList] = useState({})\r\n    const [activeRoom, setActiveRoom] = useState(null)\r\n    const [unseenMessageMetaData, setUnseenMessageMetaData] = useState({})\r\n    const [userLastInteractedRoom, setUserLastInteractedRoom] = useState(null)\r\n    const [publicNotification, setPublicNotification] = useState({ status: false, data: null })\r\n\r\n    const [incallChatActive, setIncallChatActive] = useState({\r\n        status: false,\r\n        roomId: '',\r\n        roomName: ''\r\n    })\r\n    const [showInCallChat, setShowInCallChat] = useState(false)\r\n\r\n    const [publicRoomName, setPublicRoom] = useState(\"public-room-test\")\r\n    // const [publicRoomName, setPublicRoom] = useState(\"call-room-test\")//callchat\r\n\r\n    const notificationListenerRef = useRef(null)\r\n    const userInteractedRoomRef = useRef(null)\r\n    const PublicChatListenerRef = useRef(null)\r\n\r\n    const InCallPresenceListenerRef = useRef(null)\r\n    const InCallOnlineUserListenerRef = useRef(null)\r\n    const InCallRoomValueRef = useRef(null)\r\n    const [inCallRoomParticipantList, setInCallRoomParticipantList] = useState({})\r\n\r\n\r\n    const { activeMenu } = useContext(UIContext)\r\n    const activeMenuRef = useRef(0)\r\n\r\n    useEffect(() => {\r\n        activeMenuRef.current = activeMenu\r\n    }, [activeMenu])\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            window.parent.toggleIncallChat = (value, roomId = \"test-incallChat\", roomName = \"In Call Messages\") => {\r\n                setIncallChatActive({\r\n                    status: value,\r\n                    roomId: roomId,\r\n                    roomName: roomName,\r\n                })\r\n                if (value) {\r\n                    InCallRoomValueRef.current = roomId\r\n                    setShowInCallChat(true)\r\n                    //attach participant Listener\r\n                    getOnlinPresentUserInRoom(roomId, InCallOnlineUserListenerRef.current, (data, err) => {\r\n                        if (err) {\r\n                            console.error(\"Error in loading online users\")\r\n                            console.error(err)\r\n                            return\r\n                        }\r\n                        console.log(data)\r\n                        setInCallRoomParticipantList(data)\r\n                    })\r\n                    //add disconnect Listener\r\n                    userOnlinePresence(user, roomId, InCallPresenceListenerRef.current)\r\n                } else {\r\n                    setShowInCallChat(false)\r\n                    if (InCallOnlineUserListenerRef.current) {\r\n                        InCallOnlineUserListenerRef.current.off()\r\n                    }\r\n                    if (InCallPresenceListenerRef.current) {\r\n                        InCallPresenceListenerRef.current.cancel()\r\n                    }\r\n                    if (InCallRoomValueRef.current) {\r\n                        goOfflineInRoom(user, InCallRoomValueRef.current)\r\n                        InCallRoomValueRef.current = null\r\n                    }\r\n                    setInCallRoomParticipantList({})\r\n                }\r\n            }\r\n            let attachListenerPublic = (roomId) => {\r\n                attachPublicChatListener(PublicChatListenerRef, roomId, (data, err) => {\r\n                    if (err) {\r\n                        if (err.code === \"NotFound\") {\r\n                            console.error(\"\")\r\n                            console.error(err)\r\n                        }\r\n                        return\r\n                    }\r\n                    // console.log(data)\r\n                    // console.log(user)\r\n                    // console.log(activeMenuRef.current)\r\n                    if (activeMenuRef.current !== 1 && data.userId !== user.uid) {\r\n                        setPublicNotification({ status: true, data })\r\n                        if (window.parent.notification) {\r\n                            window.parent.notification({\r\n                                type: 'publicChat',\r\n                                senderId: data.userId,\r\n                                senderName: data.userName,\r\n                                message: data.message,\r\n                                room: data.room\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            const urlQuery = new URLSearchParams(window.location.search);\r\n            let publicRoomURl = urlQuery.get(\"publicRoom\");\r\n            if (publicRoomURl) {\r\n                setPublicRoom(publicRoomURl)\r\n                //attachListener\r\n                attachListenerPublic(publicRoomURl)\r\n            } else {\r\n                //attachListener\r\n                attachListenerPublic(publicRoomName)\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (InCallPresenceListenerRef.current) {\r\n                InCallPresenceListenerRef.current.cancel()\r\n            }\r\n        }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        if (user && user.isChecked) {\r\n            //read room name user have interacted\r\n            attachNotificationListener(notificationListenerRef.current, user.uid, (data, err) => {\r\n                if (err) {\r\n                    if (err.code === \"NotFound\") {\r\n                        setUnseenMessageMetaData({})\r\n                    } else {\r\n                        console.error(err)\r\n                    }\r\n                    return\r\n                }\r\n                // console.log(data)\r\n                setUnseenMessageMetaData(data)\r\n\r\n                if (window.parent.notification) {\r\n                    let result = []\r\n                    Object.keys(data).forEach(userId => {\r\n                        result.push({\r\n                            ...data[userId],\r\n                            userId: userId,\r\n                        })\r\n                    })\r\n\r\n                    if (result.length > 0) {\r\n                        sortObjectArray(result, \"createdAt\")\r\n                        let details = {\r\n                            type: 'privateChat',\r\n                            senderId: result[0].userId,\r\n                            senderName: result[0].name ?? \"Participant\",\r\n                            message: result[0].message,\r\n                            room: result[0].roomId,\r\n                            count: result[0].count,\r\n                        }\r\n                        // console.log(details)\r\n                        if (window.parent.notification) {\r\n                            window.parent.notification(details)\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            getUserInteractedRoom(userInteractedRoomRef.current, user.uid, (data, err) => {\r\n                if (err) {\r\n                    console.error(err)\r\n                    return\r\n                }\r\n                // console.log(data)\r\n                let result = []\r\n                Object.keys(data).forEach(roomid => {\r\n                    let roomDetails = data[roomid]\r\n                    // console.log(roomDetails)\r\n                    let otherParticipantId = roomDetails.participants.filter(id => id !== user.uid)[0]\r\n                    if (otherParticipantId) {\r\n                        let otherParticipantName = roomDetails[otherParticipantId]\r\n                        result.push({\r\n                            otherParticipant: {\r\n                                id: otherParticipantId,\r\n                                name: otherParticipantName,\r\n                            },\r\n                            createdAt: roomDetails.createdAt,\r\n                            message: roomDetails.message,\r\n                            senderName: roomDetails.name,\r\n                            senderId: roomDetails.id,\r\n                        })\r\n                    }\r\n                })\r\n                sortObjectArray(result, \"createdAt\")\r\n                // console.log(result)\r\n                if (result.length > 5) {\r\n                    let newResult = [result[0], result[1], result[2], result[3], result[4]]\r\n                    setUserLastInteractedRoom(newResult)\r\n                } else {\r\n                    setUserLastInteractedRoom(result)\r\n                }\r\n            })\r\n            //read online users list\r\n            getOnlineUsers((data, err) => {\r\n                if (err) {\r\n                    console.error(\"Error in loading online users\")\r\n                    console.error(err)\r\n                    return\r\n                }\r\n                setOnlineUserslist(data)\r\n            })\r\n\r\n            //AllParticipant\r\n            getAllParticipants((data, err) => {\r\n                if (err) {\r\n                    console.error(\"Error in loading online users\")\r\n                    console.error(err)\r\n                    return\r\n                }\r\n                setAllParticipantList(data)\r\n            })\r\n        }\r\n        return () => {\r\n            if (notificationListenerRef.current) {\r\n                notificationListenerRef.current.off()\r\n            }\r\n        }\r\n    }, [user])\r\n\r\n    const openChatWithUser = async (userData) => {\r\n        //open the room\r\n        let roomId = getRoomIdWithUser(user.uid, userData.id)\r\n        setActiveRoom({\r\n            roomId: roomId,\r\n            participant: userData\r\n        })\r\n    }\r\n\r\n    const closePreviousChatRoom = () => {\r\n        setActiveRoom(null)\r\n    }\r\n\r\n    // const removeNotification = (uid) => {\r\n    //     delete unseenMessageMetaData[uid]\r\n    //     setUnseenMessageMetaData(uid)\r\n    // }\r\n\r\n\r\n    return (\r\n        <ChatContext.Provider value={{ onlineUserslist, openChatWithUser, activeRoom, closePreviousChatRoom, unseenMessageMetaData, userLastInteractedRoom, allParticipantList, publicRoomName, publicNotification, setPublicNotification, incallChatActive, showInCallChat, setShowInCallChat, inCallRoomParticipantList }}>\r\n            {props.children}\r\n        </ChatContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport { MenuStates, UIContext } from '../../Context/UIContextProvider'\r\n\r\nexport default function Menu() {\r\n    const { activeMenu, setActiveMenu, hidePoll, isPollAdmin } = useContext(UIContext);\r\n    const { publicNotification, setPublicNotification } = useContext(ChatContext)\r\n    return (\r\n        <ul className=\"sidebar__tabs\">\r\n            <li onClick={() => setActiveMenu(MenuStates.participants)}>\r\n                <a\r\n                    className={activeMenu === MenuStates.participants ? \"active\" : \"\"}\r\n                    href=\"#\"\r\n                >\r\n                    <i className=\"icon-people\"></i> Participants\r\n                </a>\r\n            </li>\r\n            <li onClick={() => {\r\n                setPublicNotification({\r\n                    status: false,\r\n                    data: null\r\n                })\r\n                setActiveMenu(MenuStates.publicChat)\r\n            }}>\r\n                <a className={`${activeMenu === MenuStates.publicChat ? \"active\" : \"\"}`} href=\"#\"><i className={`${publicNotification.status ? \"menu-notification\" : \"\"} icon-chat`}></i> Public Chat</a>\r\n            </li>\r\n\r\n            {!hidePoll && (\r\n                <li onClick={() => setActiveMenu(MenuStates.polls)}>\r\n                    <a\r\n                        className={activeMenu === MenuStates.polls ? \"active\" : \"\"}\r\n                        href=\"#\"\r\n                    >\r\n                        <i className=\"icon-polls\"></i> Polls\r\n                    </a>\r\n                </li>\r\n            )}\r\n            {\r\n                !hidePoll && isPollAdmin &&\r\n                <li onClick={() => setActiveMenu(MenuStates.notification)}>\r\n                    <a className={activeMenu === MenuStates.notification ? \"active\" : \"\"} href=\"#\">\r\n                        <i className=\"icon-polls\"></i> Notification\r\n                    </a>\r\n                </li>\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n","import React, { useContext, useRef } from 'react'\r\nimport { UIContext } from '../../Context/UIContextProvider'\r\nimport { ChatTextStyle, getInitals, UserIconStyle } from '../../Utility'\r\n\r\nconst Message = ({ name, message, userId, time }) => {\r\n    const { getParticipantColorNumber } = useContext(UIContext)\r\n\r\n    // const initals = useRef(getInitals(name))\r\n    const avartStyleRandom = useRef(getParticipantColorNumber(userId))\r\n\r\n    return (\r\n        <div className=\"chat-section__text\">\r\n            {/* <div className=\"chat-section__text-header\">\r\n                <div className={`user-icon ${UserIconStyle[avartStyleRandom.current]} `}>{initals.current}</div>\r\n                <div>\r\n                    <h3>{name}</h3>\r\n                </div>\r\n            </div> */}\r\n            <div className=\"chat-section__text-body\">\r\n                <h3 className={`chat-user-title ${ChatTextStyle[avartStyleRandom.current]} `}>{name}</h3>\r\n                {/* <h4>Participant</h4> */}\r\n                <p>\r\n                    {message}\r\n                </p>\r\n                <p className=\"chat-time\">\r\n                    <small>\r\n                        {\r\n                            time &&\r\n                            new Date(time).toLocaleTimeString('en-US', { timeStyle: \"short\" })\r\n                        }\r\n                    </small>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ReceivedMsg = React.memo(({ name, message, userId, time }) => {\r\n    return (\r\n        <div className=\"chat-section__message chat-section__message--received\">\r\n            <Message name={name} message={message} userId={userId} time={time} />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const SentMsg = React.memo(({ name, message, userId, time }) => {\r\n    return (\r\n        <div className=\"chat-section__message chat-section__message--sent\">\r\n            <Message name={name} message={message} userId={userId} time={time} />\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/arrow.4ad046c7.svg\";","import React, { Component } from 'react'\r\nimport { UserContext } from '../../Context/Auth/UserContextProvider';\r\nimport { getMessageListenerVideoChat, getMessageVideoChat, sendMessageVideoChat } from '../../Firebase/publicChatManager';\r\nimport { ReceivedMsg, SentMsg } from \"../Messages\";\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\"\r\n\r\n\r\nclass PublicChat extends Component {\r\n    state = {\r\n        messages: [],\r\n        listenerCounter: 0,\r\n        scrollProgress: false,\r\n        allowScrolling: false,\r\n        pageSize: 500,\r\n        pageNumber: 0,\r\n        initialScrollDone: false,\r\n        shouldAutoScroll: true,\r\n        firstTime: true,\r\n        typedMessage: ''\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.messageDiv = React.createRef();\r\n    }\r\n    inputRef = React.createRef()\r\n    handleScroll = () => {\r\n        if (this.messageDiv.current.scrollHeight - this.messageDiv.current.scrollTop > (2 * this.messageDiv.current.clientHeight)) {\r\n            this.setState({ shouldAutoScroll: false })\r\n            // console.log(\"shouldAutoScroll false\")\r\n        } else {\r\n            this.setState({ shouldAutoScroll: true })\r\n            // console.log(\"shouldAutoScroll true\")\r\n        }\r\n\r\n        if (this.messageDiv.current && this.messageDiv.current.offsetTop > this.messageDiv.current.scrollTop) {\r\n            if (this.state.allowScrolling && this.state.scrollProgress == false) {\r\n                // console.log(\"scroll\")\r\n                this.setState({ scrollProgress: true })\r\n                this.loadMessages();\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.messageDiv.current.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.inputRef.current.focus()\r\n        this.loadMessages();\r\n        getMessageListenerVideoChat(this.props.room.roomId, (err, message) => {//first argument is for checking error and second one contain message\r\n            if (message != null) {\r\n                let messages = this.state.messages;\r\n                messages.push(message);\r\n                this.setState({ messages: messages });\r\n                this.setState({ listenerCounter: this.state.listenerCounter + 1 })\r\n                this.scroll();\r\n\r\n                if (this.props.showNotification) {\r\n                    if (message.userId != this.props.user.email) {\r\n                        this.props.showNotification(true);\r\n                    } else {\r\n                        this.props.showNotification(false);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            this.scroll();\r\n        })\r\n    }\r\n\r\n    loadMessages = () => {\r\n        getMessageVideoChat(this.props.room.roomId, this.state.pageNumber, this.state.pageSize, this.state.listenerCounter).then(messages => {\r\n            const previousMessages = this.state.messages;\r\n\r\n            // if (previousMessages.length >= 0 && messages.length >= 0 && previousMessages[previousMessages.length - 1].id == messages[0].id) {\r\n            //     messages.shift();\r\n            // }\r\n            if (previousMessages.length >= 0 && messages.length >= 0 && messages[messages.length - 1].id == previousMessages[0].id) {\r\n                messages.pop();\r\n            }\r\n\r\n            const newMessages = [...messages, ...previousMessages]\r\n\r\n            // console.log(newMessages)\r\n\r\n\r\n            this.setState({ messages: newMessages });\r\n            // console.log(this.state.pageNumber)\r\n\r\n            if (messages.length >= this.state.pageSize) {\r\n                // console.log(\"messages.length \" + messages.length)\r\n                this.setState({ pageNumber: this.state.pageNumber + 1 })\r\n                this.setState({ allowScrolling: true })\r\n            }\r\n            else {\r\n                this.setState({ allowScrolling: false })\r\n                this.setState({ pageNumber: this.state.pageNumber - 1 })\r\n            }\r\n\r\n            this.setState({ scrollProgress: false });\r\n            this.scroll();\r\n        }).catch((err) => { this.setState({ scrollProgress: false }); console.log(err); })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        if (nextProps.activeSideMenu) {\r\n            this.scroll();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.initialScrollDone) {\r\n            this.scroll();\r\n            this.setState({ initialScrollDone: true });\r\n        }\r\n    }\r\n\r\n\r\n    uuid4 = () => {\r\n        let array = new Uint8Array(16)\r\n        crypto.getRandomValues(array)\r\n\r\n        // manipulate 9th byte\r\n        array[8] &= 0b00111111 // clear first two bits\r\n        array[8] |= 0b10000000 // set first two bits to 10\r\n\r\n        // manipulate 7th byte\r\n        array[6] &= 0b00001111 // clear first four bits\r\n        array[6] |= 0b01000000 // set first four bits to 0100\r\n\r\n        const pattern = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\r\n        let idx = 0\r\n\r\n        return pattern.replace(\r\n            /XX/g,\r\n            () => array[idx++].toString(16).padStart(2, \"0\"), // padStart ensures leading zero, if needed\r\n        )\r\n    }\r\n\r\n\r\n    scroll = () => {\r\n        // console.log(\"scroll\")\r\n        setTimeout(() => {\r\n            if ((this.messageDiv && this.messageDiv.current) && this.state.shouldAutoScroll) {\r\n                const scrollHeight = this.messageDiv.current.scrollHeight;\r\n                const height = this.messageDiv.current.clientHeight;\r\n                const maxScrollTop = scrollHeight - height;\r\n                this.messageDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n                // if(this.props.showNotification)\r\n                // {\r\n                //     this.props.showNotification(false);\r\n                // }\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    onSendMessageClick = (event) => {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        let messageData = {\r\n            id: this.uuid4(),\r\n            'room': this.props.room.roomId,\r\n            'userId': this.context.user.uid,\r\n            'userName': this.context.user.displayName,\r\n            'message': this.state.typedMessage\r\n        };\r\n\r\n        sendMessageVideoChat(messageData).then(value => {\r\n            this.scroll();\r\n            this.setState({\r\n                typedMessage: ''\r\n            })\r\n        }).catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sidebar__body\">\r\n                <div className=\"chat-section\">\r\n\r\n                    {\r\n                        this.props.showHeader ? this.props.children : null\r\n                        // <div className=\"chat-header\" onClick={this.props.onbackClick}>\r\n                        //     <img src={arrowSvg} alt=\"arrowSvg\" />\r\n                        //     <div className=\"user-profile\">\r\n                        //         <span className=\"user-profile__title\">\r\n                        //             {this.props.roomName}\r\n                        //         </span>\r\n                        //     </div>\r\n                        // </div>\r\n                    }\r\n\r\n\r\n                    <div ref={this.messageDiv} className=\"chat-section__body\">\r\n                        {\r\n                            this.state.messages.map(value => {\r\n                                if (value.userId === this.context.user.uid) {\r\n                                    return <SentMsg userId={value.userId} time={value.createdAt} name={value.userName} message={value.message} />\r\n                                } else {\r\n                                    return <ReceivedMsg userId={value.userId} time={value.createdAt} name={value.userName} message={value.message} />\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"chat-section__footer\">\r\n                        <div className=\"chat-section__form\">\r\n                            <form onSubmit={this.onSendMessageClick}>\r\n                                <input\r\n                                    type=\"text\" className=\"chat-section__input\" placeholder=\"Write here\"\r\n                                    value={this.state.typedMessage}\r\n                                    onChange={e => this.setState({\r\n                                        typedMessage: e.target.value\r\n                                    })}\r\n                                    ref={this.inputRef}\r\n                                ></input>\r\n                                <button type=\"submit\" className=\"chat-section__btn \"\r\n                                    disabled={this.state.typedMessage.length === 0}\r\n                                ><i className=\"icon-send\"></i></button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPublicChat.contextType = UserContext\r\nexport default PublicChat","import React, { useContext, useMemo, useRef } from 'react'\r\nimport { UIContext } from '../../Context/UIContextProvider'\r\nimport PublicChat from '../PublicChat/PublicChat'\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\"\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport { AvatarStyle, getInitals } from '../../Utility'\r\nimport Tooltip from 'rc-tooltip';\r\nimport 'rc-tooltip/assets/bootstrap_white.css'\r\n\r\nconst InCallChatHeader = (props) => {\r\n    const { incallChatActive, setShowInCallChat, inCallRoomParticipantList } = useContext(ChatContext)\r\n\r\n    let count = useMemo(() => Object.keys(inCallRoomParticipantList).length, [inCallRoomParticipantList])\r\n    const { getParticipantColorNumber } = useContext(UIContext)\r\n    \r\n    return (\r\n        <div className=\"chat-header\" onClick={props.onbackClick}>\r\n            <img src={arrowSvg} alt=\"arrowSvg\" />\r\n            <div className=\"user-profile\">\r\n                <span className=\"user-profile__title\">\r\n                    {props.roomName}\r\n                    <small>\r\n                        {\r\n                            count > 0 && `${count} active`\r\n                        }\r\n                    </small>\r\n                </span>\r\n            </div>\r\n            <div className=\"headerMemberList-container\">\r\n                {\r\n                    Object.values(inCallRoomParticipantList).map(user => (\r\n                        <Tooltip id=\"listMemberTooltip\" placement=\"bottom\" trigger={['hover']} overlay={<span >{user.name.toLowerCase()}</span>}>\r\n                            <span className={`user-profile__image ${AvatarStyle[getParticipantColorNumber(user.id)]} headerMemberList`} >{getInitals(user.name)}</span>\r\n                        </Tooltip>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function IncallChat() {\r\n\r\n    const { incallChatActive, setShowInCallChat, inCallRoomParticipantList } = useContext(ChatContext)\r\n\r\n    const onbackClick = (e) => {\r\n        if (e) {\r\n            e.preventDefault()\r\n        }\r\n        setShowInCallChat(false)\r\n    }\r\n\r\n    return (\r\n        <PublicChat room={{ roomId: incallChatActive.roomId }} showHeader={true}  >\r\n            <InCallChatHeader roomName={incallChatActive.roomName} onbackClick={onbackClick} />\r\n        </PublicChat>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <div className=\"sidebar__body loaderContainer\">\r\n            <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useRef } from 'react'\r\nimport { UserContext } from '../../Context/Auth/UserContextProvider'\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport { UIContext } from '../../Context/UIContextProvider'\r\nimport { AvatarStyle, getInitals } from '../../Utility'\r\nimport IncallChat from '../IncallChat/IncallChat'\r\nimport './index.css'\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\"\r\nimport Loader from '../Loader/Loader'\r\n\r\n\r\nconst defaultUserRole = \"Participant\"\r\n\r\nconst UserTile = ({ user, role, notification }) => {\r\n    const { openChatWithUser, onlineUserslist } = useContext(ChatContext)\r\n    const { getParticipantColorNumber } = useContext(UIContext)\r\n\r\n    const initals = useRef(getInitals(user.name))\r\n    const avartStyleRandom = useRef(getParticipantColorNumber(user.id))\r\n\r\n    const getDotStyle = () => {\r\n        if (notification) {\r\n            return 'user-notification'\r\n        } else if (onlineUserslist.hasOwnProperty(user.id)) {\r\n            return 'user-notification user-online-dot'\r\n        } else {\r\n            return 'user-notification user-offline-dot'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-profile\" onClick={() => openChatWithUser(user)}>\r\n            <span className={`user-profile__image  ${getDotStyle()} ${AvatarStyle[avartStyleRandom.current]}`}>{initals.current}</span>\r\n            <span className=\"user-profile__title\">\r\n                <b> {user.name.toLowerCase()}</b>\r\n                <small>{role ?? defaultUserRole}</small>\r\n            </span>\r\n            {\r\n                notification &&\r\n                <span className={`notification_count ${AvatarStyle[avartStyleRandom.current]}`}>\r\n                    {notification.count}\r\n                </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UsersSection = ({ heading, role, userList }) => {\r\n    const { user } = useContext(UserContext)\r\n    const { unseenMessageMetaData } = useContext(ChatContext)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                heading &&\r\n                <h2 className=\"sidebar__title\">{heading}</h2>\r\n            }\r\n            <ul className=\"sidebar__menu\">\r\n                {\r\n                    Object.keys(userList).map(userId => {\r\n                        if (userList[userId].id !== user.uid && userList[userId].name) {\r\n                            return (<li key={userList[userId].id + \"--li\"}>\r\n                                <UserTile key={userList[userId].id} user={userList[userId]} role={role} notification={unseenMessageMetaData[userId]} />\r\n                            </li>)\r\n                        } else {\r\n                            return null\r\n                        }\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction getTrimedMessage(sendId, senderName, currentUserId, message, limit = 40) {\r\n    if (!message) {\r\n        return ''\r\n    }\r\n    let result = \"\"\r\n    if (sendId === currentUserId) {\r\n        result = \"me: \"\r\n    } else {\r\n        result = senderName.toLowerCase() + \": \"\r\n    }\r\n    if (message.length > limit) {\r\n        result += message.substr(0, limit) + \"...\"\r\n    } else {\r\n        result += message\r\n    }\r\n    return result\r\n\r\n}\r\n\r\nconst RecentMessageSection = ({ heading, role, recentList }) => {\r\n    const { user } = useContext(UserContext)\r\n    const { unseenMessageMetaData } = useContext(ChatContext)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                heading &&\r\n                <h2 className=\"sidebar__title\">{heading}</h2>\r\n            }\r\n            <ul className=\"sidebar__menu\">\r\n                {\r\n                    recentList.map(recentMsg => (\r\n                        <>\r\n                            {\r\n                                recentMsg.otherParticipant.id && recentMsg.otherParticipant.name &&\r\n                                <li key={recentMsg.otherParticipant.id + \"recent--li\"}>\r\n                                    <UserTile key={recentMsg.otherParticipant.id + \"recent\"} user={recentMsg.otherParticipant}\r\n                                        role={getTrimedMessage(recentMsg.senderId, recentMsg.senderName, user.uid, recentMsg.message)}\r\n                                        notification={unseenMessageMetaData[recentMsg.otherParticipant.id]}\r\n                                    />\r\n                                </li>\r\n                            }\r\n                        </>\r\n                    )\r\n                    )\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default function Participants() {\r\n    const { onlineUserslist, userLastInteractedRoom, allParticipantList, incallChatActive, showInCallChat, setShowInCallChat } = useContext(ChatContext)\r\n    return (\r\n        <>\r\n            {\r\n                showInCallChat && incallChatActive.status && incallChatActive.roomId &&\r\n                <IncallChat />\r\n            }\r\n            {\r\n                !showInCallChat &&\r\n                <div className=\"sidebar__body\">\r\n                    {\r\n                        incallChatActive.status && incallChatActive.roomId &&\r\n                        <div className=\"chat-header\" onClick={() => setShowInCallChat(true)}>\r\n                            <div className=\"user-profile\">\r\n                                <span className=\"user-profile__title\">\r\n                                    In Call Messages\r\n                                </span>\r\n                            </div>\r\n                            <img className=\"enterArrow\" src={arrowSvg} alt=\"arrowSvg\" />\r\n                        </div>\r\n                    }\r\n                    {\r\n                        userLastInteractedRoom &&\r\n                        <RecentMessageSection heading=\"Recent\" role=\"Participant\" recentList={userLastInteractedRoom} />\r\n                    }\r\n                    {\r\n                        Object.keys(onlineUserslist).length > 1 ?\r\n                            <UsersSection heading={onlineUserslist ? \"Online\" : ''} role=\"Participant\" userList={onlineUserslist} />\r\n                            // <UsersSection heading={onlineUserslist ? \"In Call\" : ''} role=\"Participant\" userList={onlineUserslist} />\r\n                            :\r\n                            null\r\n                        // <Loader />\r\n                    }\r\n                    {\r\n                        Object.keys(allParticipantList).length > 0 &&\r\n                        <UsersSection heading={allParticipantList ? \"All Participants\" : ''} role=\"Participant\" userList={allParticipantList} />\r\n                    }\r\n                </div>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n","import { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport { AvatarStyle, getInitals, LOREM_TEXT } from '../../Utility'\r\nimport { ReceivedMsg, SentMsg } from '../Messages'\r\nimport '../../Assets/css/chatRoom.css'\r\nimport { attachNewMessagesListener, attachOnDisconnectForTyping, attachTypingIndicator, removeNotification, sendMessage1on1, singalTypingIndicator } from '../../Firebase/chatManager'\r\nimport { UserContext } from '../../Context/Auth/UserContextProvider'\r\nimport { database } from '../../Firebase'\r\nimport { AppString } from '../../Firebase/constant'\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\"\r\nimport { UIContext } from '../../Context/UIContextProvider'\r\n\r\nexport default function PrivateChatRoom() {\r\n    const { user } = useContext(UserContext)\r\n    const { activeRoom, closePreviousChatRoom } = useContext(ChatContext)\r\n    const { getParticipantColorNumber } = useContext(UIContext)\r\n\r\n    const [typedMessage, setTypedMessage] = useState(\"\")\r\n    const [typingIndicator, setTypingIndicator] = useState(false)\r\n\r\n    const [activeRoomMessage, setActiveRoomMessage] = useState(null)\r\n    const chatBodyRef = useRef(null)\r\n    const manualScrollUp = useRef(false)\r\n    const initals = useRef(getInitals(activeRoom.participant.name))\r\n    const avartStyleRandom = useRef(getParticipantColorNumber(activeRoom.participant.id))\r\n\r\n\r\n    let currentChatListenerRef = useRef(null)\r\n    let typingListenerRef = useRef(null)\r\n    let typingDisconnectRef = useRef(null)\r\n\r\n    let inputRef = useRef(null)\r\n\r\n\r\n    const attachListener = () => {\r\n\r\n        let userRef = database.ref(`/chat/${AppString.ROOM_MESSAGES}/${activeRoom.roomId}`)\r\n        currentChatListenerRef.current = userRef\r\n        userRef.on(\"value\", async (snapshot) => {\r\n            if (snapshot.exists()) {\r\n                let data = snapshot.val()\r\n                setActiveRoomMessage(data)\r\n                removeNotification(user.uid, activeRoom.participant.id)\r\n            }\r\n        }, err => {\r\n            console.error(err)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n        attachListener();\r\n        attachTypingIndicator(activeRoom.roomId, activeRoom.participant.id, typingListenerRef.current, (data, err) => {\r\n            if (err) {\r\n                console.error(err)\r\n                if (err.code === \"noStatus\") {\r\n                    setTypingIndicator(false)\r\n                } else {\r\n                    console.error(err)\r\n                }\r\n                return\r\n            }\r\n            setTypingIndicator(data)\r\n        })\r\n\r\n        attachOnDisconnectForTyping(typingDisconnectRef.current, activeRoom.roomId, user.uid)\r\n\r\n        inputRef.current.addEventListener(\"focusin\", () => {\r\n            singalTypingIndicator(activeRoom.roomId, user.uid, true)\r\n        });\r\n\r\n        inputRef.current.addEventListener(\"focusout\", () => {\r\n            singalTypingIndicator(activeRoom.roomId, user.uid, false)\r\n        });\r\n\r\n        let maxHeight = chatBodyRef.current.getBoundingClientRect().height\r\n        chatBodyRef.current.addEventListener(\"scroll\", (event) => {\r\n            if (chatBodyRef.current.scrollTop < (maxHeight - (maxHeight * 0.4))) {\r\n                manualScrollUp.current = true\r\n            } else {\r\n                manualScrollUp.current = false\r\n            }\r\n        })\r\n        return () => {\r\n            if (currentChatListenerRef.current)\r\n                currentChatListenerRef.current.off()\r\n            if (typingListenerRef.current)\r\n                typingListenerRef.current.off()\r\n            if (typingDisconnectRef.current)\r\n                typingDisconnectRef.current.cancel();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (chatBodyRef.current && !manualScrollUp.current) {\r\n            chatBodyRef.current.scrollTo(0, chatBodyRef.current.scrollHeight)\r\n        }\r\n    }, [activeRoomMessage])\r\n\r\n    const handleBtnClick = (event) => {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        let userName = user.displayName ? user.displayName : user.email.split(\"@\")[0]\r\n        sendMessage1on1(userName, user.uid, activeRoom.participant.id, activeRoom.participant.name, activeRoom.roomId, typedMessage)\r\n        chatBodyRef.current.scrollTo(0, chatBodyRef.current.scrollHeight)\r\n        setTypedMessage(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar__body\">\r\n            <div className=\"chat-section\">\r\n                <div className=\"chat-header\" onClick={closePreviousChatRoom}>\r\n                    <img src={arrowSvg} alt=\"arrowSvg\" />\r\n                    <div className=\"user-profile\">\r\n                        <span className={`user-profile__image ${AvatarStyle[avartStyleRandom.current]}`}>{initals.current}</span>\r\n                        <span className=\"user-profile__title\">\r\n                            {activeRoom.participant.name.toLowerCase()}\r\n                            <small>\r\n                                {\r\n                                    typingIndicator ? \"typing...\" : \"Participant\"\r\n                                }\r\n                            </small>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chat-section__body\" ref={chatBodyRef}>\r\n                    {\r\n                        activeRoomMessage && Object.values(activeRoomMessage).map(messageDetails => {\r\n                            if (messageDetails.id !== user.uid) {\r\n                                return (<ReceivedMsg userId={messageDetails.id} time={messageDetails.createdAt} key={messageDetails.createdAt + \"+\" + messageDetails.id} name={messageDetails.name} message={messageDetails.message} />)\r\n                            } else {\r\n                                return (<SentMsg userId={messageDetails.id} time={messageDetails.createdAt} key={messageDetails.createdAt + \"+\" + messageDetails.id} name={messageDetails.name} message={messageDetails.message} />)\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n                {\r\n                    activeRoom &&\r\n                    <div className=\"chat-section__footer\">\r\n                        <div className=\"chat-section__form\">\r\n                            <form onSubmit={handleBtnClick}>\r\n                                <input\r\n                                    type=\"text\" className=\"chat-section__input\" placeholder=\"Write here\"\r\n                                    value={typedMessage} onChange={e => setTypedMessage(e.target.value)}\r\n                                    ref={inputRef}\r\n                                ></input>\r\n                                <button type=\"submit\" className=\"chat-section__btn \"\r\n                                    disabled={typedMessage.length === 0}\r\n                                ><i className=\"icon-send\"></i></button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport Participants from '../Participants/Participants'\r\nimport PrivateChatRoom from '../PrivateChatRoom/PrivateChatRoom'\r\n\r\nexport default function PrivateChat() {\r\n    const { activeRoom } = useContext(ChatContext)\r\n    return (\r\n        <>\r\n            {\r\n                activeRoom ? \r\n                <PrivateChatRoom />\r\n                :\r\n                <Participants />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","export const POLL_STATES = {\r\n  hide: \"hide\",\r\n  showQuestion: \"showQuestion\",\r\n  showResult: \"showResult\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { POLL_STATES } from \"../../Constants/PollStates\";\r\n\r\nexport function PollResult(props) {\r\n  const { index: currentIndex } = props;\r\n  const { question, options, index, totalResponse } = props.data;\r\n  options.sort(function (a, b) {\r\n    return a.id - b.id;\r\n  });\r\n\r\n  return (\r\n    <div className=\"pollBox__question\">\r\n      <h3 className=\"pollBox__title\">{`Q${currentIndex + 1}. ${question}`}</h3>\r\n      <ul className=\"pollBox__options\">\r\n        {options.map((option) => (\r\n          <li>\r\n            <div className=\"custom-slider\">\r\n              <span className=\"custom-slider__text\">{option.value}</span>\r\n              <div className=\"custom-slider__bar\">\r\n                <span className=\"custom-slider__mark\">{`${\r\n                  totalResponse > 0\r\n                    ? (option.response / totalResponse) * 100\r\n                    : 0\r\n                }%`}</span>\r\n                <div\r\n                  className=\"custom-slider__bar-inner\"\r\n                  style={{\r\n                    width: `${\r\n                      totalResponse > 0\r\n                        ? (option.response / totalResponse) * 100\r\n                        : 0\r\n                    }%`,\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PollQuestion(props) {\r\n  const { handleSubmit, checkIfAlreadyAnswered, index: currentIndex } = props;\r\n  const { question, options, feedbacks, index, id, eventId } = props.data;\r\n  options?.sort(function (a, b) {\r\n    return a.id - b.id;\r\n  });\r\n\r\n  const [answer, setAnswer] = useState(checkIfAlreadyAnswered);\r\n  const [showError, setShowError] = useState(false);\r\n  const [feedbackSuccess, setFeedbackSuccess] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (checkIfAlreadyAnswered) {\r\n      setAnswer(checkIfAlreadyAnswered);\r\n    }\r\n  }, [checkIfAlreadyAnswered]);\r\n\r\n  const handleSubmitButton = (e) => {\r\n    e.preventDefault();\r\n    if (!answer) {\r\n      setShowError(true);\r\n      return;\r\n    }\r\n    setShowError(false);\r\n    handleSubmit(id, answer, \"multiple\");\r\n  };\r\n\r\n  const handleFeedbackSubmitButton = (e) => {\r\n    e.preventDefault();\r\n    if (!feedback) {\r\n      setShowError(true);\r\n      return;\r\n    }\r\n    setShowError(false);\r\n    handleSubmit(id, feedback, \"feedback\");\r\n    setFeedbackSuccess(true);\r\n    setFeedback(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"pollBox__question\">\r\n      {options && (\r\n        <form onSubmit={handleSubmitButton}>\r\n          <h3 className=\"pollBox__title\">{`Q${\r\n            currentIndex + 1\r\n          }. ${question}`}</h3>\r\n          <ul className=\"pollBox__options\">\r\n            {options.map((option, index) => (\r\n              <li key={`option-${option.id}`}>\r\n                <label\r\n                  key={`checkbox-${option.id}`}\r\n                  className=\"custom-checkbox\"\r\n                >\r\n                  {`0${index + 1}.  ${option.value}`}\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={option.id}\r\n                    checked={!answer ? false : option.id === answer.id}\r\n                    onChange={(e) => {\r\n                      setShowError(false);\r\n                      setAnswer(option);\r\n                    }}\r\n                    disabled={checkIfAlreadyAnswered === null ? false : true}\r\n                  />\r\n                  <span className=\"custom-checkbox__icon icon-unchecked2\"></span>\r\n                </label>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {showError && (\r\n            <>\r\n              <div style={{ color: \"red\", marginBottom: \"0rem\" }}>\r\n                * Please give some response first, to submit.\r\n              </div>\r\n              <br></br>\r\n            </>\r\n          )}\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-secondary\"\r\n              disabled={checkIfAlreadyAnswered === null ? false : true}\r\n            >{`${\r\n              checkIfAlreadyAnswered === null ? \"Submit\" : \"Answered\"\r\n            }`}</button>\r\n          </div>\r\n        </form>\r\n      )}\r\n\r\n      {feedbacks && (\r\n        <form onSubmit={handleFeedbackSubmitButton}>\r\n          {!feedbackSuccess ? (\r\n            <div>\r\n              <h3 className=\"pollBox__title\">{`Q${\r\n                currentIndex + 1\r\n              }. ${question}`}</h3>\r\n              <ul className=\"pollBox__options\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Write text here...\"\r\n                  value={feedback}\r\n                  onChange={(e) => {\r\n                    setShowError(false);\r\n                    setFeedback(e.target.value);\r\n                  }}\r\n                />\r\n              </ul>\r\n              {showError && (\r\n                <>\r\n                  <div style={{ color: \"red\", marginBottom: \"0rem\" }}>\r\n                    * Please give some response first, to submit.\r\n                  </div>\r\n                  <br></br>\r\n                </>\r\n              )}\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <button type=\"submit\" className=\"btn btn-secondary\">\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div style={{ textAlign: \"center\", position: \"relative\" }}>\r\n              <div className=\"success-positioning d-flex\">\r\n                <div className=\"success-icon\">\r\n                  <div className=\"success-icon__tip\"></div>\r\n                  <div className=\"success-icon__long\"></div>\r\n                </div>\r\n              </div>\r\n              <h4>Feedback Submit Successfully</h4>\r\n              <div\r\n                onClick={() => {\r\n                  setFeedbackSuccess(!feedbackSuccess);\r\n                }}\r\n                className=\"feedback-modal-cls-btn\"\r\n              >\r\n                <img\r\n                  src={process.env.PUBLIC_URL + \"assets/images/icons/close.svg\"}\r\n                  alt=\"\"\r\n                  height=\"25px\"\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PollUser(props) {\r\n  const { visiblePollData, submitResponse, pollAnswerredData } = props;\r\n  return (\r\n    <div className=\"sidebar__body\">\r\n      <div className=\"\">\r\n        {/* <div className=\"pollBox__header\">\r\n          <div className=\"d-flex justify-content-between align-items-center pd-b10\">\r\n            <h2 className=\"pollBox__title\">Ask a question</h2>\r\n            <button className=\"btn btn-grey pollBox__close\">Close</button>\r\n          </div>\r\n          <div className=\"pollBox__send mg-b20\">\r\n            <img src=\"assets/images/user.png\" alt=\"\" />\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Ask a question\"\r\n              />\r\n              <button className=\"btn\">\r\n                <i className=\"icon-send\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <h2 className=\"pollBox__title mg-b10\">Polls</h2>\r\n        </div> */}\r\n        <div className=\"pollBox__body\">\r\n          {visiblePollData && visiblePollData.length === 0 && (\r\n            <div\r\n              className=\"noVisiblePoll\"\r\n              style={{\r\n                textAlign: \"center\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n            >\r\n              {/* <h2>Answer polls and quizes</h2> */}\r\n              <p>\r\n                As soon as a poll is posted <br></br>you will be able to express\r\n                your opinion.\r\n              </p>\r\n            </div>\r\n          )}\r\n          {visiblePollData &&\r\n            visiblePollData.map((pollItem, index) => (\r\n              <div\r\n                className=\"pollBox\"\r\n                key={pollItem.id}\r\n                style={{ overflow: \"hidden\" }}\r\n              >\r\n                {pollItem.state === POLL_STATES.showQuestion && (\r\n                  <PollQuestion\r\n                    data={pollItem}\r\n                    handleSubmit={submitResponse}\r\n                    checkIfAlreadyAnswered={pollAnswerredData[pollItem.id]}\r\n                    index={index}\r\n                  />\r\n                )}\r\n                {pollItem.state === POLL_STATES.showResult && (\r\n                  <PollResult data={pollItem} index={index} />\r\n                )}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const POLL_COLLECTION = \"poll\";\r\nexport const POLLRESPONSE_COLLECTION = \"pollResponse\";\r\nexport const BACKSTAGE_COLLECTION = \"backStage\";\r\n","import {\r\n  POLLRESPONSE_COLLECTION,\r\n  POLL_COLLECTION,\r\n} from \"../Constants/CollectionConstants\";\r\nimport { POLL_STATES } from \"../Constants/PollStates\";\r\nimport firebase, { firestore } from \"../Firebase/index\";\r\n\r\nvar uniqid = require(\"uniqid\");\r\nlet pollListenerRef = null;\r\nexport const PollManager = {\r\n  addPollQuestion: (type, form, eventId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        // let id = uniqid(\"poll-\");\r\n        let docRef = firestore.collection(POLL_COLLECTION).doc();\r\n        let options = [];\r\n        form.option1 &&\r\n          options.push({\r\n            id: 0,\r\n            value: form.option1,\r\n            response: 0,\r\n          });\r\n        form.option2 &&\r\n          options.push({\r\n            id: 1,\r\n            value: form.option2,\r\n            response: 0,\r\n          });\r\n        form.option3 &&\r\n          options.push({\r\n            id: 2,\r\n            value: form.option3,\r\n            response: 0,\r\n          });\r\n        form.option4 &&\r\n          options.push({\r\n            id: 3,\r\n            value: form.option4,\r\n            response: 0,\r\n          });\r\n\r\n        if (type === \"feedback\") {\r\n          await docRef.set({\r\n            feedbacks: [],\r\n            question: form.question,\r\n            //   index: index,\r\n            eventId: eventId,\r\n            state: POLL_STATES.hide,\r\n            totalResponse: 0,\r\n            timestamp: firebase.firestore.Timestamp.now(),\r\n            //   id,\r\n          });\r\n        }\r\n\r\n        if (type === \"multiple\") {\r\n          await docRef.set({\r\n            options: options,\r\n            question: form.question,\r\n            //   index: index,\r\n            eventId: eventId,\r\n            state: POLL_STATES.hide,\r\n            totalResponse: 0,\r\n            timestamp: firebase.firestore.Timestamp.now(),\r\n            //   id,\r\n          });\r\n        }\r\n\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n\r\n  removePollQuestion: (id) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore.collection(POLL_COLLECTION);\r\n        await ref.doc(id).delete();\r\n        res(\"success\");\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  publishPollQuestion: (id, data) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore.collection(POLL_COLLECTION);\r\n        await ref.doc(id).update(data);\r\n        res(\"success\");\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n\r\n  getPollResponse: (pollId, userId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore\r\n          .collection(POLLRESPONSE_COLLECTION)\r\n          .doc(`${userId}+${pollId}`);\r\n        const doc = await ref.get();\r\n        if (doc.exists) {\r\n          res(doc.data().option);\r\n        } else {\r\n          res(null);\r\n        }\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  attachPollListener: (eventId, callback = () => console.log(\"noFunFound\")) => {\r\n    const ref = firestore\r\n      .collection(POLL_COLLECTION)\r\n      .where(\"eventId\", \"==\", eventId);\r\n    pollListenerRef = ref.onSnapshot(\r\n      (query) => {\r\n        if (query.empty) {\r\n          callback([]);\r\n        }\r\n        let _data = query.docs.map((doc) => {\r\n          let record = { id: doc.id, ...doc.data() };\r\n          return record;\r\n        });\r\n        callback(_data);\r\n      },\r\n      (err) => {\r\n        callback(null, err);\r\n      }\r\n    );\r\n  },\r\n  removePollListener: () => {\r\n    if (pollListenerRef) {\r\n      pollListenerRef();\r\n    }\r\n  },\r\n  addResponse: (eventId, pollId, userId, userName, option, type) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const pollRef = firestore.collection(POLL_COLLECTION).doc(pollId);\r\n        const responseRef = firestore\r\n          .collection(POLLRESPONSE_COLLECTION)\r\n          .doc(`${userId}+${pollId}`);\r\n        let id = uniqid(\"response-\");\r\n        await firestore.runTransaction(async (transcation) => {\r\n          let doc = await transcation.get(pollRef);\r\n          let responseDoc = await transcation.get(responseRef);\r\n          if (responseDoc.exists) {\r\n            let err = {\r\n              code: \"AlreadyResponded\",\r\n              message: \"Already responded to the current poll.\",\r\n            };\r\n            throw err;\r\n          }\r\n          if (!doc.exists) {\r\n            let err = {\r\n              code: \"NotValidId\",\r\n              message: \"No Poll Found\",\r\n            };\r\n            throw err;\r\n          }\r\n          if (type === \"feedback\") {\r\n\r\n            let feedbackData = {\r\n              userId: userId,\r\n              userName: userName,\r\n              date: new Date().getTime(),\r\n              feedback: option,\r\n            };\r\n\r\n            let feedbacks = doc.data().feedbacks;\r\n            feedbacks.push(feedbackData);\r\n            transcation.update(pollRef, {\r\n              feedbacks: feedbacks,\r\n              totalResponse: firebase.firestore.FieldValue.increment(1),\r\n            });\r\n          }\r\n          if (type === \"multiple\") {\r\n            let _option = { ...option };\r\n            delete _option.response;\r\n\r\n            transcation.set(responseRef, {\r\n              id: id,\r\n              targetId: pollId,\r\n              user: userId,\r\n              userName: userName,\r\n              eventId: eventId,\r\n              timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n              date: new Date().getTime(),\r\n              option: _option,\r\n            });\r\n\r\n            const options = doc.data().options;\r\n\r\n            options[option.id] = {\r\n              ...options[option.id],\r\n              response: parseInt(options[option.id].response) + 1,\r\n            };\r\n            transcation.update(pollRef, {\r\n              options: options,\r\n              totalResponse: firebase.firestore.FieldValue.increment(1),\r\n            });\r\n          }\r\n        });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  changeAllPollState: (eventId, state = POLL_STATES.hide) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const pollColl = firestore.collection(POLL_COLLECTION);\r\n        const docRef = firestore\r\n          .collection(POLL_COLLECTION)\r\n          .where(\"eventId\", \"==\", eventId);\r\n        await firestore.runTransaction(async (transcation) => {\r\n          let query = await transcation.get(docRef);\r\n          if (query.empty) {\r\n            let er = { code: \"EmptyPoll\", message: \"No Poll Found\" };\r\n            throw er;\r\n          }\r\n          const docIds = query.docs.map((doc) => doc.id);\r\n          for (let i = 0; i < docIds.length; i++) {\r\n            await pollColl.doc(docIds[i]).update({\r\n              state,\r\n            });\r\n          }\r\n        });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { POLL_STATES } from \"../../Constants/PollStates\";\r\nimport { PollUser } from \"../../Components/Poll\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { PollManager } from \"../../Managers/PollManager\";\r\n\r\nimport \"./PollContainer.css\";\r\n// import { getByPlaceholderText } from \"@testing-library/react\";\r\nexport default function PollContainer(props) {\r\n  const { id: eventId, isPollUser, pollAnalytics } = props;\r\n  const { user } = useContext(UserContext);\r\n  const [pollAnswerredData, setPollAnswerredData] = useState({});\r\n\r\n  const [pollData, setPollData] = useState(null);\r\n  const [pollForm, setPollForm] = useState([]);\r\n  const [isPollFormOpen, setIsPollFormOpen] = useState(false);\r\n\r\n  const [isFeedbackExpand, setIsFeedbackExpand] = useState();\r\n  const [pollFeedback, setPollFeedback] = useState([]);\r\n  const [isPollFeedback, setIsPollFeedback] = useState(false);\r\n\r\n  const [createNewPollbtnOpen, setCreateNewPollbtnOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState({\r\n    open: false,\r\n    id: null,\r\n    type: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    getPoll();\r\n    return () => {\r\n      PollManager.removePollListener();\r\n    };\r\n  }, []);\r\n  const submitResponse = (pollId, option, type) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        await PollManager.addResponse(\r\n          eventId,\r\n          pollId,\r\n          user.uid,\r\n          user.displayName,\r\n          option,\r\n          type\r\n        );\r\n        // pollAnalytics(pollId, option.id);\r\n        setPollAnswerredData({ ...pollAnswerredData, [pollId]: option });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  const getAllPollAnsweredDataForCurrentUser = async (data) => {\r\n    if (data.length > 0) {\r\n      let _pollAnswerredData = {};\r\n      for (let i = 0; i < data.length; i++) {\r\n        let res = await checkIfAlreadyAnswered(data[i].id);\r\n        _pollAnswerredData = {\r\n          ..._pollAnswerredData,\r\n          [data[i].id]: res,\r\n        };\r\n      }\r\n      setPollAnswerredData(_pollAnswerredData);\r\n    }\r\n  };\r\n\r\n  const checkIfAlreadyAnswered = (pollId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const pollIds = Object.keys(pollAnswerredData);\r\n        if (pollIds.indexOf(pollId) !== -1) {\r\n          // console.log(pollIds[pollId])\r\n          res(pollIds[pollId]);\r\n        }\r\n        const result = await PollManager.getPollResponse(pollId, user?.uid);\r\n        if (result) {\r\n          res(result);\r\n        } else {\r\n          res(null);\r\n        }\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  let visiblePollData = null;\r\n  if (pollData) {\r\n    visiblePollData = pollData.filter(\r\n      (item) => item.state !== POLL_STATES.hide\r\n    ); //pass index also\r\n  }\r\n\r\n  const getPoll = () => {\r\n    setLoading(true);\r\n    PollManager.attachPollListener(eventId, (data, err) => {\r\n      if (err) {\r\n        setLoading(false);\r\n        // console.log(err)\r\n        return;\r\n      }\r\n      setPollData(sortData(data));\r\n      getAllPollAnsweredDataForCurrentUser(data);\r\n      setLoading(false);\r\n    });\r\n  };\r\n  const handleformSubmit = async (type, id, updatedData) => {\r\n    // handling save button\r\n    if (type === \"save\") {\r\n      // extracting current form data from form array\r\n      let form = pollForm.filter((data, ind) => ind === id);\r\n      if (!form[0].question) {\r\n        return;\r\n      }\r\n      if (pollForm.length <= 1) {\r\n        setIsPollFormOpen(false);\r\n      }\r\n\r\n      return new Promise(async (res, rej) => {\r\n        try {\r\n          await PollManager.addPollQuestion(\"multiple\", form[0], eventId);\r\n          // updating saved form data array\r\n          getPoll();\r\n          let newForm = pollForm.filter((data, ind) => ind !== id);\r\n          // removing that form from form array\r\n          // newForm.sort((a, b) => a - b);\r\n          setPollForm(newForm);\r\n          res();\r\n        } catch (error) {\r\n          setIsPollFormOpen(true);\r\n          rej(error);\r\n        }\r\n      });\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n    if (type === \"showResult\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n  };\r\n  const handleMultipleChoice = () => {\r\n    setPollForm([\r\n      {\r\n        question: \"\",\r\n        option1: \"\",\r\n        option2: \"\",\r\n        option3: \"\",\r\n        option4: \"\",\r\n      },\r\n      ...pollForm,\r\n    ]);\r\n    setIsPollFormOpen(true);\r\n    setCreateNewPollbtnOpen(false);\r\n    return;\r\n  };\r\n\r\n  const handleFeedback = () => {\r\n    setPollFeedback([\r\n      {\r\n        question: \"\",\r\n      },\r\n      ...pollFeedback,\r\n    ]);\r\n    setIsPollFeedback(true);\r\n    setCreateNewPollbtnOpen(false);\r\n    return;\r\n  };\r\n  const handleDeleteFeedbackPoll = async (type, id) => {\r\n    if (type === \"unpublish\") {\r\n      if (pollFeedback.length > 1) {\r\n        let form = pollFeedback.filter((data, ind) => ind !== id);\r\n        setPollFeedback(form);\r\n      } else {\r\n        setPollFeedback([]);\r\n      }\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.removePollQuestion(id);\r\n      if (result === \"success\") {\r\n        let form = pollFeedback.filter((data) => data.id !== id);\r\n        setPollData(sortData(form));\r\n      }\r\n    }\r\n    setShowDeleteModal({ open: false, id: null, type: \"\" });\r\n  };\r\n  const handleFeedBackSubmit = async (type, id, updatedData) => {\r\n    // handling save button\r\n    if (type === \"save\") {\r\n      // extracting current form data from form array\r\n      let form = pollFeedback.filter((data, ind) => ind === id);\r\n      if (!form[0].question) {\r\n        return;\r\n      }\r\n      if (pollFeedback.length <= 1) {\r\n        setIsPollFeedback(false);\r\n      }\r\n\r\n      return new Promise(async (res, rej) => {\r\n        try {\r\n          await PollManager.addPollQuestion(\"feedback\", form[0], eventId);\r\n          // updating saved form data array\r\n          getPoll();\r\n          let newForm = pollFeedback.filter((data, ind) => ind !== id);\r\n          // removing that form from form array\r\n          // newForm.sort((a, b) => a - b);\r\n          setPollFeedback(newForm);\r\n          res();\r\n        } catch (error) {\r\n          setIsPollFeedback(true);\r\n          rej(error);\r\n        }\r\n      });\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n    if (type === \"showResult\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n  };\r\n  const handleDeletePoll = async (type, id) => {\r\n    if (type === \"unpublish\") {\r\n      if (pollForm.length > 1) {\r\n        let form = pollForm.filter((data, ind) => ind !== id);\r\n        setPollForm(form);\r\n      } else {\r\n        setPollForm([]);\r\n      }\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.removePollQuestion(id);\r\n      if (result === \"success\") {\r\n        let form = pollData.filter((data) => data.id !== id);\r\n        setPollData(sortData(form));\r\n      }\r\n    }\r\n    setShowDeleteModal({ open: false, id: null, type: \"\" });\r\n  };\r\n\r\n  const updateItem = (type, index, whichvalue, newvalue) => {\r\n    if (type === \"multiple\") {\r\n      let g = pollForm[index];\r\n      g[whichvalue] = newvalue;\r\n      if (index === -1) {\r\n        // handle error\r\n        console.log(\"no match\");\r\n      } else\r\n        setPollForm([\r\n          ...pollForm.slice(0, index),\r\n          g,\r\n          ...pollForm.slice(index + 1),\r\n        ]);\r\n    }\r\n    if (type === \"feedback\") {\r\n      let g = pollFeedback[index];\r\n      g[whichvalue] = newvalue;\r\n      if (index === -1) {\r\n        // handle error\r\n        console.log(\"no match\");\r\n      } else\r\n        setPollFeedback([\r\n          ...pollFeedback.slice(0, index),\r\n          g,\r\n          ...pollFeedback.slice(index + 1),\r\n        ]);\r\n    }\r\n  };\r\n\r\n  const sortData = (data) => {\r\n    let sorted = data.sort((a, b) => (a.timestamp >= b.timestamp ? -1 : 1));\r\n    return sorted;\r\n  };\r\n  return (\r\n    <>\r\n      {!isPollUser ? (\r\n        <div className=\"communityBox__body\">\r\n          <div className=\"poll-form-container\">\r\n            <div style={{ position: \"relative\" }}>\r\n              <button\r\n                className={`poll-btn ${createNewPollbtnOpen && \"pbh\"}`}\r\n                onClick={() => setCreateNewPollbtnOpen(!createNewPollbtnOpen)}\r\n              >\r\n                + Create new Poll\r\n              </button>\r\n              {createNewPollbtnOpen && (\r\n                <div className=\"create-new-btn-optns\">\r\n                  <div onClick={() => handleMultipleChoice()}>\r\n                    Multiple Choice\r\n                  </div>\r\n                  <div onClick={() => handleFeedback()}>Feedback</div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            {/* Poll Form Start */}\r\n            {isPollFormOpen &&\r\n              pollForm?.map((data, index) => (\r\n                <div className=\"poll-form\" key={index}>\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    // onClick={() => handleDeletePoll(\"unpublish\", index)}\r\n                    onClick={() =>\r\n                      setShowDeleteModal({\r\n                        open: true,\r\n                        id: index,\r\n                        type: \"unpublish\",\r\n                        formType: \"multiple\",\r\n                      })\r\n                    }\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      alignSelf: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        process.env.PUBLIC_URL +\r\n                        \"assets/images/icons/delete.svg\"\r\n                      }\r\n                      alt=\"delete\"\r\n                      height=\"10px\"\r\n                      style={{ display: \"inline-block\", paddingRight: \"5px\" }}\r\n                    />\r\n                    Delete Poll\r\n                  </button>\r\n                  <input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    placeholder=\"Add question text\"\r\n                    value={data.question}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"question\", e.target.value)\r\n                    }\r\n                    required\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 1\"\r\n                    value={data.option1}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option1\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 2\"\r\n                    value={data.option2}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option2\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 3\"\r\n                    value={data.option3}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option3\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 4\"\r\n                    value={data.option4}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option4\", e.target.value)\r\n                    }\r\n                  />\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() => handleformSubmit(\"save\", index)}\r\n                    style={{ border: \"1px solid black\", alignSelf: \"center\" }}\r\n                  >\r\n                    Save Poll\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            {/* end of Poll Form */}\r\n            {/* Feedback form start */}\r\n            {isPollFeedback &&\r\n              pollFeedback?.map((data, index) => (\r\n                <div className=\"poll-form\" key={index}>\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    // onClick={() => handleDeletePoll(\"unpublish\", index)}\r\n                    onClick={() =>\r\n                      setShowDeleteModal({\r\n                        open: true,\r\n                        id: index,\r\n                        type: \"unpublish\",\r\n                        formType: \"feedback\",\r\n                      })\r\n                    }\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      alignSelf: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        process.env.PUBLIC_URL +\r\n                        \"assets/images/icons/delete.svg\"\r\n                      }\r\n                      alt=\"delete\"\r\n                      height=\"10px\"\r\n                      style={{ display: \"inline-block\", paddingRight: \"5px\" }}\r\n                    />\r\n                    Delete Poll\r\n                  </button>\r\n                  <input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    placeholder=\"Add question text\"\r\n                    value={data.question}\r\n                    onChange={(e) =>\r\n                      updateItem(\"feedback\", index, \"question\", e.target.value)\r\n                    }\r\n                    required\r\n                  />\r\n\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() => handleFeedBackSubmit(\"save\", index)}\r\n                    style={{ border: \"1px solid black\", alignSelf: \"center\" }}\r\n                  >\r\n                    Save Poll\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            {/* End of feedback form */}\r\n          </div>\r\n          {loading && <div style={{ marginTop: \"1rem\" }}>Please wait...</div>}\r\n          {pollData &&\r\n            pollData.map((data, index) => (\r\n              <div key={data.id} className=\"poll-form poll-form-data\">\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignSelf: data.state === POLL_STATES.hide && \"flex-end\",\r\n                  }}\r\n                >\r\n                  {data.state !== POLL_STATES.hide && (\r\n                    <div className=\"live-text\" style={{ fontWeight: 600 }}>\r\n                      <div className=\"live-mark\"></div>\r\n                      LIVE NOW\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() =>\r\n                      setShowDeleteModal({\r\n                        open: true,\r\n                        id: data.id,\r\n                        type: \"publish\",\r\n                        formType: \"multiple\",\r\n                      })\r\n                    }\r\n                    // onClick={() => handleDeletePoll(\"publish\", data.id)}\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        process.env.PUBLIC_URL +\r\n                        \"assets/images/icons/delete.svg\"\r\n                      }\r\n                      alt=\"delete\"\r\n                      height=\"10px\"\r\n                      style={{ display: \"inline-block\", paddingRight: \"5px\" }}\r\n                    />\r\n                    Delete Poll\r\n                  </button>\r\n                </div>\r\n                <p\r\n                  style={{\r\n                    paddingTop: \"10px\",\r\n                    marginBottom: \"25px\",\r\n                    fontWeight: 600,\r\n                  }}\r\n                >\r\n                  {`Q${pollData.length - index}. ${data.question}`}\r\n                  {data.feedbacks && (\r\n                    <span\r\n                      style={{ float: \"right\", cursor: \"pointer\" }}\r\n                      onClick={() =>\r\n                        isFeedbackExpand\r\n                          ? setIsFeedbackExpand(\"\")\r\n                          : setIsFeedbackExpand(pollData.length - index)\r\n                      }\r\n                    >\r\n                      {!isFeedbackExpand ? (\r\n                        <img\r\n                          src={\r\n                            process.env.PUBLIC_URL +\r\n                            \"assets/images/icons/chevrondown.svg\"\r\n                          }\r\n                          alt=\"down\"\r\n                          height=\"15px\"\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          src={\r\n                            process.env.PUBLIC_URL +\r\n                            \"assets/images/icons/chevronup.svg\"\r\n                          }\r\n                          alt=\"down\"\r\n                          height=\"15px\"\r\n                        />\r\n                      )}\r\n                    </span>\r\n                  )}\r\n                </p>\r\n                <div style={{ maxHeight: \"200px\", overflow: \"auto\" }}>\r\n                  {data?.feedbacks?.length === 0 && (\r\n                    <div\r\n                      style={{\r\n                        display:\r\n                          isFeedbackExpand === pollData.length - index\r\n                            ? \"block\"\r\n                            : \"none\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      No feedback\r\n                    </div>\r\n                  )}\r\n                  {data?.feedbacks?.map((feedback) => (\r\n                    <li\r\n                      key={feedback.date}\r\n                      className=\"poll-ans-list\"\r\n                      style={{\r\n                        display:\r\n                          isFeedbackExpand === pollData.length - index\r\n                            ? \"list-item\"\r\n                            : \"none\",\r\n                      }}\r\n                    >\r\n                      {feedback.feedback}\r\n                    </li>\r\n                  ))}\r\n                </div>\r\n                {data?.options?.map((option, index) => (\r\n                  <div key={index} className=\"poll-ans-list\">\r\n                    <span>{`0${index + 1}. `}</span> {option.value}\r\n                    {data.state === POLL_STATES.showResult && (\r\n                      <div\r\n                        className=\"custom-slider\"\r\n                        style={{ padingLeft: \"6%\" }}\r\n                      >\r\n                        {/* <span className=\"custom-slider__text\">\r\n                        {option.value}\r\n                      </span> */}\r\n                        <div className=\"custom-slider__bar\">\r\n                          <span className=\"custom-slider__mark\">{`${\r\n                            data.totalResponse > 0\r\n                              ? (option.response / data.totalResponse) * 100\r\n                              : 0\r\n                          }%`}</span>\r\n                          <div\r\n                            className=\"custom-slider__bar-inner\"\r\n                            style={{\r\n                              width: `${\r\n                                data.totalResponse > 0\r\n                                  ? (option.response / data.totalResponse) * 100\r\n                                  : 0\r\n                              }%`,\r\n                            }}\r\n                          ></div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent:\r\n                      data.state !== POLL_STATES.hide\r\n                        ? \"space-between\"\r\n                        : \"center\",\r\n                  }}\r\n                >\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() =>\r\n                      handleformSubmit(\r\n                        \"publish\",\r\n                        data.id,\r\n                        data.state !== POLL_STATES.hide\r\n                          ? POLL_STATES.hide\r\n                          : POLL_STATES.showQuestion\r\n                      )\r\n                    }\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      fontWeight: \"700\",\r\n                    }}\r\n                  >\r\n                    {data.state !== POLL_STATES.hide\r\n                      ? \"Unpublish\"\r\n                      : \"Publish Poll\"}\r\n                  </button>\r\n                  {data.state !== POLL_STATES.hide && !data.feedbacks && (\r\n                    <button\r\n                      className=\"poll-btn\"\r\n                      onClick={() =>\r\n                        handleformSubmit(\r\n                          \"showResult\",\r\n                          data.id,\r\n                          data.state === POLL_STATES.showResult\r\n                            ? POLL_STATES.showQuestion\r\n                            : POLL_STATES.showResult\r\n                        )\r\n                      }\r\n                      style={{\r\n                        border: \"1px solid black\",\r\n                        fontWeight: \"700\",\r\n                      }}\r\n                    >\r\n                      {data.state === POLL_STATES.showQuestion\r\n                        ? \"Show Result\"\r\n                        : \"Hide Result\"}\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {showDeleteModal.open && (\r\n            <DeleteModal\r\n              type={showDeleteModal.type}\r\n              id={showDeleteModal.id}\r\n              formType={showDeleteModal.formType}\r\n              handleDeletePoll={handleDeletePoll}\r\n              handleDeleteFeedbackPoll={handleDeleteFeedbackPoll}\r\n              setShowDeleteModal={setShowDeleteModal}\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <PollUser\r\n          visiblePollData={visiblePollData}\r\n          submitResponse={submitResponse}\r\n          pollAnswerredData={pollAnswerredData}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst DeleteModal = ({\r\n  handleDeletePoll,\r\n  type,\r\n  id,\r\n  formType,\r\n  handleDeleteFeedbackPoll,\r\n  setShowDeleteModal,\r\n}) => {\r\n  return (\r\n    <div className=\"dlt-mdl\">\r\n      <div className=\"dlt-mdl-bdy\">\r\n        <div style={{ fontWeight: 700 }}>\r\n          By deleting this poll you will loose all associated data and results.\r\n        </div>\r\n        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n          <button\r\n            className=\"poll-btn\"\r\n            onClick={() =>\r\n              setShowDeleteModal({ open: false, id: null, type: \"\" })\r\n            }\r\n            style={{\r\n              border: \"1px solid black\",\r\n            }}\r\n          >\r\n            Not Now\r\n          </button>\r\n          <button\r\n            className=\"poll-btn\"\r\n            onClick={() =>\r\n              formType === \"feedback\"\r\n                ? handleDeleteFeedbackPoll(type, id)\r\n                : formType === \"multiple\"\r\n                ? handleDeletePoll(type, id)\r\n                : null\r\n            }\r\n            style={{\r\n              border: \"1px solid black\",\r\n            }}\r\n          >\r\n            Delete Poll\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { BACKSTAGE_COLLECTION } from \"../Constants/CollectionConstants\";\r\nimport firebase, { firestore } from \"../Firebase/index\";\r\n\r\nexport const NotificationManager = {\r\n  addNotification: (notificaton, eventId, userId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        let docRef = firestore\r\n          .collection(BACKSTAGE_COLLECTION)\r\n          .doc(\"notification\");\r\n        await docRef.set({\r\n          ...notificaton,\r\n          eventId: eventId,\r\n          userId: userId,\r\n          timestamp: firebase.firestore.Timestamp.now(),\r\n        });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n\r\n  publishNotification: (id, data) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore.collection(BACKSTAGE_COLLECTION);\r\n        await ref.doc(id).update(data);\r\n        res(\"success\");\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  getNotification: (eventId, callback = () => console.log(\"noFunFound\")) => {\r\n    const ref = firestore\r\n      .collection(BACKSTAGE_COLLECTION)\r\n      .where(\"eventId\", \"==\", eventId);\r\n    ref.onSnapshot(\r\n      (query) => {\r\n        if (query.empty) {\r\n          callback([]);\r\n        }\r\n        let _data = query.docs.map((doc) => {\r\n          let record = { id: doc.id, ...doc.data() };\r\n          return record;\r\n        });\r\n        callback(_data);\r\n      },\r\n      (err) => {\r\n        callback(null, err);\r\n      }\r\n    );\r\n  },\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { NotificationManager } from \"../../Managers/NotificationManager\";\r\n\r\nexport default function PollContainer(props) {\r\n  const { id: eventId, isPollUser } = props;\r\n\r\n  const { user } = useContext(UserContext);\r\n\r\n  const [pollNotification, setPollNotification] = useState({});\r\n  const [pollNotificationForm, setPollNotificationForm] = useState({\r\n    notification: \"\",\r\n    published: false,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getPollNotification();\r\n  }, []);\r\n\r\n  const getPollNotification = () => {\r\n    setLoading(true);\r\n    NotificationManager.getNotification(eventId, (data, err) => {\r\n      if (err) {\r\n        setLoading(false);\r\n        // console.log(err)\r\n        return;\r\n      }\r\n      setPollNotification(data[0]);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  const handleNotificationSubmit = async (type, id, updatedData) => {\r\n    // handling save button\r\n    if (type === \"save\") {\r\n      return new Promise(async (res, rej) => {\r\n        try {\r\n          await NotificationManager.addNotification(\r\n            pollNotificationForm,\r\n            eventId,\r\n            user.uid\r\n          );\r\n          // updating saved form data array\r\n          getPollNotification();\r\n          setPollNotification({\r\n            notification: \"\",\r\n            published: false,\r\n          });\r\n          res();\r\n        } catch (error) {\r\n          rej(error);\r\n        }\r\n      });\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await NotificationManager.publishNotification(id, {\r\n        published: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        setPollNotification({ ...pollNotification, published: updatedData });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isPollUser && (\r\n        <div className=\"communityBox__body\">\r\n          <div className=\"poll-form-container\">\r\n            {/* Feedback form start */}\r\n            <div className=\"poll-form\">\r\n              <input\r\n                autoFocus\r\n                type=\"text\"\r\n                placeholder=\"Write text here...\"\r\n                value={pollNotificationForm.notification}\r\n                onChange={(e) =>\r\n                  setPollNotificationForm({\r\n                    notification: e.target.value,\r\n                    published: false,\r\n                  })\r\n                }\r\n                required\r\n              />\r\n\r\n              <button\r\n                className=\"poll-btn\"\r\n                onClick={() => handleNotificationSubmit(\"save\")}\r\n                style={{ border: \"1px solid black\", alignSelf: \"center\" }}\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            {/* End of feedback form */}\r\n          </div>\r\n          {loading && <div style={{ marginTop: \"1rem\" }}>Please wait...</div>}\r\n\r\n          <div className=\"poll-form poll-form-data\">\r\n            <p\r\n              style={{\r\n                paddingTop: \"10px\",\r\n                marginBottom: \"25px\",\r\n                fontWeight: 600,\r\n              }}\r\n            >\r\n              {pollNotification?.notification}\r\n            </p>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <button\r\n                className=\"poll-btn\"\r\n                onClick={() =>\r\n                  handleNotificationSubmit(\r\n                    \"publish\",\r\n                    pollNotification?.id,\r\n                    pollNotification?.published ? false : true\r\n                  )\r\n                }\r\n                style={{\r\n                  border: \"1px solid black\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                {pollNotification?.published ? \"Unpublish\" : \"Publish\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\"\r\nimport Menu from \"../../Containers/Menu/Menu\"\r\nimport PrivateChat from \"../../Containers/PrivateChat/PrivateChat\"\r\nimport PublicChat from \"../../Containers/PublicChat/PublicChat\"\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\"\r\nimport { MenuStates, UIContext } from \"../../Context/UIContextProvider\"\r\nimport PollContainer from \"../../Containers/PollContainer/PollContainer\";\r\nimport NotificationContainer from \"../../Containers/NotificationContainer/NotificationContainer\";\r\nimport Loader from \"../../Containers/Loader/Loader\"\r\nimport { ChatContext } from \"../../Context/Chat/ChatContextProvider\"\r\n\r\nexport default function Home() {\r\n  const { activeMenu, isPollAdmin } = useContext(UIContext)\r\n  const { publicRoomName } = useContext(ChatContext)\r\n  const { user } = useContext(UserContext)\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <aside className=\"sidebar active\">\r\n        <header className=\"headerBox\">\r\n          <Menu />\r\n        </header>\r\n        {user && user.isChecked ? (\r\n          <>\r\n            {activeMenu === MenuStates.participants && <PrivateChat />}\r\n\r\n            {\r\n              activeMenu === MenuStates.publicChat && (\r\n                <PublicChat room={{ roomId: publicRoomName }} />\r\n                //to change publicRoom from url pass URLParam publicRoom=roomId\r\n              )}\r\n            {\r\n              activeMenu === MenuStates.polls && (\r\n                <PollContainer id={publicRoomName} isPollUser={!isPollAdmin} />\r\n                // can pass videoCall RoomId, which we are using for inCallMessages rightNow\r\n                // to showPoll pass URL Param showPoll=true\r\n                // to showPollAdAdmin pass URL Param pollAdmin=true\r\n              )\r\n            }\r\n            {activeMenu === MenuStates.notification && (\r\n              <NotificationContainer id={publicRoomName} isPollUser={!isPollAdmin} />\r\n            )}\r\n          </>) :\r\n          (<>\r\n            <Loader />\r\n          </>)\r\n        }\r\n      </aside>\r\n    </div >\r\n  );\r\n}\r\n","// import { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport Home from \"./Pages/Home\";\r\n// import Login from \"./Pages/Login\";\r\n// import Register from \"./Pages/Register\";\r\n// import { LOGIN_ROUTE, REGISTER_ROUTE, RootRoute } from \"./Constants/RouteConstants\";\r\n// import ProtectedRoute from \"./Containers/ProtectedRoute\";\r\n// import UnprotectedRoute from \"./Containers/UnprotectedRoute\";\r\nimport { UIContextProvider } from \"./Context/UIContextProvider\";\r\nimport ChatContextProvider from \"./Context/Chat/ChatContextProvider\"\r\nimport \"./App.css\"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <UIContextProvider>\r\n        <ChatContextProvider>\r\n          <Home />\r\n        </ChatContextProvider>\r\n      </UIContextProvider>\r\n      {/* <Router>\r\n        <Switch>\r\n\r\n          <UnprotectedRoute redirectTo={RootRoute} path={REGISTER_ROUTE}>\r\n            <Register />\r\n          </UnprotectedRoute>\r\n\r\n          <UnprotectedRoute redirectTo={RootRoute} path={LOGIN_ROUTE}>\r\n            <Login />\r\n          </UnprotectedRoute>\r\n\r\n          <ProtectedRoute redirectTo={LOGIN_ROUTE} path={RootRoute}>\r\n            <Home />\r\n          </ProtectedRoute>\r\n        </Switch>\r\n      </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport UserContextProvider from './Context/Auth/UserContextProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <UserContextProvider>\r\n      <App />\r\n    </UserContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}