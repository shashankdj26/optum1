{"version":3,"sources":["logo.svg","firebase.js","components/helpdesk-chat/HelpDeskChat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authx","auth","firestoreDB","firestore","date","Date","setMonth","getMonth","HelpDeskChat","props","state","error","isLoading","messages","channels","activeChannel","activeMessages","replied","searchText","handleError","console","setState","page","paginator","concat","items","forEach","channel","subscribeChannelMessages","hasNextPage","nextPage","then","setupChatClient","client","getSubscribedChannels","on","join","push","getMessages","messagePage","messagesLoaded","message","messageAdded","twilioMessageToMessage","id","sid","text","body","user","attributes","timestamp","map","length","name","handleOnline","previousMessage","scroll","setInterval","sort","x","y","lastMessage","dateCreated","value","sendMessage","current","maxScrollTop","messageDiv","scrollHeight","clientHeight","scrollTop","onChannelClick","setTimeout","onSearchTextChange","React","createRef","search","window","desk","fetch","headers","method","encodeURIComponent","this","res","json","data","Chat","create","token","catch","shutdown","filter","friendlyName","toLocaleLowerCase","includes","className","src","alt","href","type","placeholder","ref","onChange","event","target","key","onClick","onKeyPress","Component","App","checkForAdminUser","uid","a","log","collection","where","get","undefined","query","empty","checking","login","signInWithEmailAndPassword","response","redirect","bypass","canRedirect","self","listener","onAuthStateChanged","authUser","email","width","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f546945e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import app from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCLrOZLt39XFK0Drm84JAWWKcAmMxYw5wY\",\r\n  authDomain: \"r1rcm-virtual-event.firebaseapp.com\",\r\n  databaseURL: \"https://r1rcm-virtual-event.firebaseio.com\",\r\n  projectId: \"r1rcm-virtual-event\",\r\n  storageBucket: \"r1rcm-virtual-event.appspot.com\",\r\n  messagingSenderId: \"633596592870\",\r\n  appId: \"1:633596592870:web:f9bdb2d8ed3ec72787f127\",\r\n  measurementId: \"G-47FXCVZYPH\"\r\n};\r\n\r\napp.initializeApp(config);\r\nconst authx = app.auth();\r\nconst firestoreDB = app.firestore();\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    this.app = app;\r\n    this.auth = app.auth();\r\n    this.db = app.firestore();\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\nexport { firestoreDB, authx };","// eslint-disable-next-line no-undef\r\nimport React, { Component } from 'react';\r\nimport './HelpDeskChat.css';\r\nimport Chat from 'twilio-chat';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst date = new Date();\r\ndate.setMonth(date.getMonth()-12);\r\n\r\nclass HelpDeskChat extends Component {\r\n\r\n    state = {\r\n        error: null,\r\n        isLoading: true,\r\n        messages: {},\r\n        channels: [],\r\n        activeChannel: null,\r\n        activeMessages: [],\r\n        replied: {},\r\n        searchText : \"\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.user = {\r\n            id: props.user.id,\r\n            name: props.user.name\r\n        };\r\n\r\n        this.message = React.createRef();\r\n        this.messageDiv = React.createRef();\r\n        this.search = React.createRef();\r\n        window.desk = this;\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://twilio-chat-api-dot-virtualeventdemo.el.r.appspot.com/chat/token', {\r\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n            method: 'POST',\r\n            body: `identity=${encodeURIComponent(this.user.id)}`\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => Chat.create(data.token))\r\n            .then(this.setupChatClient)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    handleError = (error) => {\r\n        console.error(error);\r\n        this.setState({\r\n            error: 'Could not load chat.'\r\n        });\r\n    }\r\n\r\n    page = (paginator) => {\r\n        this.setState({isLoading: false});\r\n        let channels = this.state.channels;\r\n        channels = channels.concat(paginator.items)\r\n        this.setState({channels: channels});\r\n        paginator.items.forEach(channel => this.subscribeChannelMessages(channel));\r\n        // paginator.items.forEach(channel => channel.delete().then(function(d_channel){console.log(\"Deleted\",d_channel.sid);}));\r\n        if(paginator.hasNextPage)\r\n        {\r\n            paginator.nextPage().then(paginator => this.page(paginator))\r\n        }\r\n    };\r\n\r\n    setupChatClient = (client) => {\r\n        this.client = client;\r\n\r\n        this.client.getSubscribedChannels().then((paginator) => {\r\n            this.page(paginator);\r\n        });\r\n\r\n        this.client.on('channelInvited', (channel) => {\r\n            channel.join();\r\n            // console.log(channel);\r\n            // console.log(channel.length);\r\n            let channels = this.state.channels;\r\n            channels.push(channel);\r\n            this.setState({ channels: channels });\r\n            this.subscribeChannelMessages(channel);\r\n        });\r\n    }\r\n\r\n    subscribeChannelMessages = (channel) => {\r\n        channel.getMessages().then(messagePage => this.messagesLoaded(channel, messagePage));\r\n        channel.on('messageAdded', (message) => this.messageAdded(channel, message));\r\n    }\r\n\r\n    twilioMessageToMessage = (message) => {\r\n        return {\r\n            id: message.sid,\r\n            text: message.body,\r\n            user: message.attributes.user || {},\r\n            timestamp: message.timestamp\r\n        };\r\n    }\r\n\r\n    messagesLoaded = (channel, messagePage) => {\r\n        let messages = this.state.messages;\r\n        messages[channel.sid] = messagePage.items.map(this.twilioMessageToMessage);\r\n        this.setState({ messages: messages });\r\n\r\n        if (messagePage.items.length > 0) {\r\n            let message = messages[channel.sid][messagePage.items.length - 1];\r\n            if (message.user.name == this.user.name) {\r\n                this.handleOnline(channel, true);\r\n            } else {\r\n                this.handleOnline(channel, false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    messageAdded = (channel, message) => {\r\n        if (this.previousMessage == null) {\r\n            this.previousMessage = message;\r\n        } else if (this.previousMessage.sid == message.sid) {\r\n            return;\r\n        }\r\n        this.previousMessage = message;\r\n\r\n        let messages = this.state.messages;\r\n        message = this.twilioMessageToMessage(message);\r\n        if (messages[channel.sid]) {\r\n            messages[channel.sid].push(message)\r\n        } else {\r\n            messages[channel.sid] = [];\r\n            messages[channel.sid].push(message)\r\n        }\r\n        this.setState({ messages: messages });\r\n\r\n        if (message.user.name == this.user.name) {\r\n            this.handleOnline(channel, true);\r\n        } else {\r\n            this.handleOnline(channel, false);\r\n        }\r\n\r\n        if (channel.sid == (this.state.activeChannel && this.state.activeChannel.sid)) {\r\n            this.scroll();\r\n        }\r\n\r\n        setInterval(()=> {\r\n\r\n            let channels =  this.state.channels.sort((x, y) => {\r\n                let yLastMessage = y.lastMessage?  y.lastMessage.dateCreated : date;\r\n                let xLastMessage = x.lastMessage?  x.lastMessage.dateCreated : date;\r\n                return yLastMessage - xLastMessage;\r\n            });\r\n\r\n            this.setState({channels: channels});\r\n\r\n        }, 1000);\r\n\r\n    }\r\n\r\n    handleOnline = (channel, value) => {\r\n        let replied = this.state.replied;\r\n        replied[channel.sid] = value;\r\n        // console.log(channel.sid)\r\n        // console.log(replied[channel.sid])\r\n        this.setState({ replied: replied });\r\n    }\r\n\r\n    sendMessage = () => {\r\n        if (this.message.current.value && this.state.activeChannel) {\r\n            this.state.activeChannel.sendMessage(this.message.current.value, { user: this.user });\r\n            this.handleOnline(this.state.activeChannel, true);\r\n            this.message.current.value = \"\";\r\n        }\r\n    }\r\n\r\n    scroll = () => {\r\n        const scrollHeight = this.messageDiv.current.scrollHeight;\r\n        const height = this.messageDiv.current.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.messageDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.client.shutdown();\r\n    }\r\n\r\n    onChannelClick = (channel) => {\r\n        // console.log(channel);\r\n        this.setState({ activeChannel: channel })\r\n        this.setState({ activeMessages: this.state.messages[channel.sid] });\r\n        setTimeout(this.scroll, 500);\r\n\r\n        // channel.getMessages().then(messagePage => this.messagesLoaded(channel, messagePage));\r\n    }\r\n\r\n    onSearchTextChange = (value) =>{\r\n        this.setState({searchText: value})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <p>{this.state.error}</p>;\r\n        } else if (this.state.isLoading) {\r\n            return <p>Loading chat...</p>;\r\n        }\r\n\r\n\r\n        let searchText = this.state.searchText;\r\n        let channels =  this.state.channels\r\n            .filter(channel => {\r\n                // console.log(channel.friendlyName )\r\n                return searchText == \"\"?  true : (channel.friendlyName || \"\").toLocaleLowerCase().includes(searchText.toLocaleLowerCase());\r\n            }).sort((x, y) => {\r\n                let yLastMessage = y.lastMessage?  y.lastMessage.dateCreated : date;\r\n                let xLastMessage = x.lastMessage?  x.lastMessage.dateCreated : date;\r\n                return yLastMessage - xLastMessage;\r\n            });\r\n        //  console.log(channels);\r\n            \r\n\r\n        return (<>\r\n            <div className=\"wrapper h-100\">\r\n                {/* <header className=\"header\">\r\n                    <a href=\"#\" className=\"header__logo\">\r\n                        <img src=\"assets/images/logo.png\" alt=\"\" />\r\n                    </a>\r\n                    <a href=\"#\" className=\"header__close\">\r\n                        <i className=\"icon-close\"></i>\r\n                    </a>\r\n                </header> */}\r\n                <div className=\"contentCntr\">\r\n                    <aside className=\"sidebar\">\r\n                        <div className=\"sidebar__header\">\r\n                            <div className=\"sidebar__user\">\r\n                                <div className=\"user-block\">\r\n                                    <div className=\"user-block__pic\">\r\n                                        <img src=\"assets/images/Profile-picture.png\" alt=\"\" />\r\n                                        <span className=\"user-block__online\"></span>\r\n                                    </div>\r\n                                    <span className=\"user-block__name\">HelpDesk</span>\r\n                                </div>\r\n                            </div>\r\n                            <a href=\"#\" className=\"sidebar__link\">Chat Room</a>\r\n                        </div>\r\n                        <div className=\"sidebar__body\">\r\n                            <div className=\"search-block\">\r\n                            <div className=\"search-block__form\">\r\n                                    <input className=\"search-block__input\" type=\"text\" placeholder=\"Search\" ref={this.search} onChange={event => this.onSearchTextChange(event.target.value)} />\r\n                                    <button className=\"search-block__btn\"><i className=\"icon-search\"></i></button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"user-block-list\">\r\n                                <div>\r\n                                    {\r\n                                       channels.map(channel =>\r\n                                            <div className=\"user-block\" key={channel.sid}\r\n                                                onClick={event => this.onChannelClick(channel)}>\r\n                                                <div className=\"user-block__pic\">\r\n                                                    <img src=\"assets/images/Profile-picture.png\" alt=\"\" />\r\n                                                    <span className={this.state.replied[channel.sid] == true ? \"user-block__dnd\" : \"user-block__online\"}></span>\r\n                                                </div>\r\n                                                <span className=\"user-block__name\">{channel.friendlyName}</span>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </aside>\r\n\r\n                    <section className=\"chat-container\">\r\n                        <div className=\"chat-section\">\r\n                            <div className=\"chat-section__header\">\r\n                                <div className=\"user-block\">\r\n                                    <div className=\"user-block__pic\">\r\n                                        <img src=\"assets/images/Profile-picture.png\" alt=\"\" />\r\n                                    </div>\r\n                                    <span className=\"user-block__name\">{this.state.activeChannel && this.state.activeChannel.attributes && this.state.activeChannel.attributes.name}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"chat-section__body\" ref={this.messageDiv}>\r\n\r\n                                {this.state.activeMessages &&\r\n                                    this.state.activeMessages.map(message =>\r\n                                        <div className={`chat-section__message chat-section__message--${this.user.id == message.user.id ? \"sent\" : \"received\"}`} key={message.id}>\r\n                                            {this.user.id == message.user.id &&\r\n                                                <> <span className=\"chat-section__text\">{message.text}</span>\r\n                                                    <span className=\"chat-section__profile\">\r\n                                                        <span className=\"chat-section__profile__pic\">\r\n                                                            <img src=\"assets/images/Profile-picture-black.png\" alt=\"\" />\r\n                                                        </span>\r\n                                                        {message.user.name}\r\n                                                    </span>\r\n                                                </>\r\n                                            }\r\n                                            {this.user.id != message.user.id &&\r\n                                                <>\r\n                                                    <span className=\"chat-section__profile\">\r\n                                                        <span className=\"chat-section__profile__pic\">\r\n                                                            <img src=\"assets/images/Profile-picture-black.png\" alt=\"\" />\r\n                                                            {message.user.name}\r\n                                                        </span>\r\n                                                    </span>\r\n                                                    <span className=\"chat-section__text\">{message.text}</span>\r\n                                                </>\r\n                                            }\r\n                                        </div>\r\n                                    )\r\n                                }\r\n\r\n                            </div>\r\n                            <div className=\"chat-section__footer\">\r\n                                <div className=\"chat-section__form\">\r\n                                    <input ref={this.message} type=\"text\" className=\"chat-section__input\"\r\n                                        placeholder=\"Type a Message\" onKeyPress={event => event.key === 'Enter' && this.sendMessage(event)}></input>\r\n                                    <button onClick={event => this.sendMessage(event)} className=\"chat-section__btn\"><i className=\"icon-send\"></i></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </>);\r\n    }\r\n\r\n}\r\n\r\nHelpDeskChat.propTypes = {\r\n    user: PropTypes.object\r\n}\r\n\r\nexport default HelpDeskChat;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { authx, firestoreDB } from \"./firebase\";\r\nimport HelpDeskChat from \"./components/helpdesk-chat/HelpDeskChat\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state =\r\n    {\r\n      checking: true\r\n    }\r\n    window.bypass = this;\r\n    this.canRedirect = true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    var self = this;\r\n    this.listener = authx.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        console.log(authUser.email)\r\n        self.checkForAdminUser(authUser.uid);\r\n      } else {\r\n        console.log(\"user not logged in--\");\r\n        this.login()\r\n        //redirect\r\n        // this.redirect();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkForAdminUser = async (uid) => {\r\n    try {\r\n      console.log(uid)\r\n      const query = await firestoreDB.collection(\"helpdesk\").where('members', 'array-contains', uid).get()\r\n      if (query !== undefined) {\r\n        // console.log(query);\r\n        if (!query.empty) {\r\n          //isAdmin\r\n          console.log(\"admin\");\r\n          this.setState({\r\n            checking: false\r\n          });\r\n        } else {\r\n          console.log(\"redirect\");\r\n          // not a admin redirect\r\n          console.log(\"not admin\");\r\n          // this.redirect();\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  login = () => {\r\n    authx.signInWithEmailAndPassword(\"akumar113@r1rcm.com\", \"akumar113@r1rcm.com123456\")\r\n      .then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n  redirect = () => {\r\n    // if (this.canRedirect)\r\n      // window.location.href = \"/index.html\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {/*<Landing></Landing>*/}\r\n        {\r\n          this.state.checking ? (\r\n            <div className=\"loaderB\">\r\n              <img src=\"assets/images/loader.gif\" alt=\"Loader\" width=\"50\" />\r\n            </div>\r\n          ):(\r\n            <HelpDeskChat user={{ id: \"HelpDesk-test\", name: \"HelpDesk\" }}> </HelpDeskChat>\r\n          )\r\n        }\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}