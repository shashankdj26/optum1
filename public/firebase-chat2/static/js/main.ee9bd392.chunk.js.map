{"version":3,"sources":["Firebase/index.js","Firebase/constant.js","Firebase/chatManager.js","Firebase/publicChatManager.js","Utility/index.js","Context/Auth/UserContextProvider.js","Context/UIContextProvider.js","Context/Chat/ChatContextProvider.js","Containers/Menu/Menu.js","Containers/Messages/index.js","Assets/svg/arrow.svg","Containers/PublicChat/PublicChat.js","Containers/IncallChat/IncallChat.js","Containers/Loader/Loader.js","Containers/Participants/Participants.js","Containers/PrivateChatRoom/PrivateChatRoom.js","Containers/PrivateChat/PrivateChat.js","Constants/PollStates.js","Components/Poll/index.js","Constants/CollectionConstants.js","Managers/PollManager.js","Containers/PollContainer/PollContainer.js","Managers/NotificationManager.js","Containers/NotificationContainer/NotificationContainer.js","Pages/Home/index.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","database","auth","analytics","fieldValue","FieldValue","AppString","user_ActiveStatus","user","isOnlineForDatabase","StateMode","userStatusDatabaseRef","ref","uid","onDisconnect","remove","then","set","name","displayName","id","email","designation","company","getUserDetails","a","Promise","res","rej","replace","toLowerCase","once","snapshot","exists","val","code","message","err","console","log","UpdateUserTable","userRef","userData","userName","fullName","photoURL","profile_picture","callback","on","orderByChild","result","count","forEach","child","key","rawData","singalTypingIndicator","roomId","userId","value","update","userOnlinePresence","listenerRef","onDisconnectRef","goOfflineInRoom","getOnlinPresentUserInRoom","refVar","generatePushID","PUSH_CHARS","lastPushTime","lastRandChars","now","Date","getTime","duplicateTime","timeStampChars","Array","i","charAt","Math","floor","Error","join","random","length","AvatarStyle","ChatTextStyle","getInitals","nameArr","trim","split","element","toUpperCase","sortObjectArray","arr","sort","b","UserContext","createContext","UserContextProvider","props","useState","JSON","parse","localStorage","getItem","setUser","useEffect","window","parent","loginUser","password","signInWithEmailAndPassword","userCred","catch","finally","login","onAuthStateChanged","setItem","stringify","userOtherData","isChecked","removeItem","Provider","children","UIContext","MenuStates","UIContextProvider","useContext","activeMenu","setActiveMenu","hidePoll","setHidePoll","isPollAdmin","setPollAdmin","userColorClassRecord","useRef","urlQuery","URLSearchParams","location","search","get","getParticipantColorNumber","mainObject","current","hasOwnProperty","ChatContext","ChatContextProvider","onlineUserslist","setOnlineUserslist","allParticipantList","setAllParticipantList","activeRoom","setActiveRoom","unseenMessageMetaData","setUnseenMessageMetaData","userLastInteractedRoom","setUserLastInteractedRoom","status","data","publicNotification","setPublicNotification","roomName","incallChatActive","setIncallChatActive","showInCallChat","setShowInCallChat","publicRoomName","setPublicRoom","rawUserData","setRawUserData","notificationListenerRef","userInteractedRoomRef","InCallPresenceListenerRef","InCallOnlineUserListenerRef","InCallRoomValueRef","inCallRoomParticipantList","setInCallRoomParticipantList","activeMenuRef","toggleIncallChat","error","off","cancel","attachListenerPublic","realDB","attachPublicChatListener","PublicChatListenerRef","notification","type","senderId","senderName","room","publicRoomURl","Object","keys","push","details","getUserInteractedRoom","roomid","roomDetails","otherParticipantId","participants","filter","otherParticipantName","otherParticipant","createdAt","newResult","getOnlineUsers","getAllParticipants","openChatWithUser","currentUserId","otherUserId","participant","closePreviousChatRoom","Menu","className","onClick","href","Message","time","userSubTitle","avartStyleRandom","toLocaleTimeString","timeStyle","ReceivedMsg","React","memo","SentMsg","PublicChat","state","messages","listenerCounter","scrollProgress","allowScrolling","pageSize","pageNumber","initialScrollDone","shouldAutoScroll","firstTime","typedMessage","inputRef","createRef","handleScroll","messageDiv","scrollHeight","scrollTop","clientHeight","setState","offsetTop","loadMessages","page","limit","offset","path","msgRef","limitToLast","reverse","slice","getMessageVideoChat","previousMessages","pop","newMessages","scroll","uuid4","array","Uint8Array","crypto","getRandomValues","idx","toString","padStart","setTimeout","maxScrollTop","onSendMessageClick","event","preventDefault","messageData","context","uniquerId","newMessage","ServerValue","TIMESTAMP","msgKey","this","removeEventListener","focus","getMessageListenerVideoChat","showNotification","nextProps","nextContext","activeSideMenu","prevProps","prevState","showHeader","map","pos","onSubmit","placeholder","onChange","e","target","disabled","Component","contextType","InCallChatHeader","useMemo","onbackClick","src","arrowSvg","alt","values","placement","trigger","overlay","IncallChat","Loader","UserTile","role","initals","UsersSection","heading","userList","getTrimedMessage","sendId","substr","RecentMessageSection","recentList","recentMsg","Participants","PrivateChatRoom","setTypedMessage","typingIndicator","setTypingIndicator","setLoading","activeMember","activeTab","sendable","setSendable","emailFeature","alreadySent","setAlreadySent","activeRoomMessage","setActiveRoomMessage","chatBodyRef","manualScrollUp","currentChatListenerRef","typingListenerRef","typingDisconnectRef","collection","doc","otherUserUid","attachListener","attachOnDisconnectForTyping","addEventListener","maxHeight","getBoundingClientRect","height","scrollTo","userDetailsCurr","allPart","entries","v","style","position","right","pointerEvents","opacity","size","stopPropagation","swal","title","text","icon","buttons","dangerMode","ok","fetch","headers","Accept","method","body","sender","reciver","receiver","sent","timestamp","serverTimestamp","messageDetails","currentUserName","currentUid","otherUserName","chatMetaData","increment","sendMessage1on1","PrivateChat","POLL_STATES","PollResult","currentIndex","index","question","options","totalResponse","option","response","width","PollQuestion","handleSubmit","checkIfAlreadyAnswered","feedbacks","eventId","answer","setAnswer","showError","setShowError","feedbackSuccess","setFeedbackSuccess","feedback","setFeedback","checked","color","marginBottom","textAlign","PollUser","visiblePollData","submitResponse","pollAnswerredData","marginTop","pollItem","overflow","POLL_COLLECTION","POLLRESPONSE_COLLECTION","BACKSTAGE_COLLECTION","uniqid","require","pollListenerRef","PollManager","form","docRef","option1","option2","option3","option4","Timestamp","delete","pollId","where","onSnapshot","query","empty","_data","docs","pollRef","responseRef","runTransaction","transcation","feedbackData","date","_option","targetId","timeStamp","parseInt","PollContainer","isPollUser","pollAnalytics","setPollAnswerredData","pollData","setPollData","pollForm","setPollForm","isPollFormOpen","setIsPollFormOpen","isFeedbackExpand","setIsFeedbackExpand","pollFeedback","setPollFeedback","isPollFeedback","setIsPollFeedback","createNewPollbtnOpen","setCreateNewPollbtnOpen","loading","open","showDeleteModal","setShowDeleteModal","getPoll","getAllPollAnsweredDataForCurrentUser","_pollAnswerredData","pollIds","indexOf","item","sortData","handleformSubmit","updatedData","ind","newForm","allForms","handleDeleteFeedbackPoll","handleFeedBackSubmit","handleDeletePoll","updateItem","whichvalue","newvalue","g","formType","border","alignSelf","display","paddingRight","autoFocus","required","justifyContent","fontWeight","paddingTop","float","cursor","padingLeft","DeleteModal","NotificationManager","notificaton","pollNotification","setPollNotification","published","pollNotificationForm","setPollNotificationForm","getPollNotification","handleNotificationSubmit","Home","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee9bd392.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/database\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/functions\";\r\n\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyCneEInwQf9s42gCzrX1ybhEvqO8Z1FcjM\",\r\n//     authDomain: \"broad-expo-rent-dj.firebaseapp.com\",\r\n//     databaseURL: \"https://broad-expo-rent-dj.firebaseio.com\",\r\n//     projectId: \"broad-expo-rent-dj\",\r\n//     storageBucket: \"broad-expo-rent-dj.appspot.com\",\r\n//     messagingSenderId: \"60481384412\",\r\n//     appId: \"1:60481384412:web:d39202acf4d3a9df266919\",\r\n//     measurementId: \"G-N8YN11228Z\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBJTU8VsOG17wVBs_TCXGZ4sINUr0nn4Ko\",\r\n  authDomain: \"vc-copy.firebaseapp.com\",\r\n  databaseURL: \"https://vc-copy-default-rtdb.firebaseio.com\",\r\n  projectId: \"vc-copy\",\r\n  storageBucket: \"vc-copy.appspot.com\",\r\n  messagingSenderId: \"501873172282\",\r\n  appId: \"1:501873172282:web:bb7877ee2a4259ead9ba03\",\r\n  measurementId: \"G-L9Y4BMW5TE\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\nexport const firestore = firebase.firestore();\r\nexport const database = firebase.database();\r\nexport const analytics = firebase.analytics();\r\nexport const auth = firebase.auth();\r\nexport const fieldValue = firebase.firestore.FieldValue;\r\n\r\nexport function login(name, password) {\r\n  auth\r\n    .signInWithEmailAndPassword(name, password)\r\n    .then((userCred) => {\r\n      console.log(userCred);\r\n    })\r\n    .catch((err) => console.log(err))\r\n    .finally((a) => console.log(a, \"finaly\"));\r\n}\r\n\r\nexport function updateName(user, name) {\r\n  if (!user.displayName) {\r\n    user.updateProfile({\r\n      displayName: name,\r\n    });\r\n  }\r\n}\r\n","export const AppString = {\r\n    USERS_DOC_REALTIME_DB: \"usersTable\",\r\n    DEFAULT_AVATAR: \"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png\",\r\n    USER_STATUS: \"user_status\",\r\n    // USER_STATUS: \"userInCall_status\",\r\n\r\n    ROOMS_LIST: \"roomsList\",\r\n    MEMBERS_LIST: \"membersList\",\r\n    ROOM_MESSAGES: \"roomMessages\",\r\n    ROOM_METADATA: \"roomMetadata\",\r\n    USER_NOTIFICATION: \"userNotification\",\r\n    ROOM_TYPING_INDICATOR: \"roomTypingStatus\",\r\n    INCALL_UserPresence : \"IncallPresence\"\r\n}","import firebase, { database } from \".\";\r\nimport { AppString } from \"./constant\";\r\n\r\nexport const user_ActiveStatus = (user) => {\r\n  let isOfflineForDatabase = {\r\n    StateMode: \"offline\",\r\n  };\r\n  let isOnlineForDatabase = {\r\n    StateMode: \"online\",\r\n  };\r\n  let userStatusDatabaseRef = database.ref(\r\n    \"/chat/\" + AppString.USER_STATUS + \"/\" + user.uid\r\n  );\r\n  let onDisconnectRef = userStatusDatabaseRef.onDisconnect();\r\n  onDisconnectRef.remove().then(() => {\r\n    userStatusDatabaseRef.set({\r\n      ...isOnlineForDatabase,\r\n      name: user.displayName ?? \"\",\r\n      id: user.uid,\r\n      email: user.email,\r\n      designation: user.designation,\r\n      company: user.company,\r\n    });\r\n  });\r\n};\r\n\r\nexport async function getUserDetails(user) {\r\n  return new Promise((res, rej) => {\r\n    let email = user.email;\r\n    email = email.replace(/[&\\/\\\\#,+$~%.'\":*?<>{}]/g, \"\");\r\n    email = email.toLowerCase();\r\n    let userRef = database.ref(`/users/${email}`);\r\n    userRef.once(\r\n      \"value\",\r\n      async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n          res(snapshot.val());\r\n        } else {\r\n          throw { code: \"NotFound\", message: \"\" };\r\n        }\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n        rej(err);\r\n      }\r\n    );\r\n  });\r\n}\r\nexport async function UpdateUserTable(user) {\r\n  console.log(user);\r\n  return new Promise((res, rej) => {\r\n    let userRef = database.ref(\r\n      `/chat/${AppString.USERS_DOC_REALTIME_DB}/${user.uid}`\r\n    );\r\n    userRef.once(\r\n      \"value\",\r\n      async (snapshot) => {\r\n        let userData = {\r\n          userName: user.displayName,\r\n          fullName: user.displayName,\r\n          name: user.displayName,\r\n          id: user.uid,\r\n          email: user.email,\r\n          designation: user.designation,\r\n          company: user.company,\r\n        };\r\n        if (user.photoURL) {\r\n          userData = {\r\n            ...userData,\r\n            profile_picture: user.photoURL,\r\n          };\r\n        } else {\r\n          userData = {\r\n            ...userData,\r\n            profile_picture: AppString.DEFAULT_AVATAR,\r\n          };\r\n        }\r\n        await userRef.set(userData);\r\n\r\n        // if (!snapshot.exists()) {\r\n\r\n        // } else {\r\n        //     //Check Default Image Is Their or not\r\n        //     if (user.photoURL) {\r\n        //         await userRef.update({ profile_picture: user.photoURL });\r\n        //     } else {\r\n        //         await userRef.update({ profile_picture: AppString.DEFAULT_AVATAR });\r\n        //     }\r\n        // }\r\n        res();\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n        rej(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport async function getOnlineUsers(callback) {\r\n  let userRef = database.ref(`/chat/${AppString.USER_STATUS}`);\r\n  userRef.on(\r\n    \"value\",\r\n    async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        if (callback) {\r\n          callback(snapshot.val());\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"NotFound\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport async function getAllParticipants(callback) {\r\n  let userRef = database\r\n    .ref(`/chat/${AppString.USERS_DOC_REALTIME_DB}`)\r\n    .orderByChild(\"email\");\r\n  userRef.on(\r\n    \"value\",\r\n    async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        let result = {};\r\n        let count = 1;\r\n        snapshot.forEach((child) => {\r\n          // console.log(child.key);\r\n          // console.log(child.val());\r\n          result[`${count}-${child.key}`] = child.val();\r\n          count++;\r\n        });\r\n        // console.log(result)\r\n        if (callback) {\r\n          callback({ result, rawData: snapshot.val() });\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"NotFound\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport function getRoomIdWithUser(currentUserId, otherUserId) {\r\n  let id = \"\";\r\n  if (currentUserId > otherUserId) {\r\n    id = currentUserId + \"+\" + otherUserId;\r\n  } else {\r\n    id = otherUserId + \"+\" + currentUserId;\r\n  }\r\n  return id;\r\n}\r\n\r\nexport async function getOldMessagesFromRoom(roomId) {\r\n  return new Promise((response, reject) => {\r\n    let userRef = database.ref(`/chat/messages/${roomId}`);\r\n    userRef.on(\r\n      \"value\",\r\n      async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n          response(snapshot.val());\r\n        } else {\r\n          response([]);\r\n        }\r\n      },\r\n      (err) => {\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport function attachNewMessagesListener(refVar, roomId, callback) {\r\n  let userRef = database.ref(`/chat/${AppString.ROOM_MESSAGES}/${roomId}`);\r\n  refVar = userRef.on(\r\n    \"child_added\",\r\n    async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        if (callback) {\r\n          callback(snapshot.val());\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"NotFound\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport function sendMessage1on1(\r\n  currentUserName,\r\n  currentUid,\r\n  otherUserUid,\r\n  otherUserName,\r\n  roomId,\r\n  message\r\n) {\r\n  //update your roomList with current roomName\r\n  const roomListRef = database.ref(\r\n    `/chat/${AppString.ROOMS_LIST}/${currentUid}`\r\n  );\r\n  roomListRef.update({\r\n    [roomId]: true,\r\n  });\r\n  //update members in MembersNode\r\n  // const memberNodeRef = database.ref(`/chat/${AppString.MEMBERS_LIST}/${roomId}`)\r\n  // memberNodeRef.update({\r\n  //     [currentUid]: true,\r\n  //     [otherUserUid]: true\r\n  // })\r\n  //add message in MessagesNode - {  }\r\n  const messageNodeRef = database\r\n    .ref(`/chat/${AppString.ROOM_MESSAGES}/${roomId}`)\r\n    .push();\r\n  messageNodeRef.set({\r\n    name: currentUserName,\r\n    id: currentUid,\r\n    createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n    message: message,\r\n    room: roomId,\r\n  });\r\n  //update chatRoom meta data under roomMetadataNode\r\n  let chatMetaData = {\r\n    message: message,\r\n    room: roomId,\r\n    createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n    name: currentUserName,\r\n    id: currentUid,\r\n    [currentUid]: currentUserName,\r\n    [otherUserUid]: otherUserName,\r\n    participants: [currentUid, otherUserUid],\r\n  };\r\n  const currentUserRoomMetadataNodeRef = database.ref(\r\n    `/chat/${AppString.ROOM_METADATA}/${currentUid}/${roomId}`\r\n  );\r\n  currentUserRoomMetadataNodeRef.update(chatMetaData);\r\n\r\n  const otherUserRoomMetadataNodeRef = database.ref(\r\n    `/chat/${AppString.ROOM_METADATA}/${otherUserUid}/${roomId}`\r\n  );\r\n  otherUserRoomMetadataNodeRef.update(chatMetaData);\r\n\r\n  //add notification to other usernode and remove current userNotification if any\r\n  const currentUserNotificationNode = database.ref(\r\n    `/chat/${AppString.USER_NOTIFICATION}/${currentUid}/${otherUserUid}`\r\n  );\r\n  currentUserNotificationNode.remove();\r\n\r\n  const otherUserNotificationNode = database.ref(\r\n    `/chat/${AppString.USER_NOTIFICATION}/${otherUserUid}/${currentUid}`\r\n  );\r\n  otherUserNotificationNode.update({\r\n    count: firebase.database.ServerValue.increment(1),\r\n    message: message,\r\n    roomId: roomId,\r\n    createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n    name: currentUserName,\r\n    id: currentUid,\r\n  });\r\n}\r\n\r\nexport function attachNotificationListener(refVar, userId, callback) {\r\n  let userRef = database.ref(`/chat/${AppString.USER_NOTIFICATION}/${userId}`);\r\n  refVar = userRef;\r\n  userRef.on(\r\n    \"value\",\r\n    async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        if (callback) {\r\n          callback(snapshot.val());\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"NotFound\", message: \"No notification found\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport function removeNotification(userId, otherUserUid) {\r\n  let userRef = database.ref(\r\n    `/chat/${AppString.USER_NOTIFICATION}/${userId}/${otherUserUid}`\r\n  );\r\n  userRef.remove();\r\n}\r\n\r\nexport function attachTypingIndicator(roomId, otherUserId, refVar, callback) {\r\n  let userRef = database.ref(\r\n    `/chat/${AppString.ROOM_TYPING_INDICATOR}/${roomId}/${otherUserId}`\r\n  );\r\n  refVar = userRef;\r\n  userRef.on(\r\n    \"value\",\r\n    async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        if (callback) {\r\n          callback(snapshot.val());\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"noStatus\", message: \"No Typing Status found\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport function singalTypingIndicator(roomId, userId, value) {\r\n  let userRef = database.ref(\r\n    `/chat/${AppString.ROOM_TYPING_INDICATOR}/${roomId}/`\r\n  );\r\n  userRef.update({\r\n    [userId]: value,\r\n  });\r\n}\r\n\r\nexport function attachOnDisconnectForTyping(refVar, roomId, userId) {\r\n  let userRef = database.ref(\r\n    `/chat/${AppString.ROOM_TYPING_INDICATOR}/${roomId}/`\r\n  );\r\n  let disconnectRef = userRef.onDisconnect();\r\n  disconnectRef.update({\r\n    [userId]: false,\r\n  });\r\n  refVar = disconnectRef;\r\n}\r\n\r\nexport function getUserInteractedRoom(refVar, userId, callback) {\r\n  let userRef = database\r\n    .ref(`/chat/${AppString.ROOM_METADATA}/${userId}`)\r\n    .orderByChild(`createdAt`);\r\n  refVar = userRef;\r\n  userRef.on(\r\n    \"value\",\r\n    async (snapshot) => {\r\n      // console.log(userId)\r\n      // console.log(snapshot.val())\r\n\r\n      // let result = {}\r\n      // let count = 1;\r\n      // snapshot.forEach((child) => {\r\n      //     console.log(child.key);\r\n      //     console.log(child.val());\r\n      //     result[`${count}-${child.key}`] = child.val()\r\n      //     count++;\r\n      // })\r\n\r\n      if (snapshot.exists()) {\r\n        if (callback) {\r\n          callback(snapshot.val());\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"noStatus\", message: \"No Typing Status found\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport const userOnlinePresence = (user, roomId, listenerRef) => {\r\n  let isOnlineForDatabase = {\r\n    StateMode: \"online\",\r\n  };\r\n  let userStatusDatabaseRef = database.ref(\r\n    `/chat/${AppString.INCALL_UserPresence}/${roomId}/${user.uid}`\r\n  );\r\n  let onDisconnectRef = userStatusDatabaseRef.onDisconnect();\r\n  listenerRef = onDisconnectRef;\r\n  onDisconnectRef.remove().then(() => {\r\n    userStatusDatabaseRef.set({\r\n      ...isOnlineForDatabase,\r\n      name: user.displayName ?? \"\",\r\n      id: user.uid,\r\n    });\r\n  });\r\n};\r\n\r\nexport const goOfflineInRoom = (user, roomId) => {\r\n  let userStatusDatabaseRef = database.ref(\r\n    `/chat/${AppString.INCALL_UserPresence}/${roomId}/${user.uid}`\r\n  );\r\n  userStatusDatabaseRef.remove();\r\n};\r\n\r\nexport const getOnlinPresentUserInRoom = (roomId, refVar, callback) => {\r\n  let userRef = database.ref(\r\n    `/chat/${AppString.INCALL_UserPresence}/${roomId}`\r\n  );\r\n  refVar = userRef;\r\n  userRef.on(\r\n    \"value\",\r\n    async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        if (callback) {\r\n          callback(snapshot.val());\r\n        }\r\n      } else {\r\n        if (callback) {\r\n          callback([], { code: \"NotFound\", message: \"No notification found\" });\r\n        }\r\n      }\r\n    },\r\n    (err) => {\r\n      if (callback) {\r\n        callback([], err);\r\n      }\r\n    }\r\n  );\r\n};\r\n","import firebase, { database as realDB } from \".\";\r\nimport { AppString } from \"./constant\";\r\n\r\nconst generatePushID = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n\r\n    // Timestamp of last push, used to prevent local collisions if you push twice in one ms.\r\n    var lastPushTime = 0;\r\n\r\n    // We generate 72-bits of randomness which get turned into 12 characters and appended to the\r\n    // timestamp to prevent collisions with other clients.  We store the last characters we\r\n    // generated because in the event of a collision, we'll use those same characters except\r\n    // \"incremented\" by one.\r\n    var lastRandChars = [];\r\n\r\n    return function () {\r\n        var now = new Date().getTime();\r\n        var duplicateTime = (now === lastPushTime);\r\n        lastPushTime = now;\r\n\r\n        var timeStampChars = new Array(8);\r\n        for (var i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        if (now !== 0) throw new Error('We should have converted the entire timestamp.');\r\n\r\n        var id = timeStampChars.join('');\r\n\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        } else {\r\n            // If the timestamp hasn't changed since last push, use the same random number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        if (id.length != 20) throw new Error('Length should be 20.');\r\n\r\n        return id;\r\n    };\r\n})();\r\n\r\nexport const getMessageVideoChat = (roomId, page, limit = 20, offset = 0) => {\r\n    return new Promise(async (res, rej) => {\r\n        try {\r\n            let path = `chat/${AppString.ROOM_MESSAGES}/${roomId}/`\r\n            // console.log(path)\r\n            var msgRef = realDB.ref(path).orderByChild('createdAt',).limitToLast(page * limit + limit)\r\n            const snapshot = await msgRef.once('value')\r\n            if (!snapshot.exists()) {\r\n                let error = { code: 'NoMsg', message: 'no message ' }\r\n                throw (error)\r\n            }\r\n            let arr = []\r\n            snapshot.forEach(function (child) {\r\n                arr.push(child.val())\r\n            });\r\n            // console.log(arr, arr.length, page * limit, page * limit + limit);\r\n            // console.log(offset)\r\n            arr = arr.reverse();\r\n            arr = arr.slice((page * limit) + offset, (page * limit) + limit + offset);\r\n            arr = arr.reverse();\r\n            // arr = arr.slice(0, limit);\r\n            // console.log(arr)\r\n            res(arr)\r\n        } catch (error) {\r\n            rej(error)\r\n        }\r\n    })\r\n}\r\n\r\nexport const getMessageListenerVideoChat = (roomId, callback) => {\r\n    try {\r\n        let path = `chat/${AppString.ROOM_MESSAGES}/${roomId}/`\r\n        var msgRef = realDB.ref(path).orderByChild('createdAt').limitToLast(1)\r\n        msgRef.on('child_added', (data) => {\r\n            if (callback) {\r\n                callback(null, data.val())\r\n            }\r\n        });\r\n    } catch (error) {\r\n        if (callback) {\r\n            callback(error)\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendMessageVideoChat = (message) => {\r\n    return new Promise(async (res, rej) => {\r\n        try {\r\n            let uniquerId = generatePushID()\r\n            const newMessage = {\r\n                ...message,\r\n                createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n                msgKey: uniquerId,\r\n            }\r\n            var msgRef = realDB.ref(`chat/${AppString.ROOM_MESSAGES}/${message.room}/${uniquerId}`)\r\n            await msgRef.set(newMessage)\r\n\r\n            const currentRoomMetadataNodeRef = realDB.ref(`/chat/${AppString.ROOM_METADATA}/${message.room}`)\r\n            currentRoomMetadataNodeRef.update(newMessage)\r\n            res()\r\n        } catch (error) {\r\n            rej(error)\r\n        }\r\n    })\r\n}\r\n\r\nexport function attachPublicChatListener(refVar, roomId, callback) {\r\n    let userRef = realDB.ref(`/chat/${AppString.ROOM_METADATA}/${roomId}`)\r\n    refVar = userRef\r\n    userRef.on(\"value\", async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            if (callback) {\r\n                callback(snapshot.val())\r\n            }\r\n        } else {\r\n            if (callback) {\r\n                callback([], { code: \"NotFound\", message: \"No Chat found\" })\r\n            }\r\n        }\r\n    }, err => {\r\n        if (callback) {\r\n            callback([], err)\r\n        }\r\n    })\r\n}","export const AvatarStyle = [\"user-profile__image--red\", \"user-profile__image--green\", \" \"]\r\nexport const ChatTextStyle = [\"chat-user-title--red\", \"chat-user-title--green\", \" \"]\r\nexport const UserIconStyle = [\"user-icon2\", \"user-icon3\", \" \"]\r\nexport const LOREM_TEXT = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip.\"\r\n\r\nexport function getInitals(name) {\r\n    let result = \"\"\r\n    let nameArr = name.trim().split(\" \")\r\n    if (nameArr.length > 0) {\r\n        nameArr.forEach(element => {\r\n            result += element[0]\r\n        });\r\n    } else {\r\n        result = name[0]\r\n    }\r\n    return result.toUpperCase()\r\n}\r\n\r\nexport const sortObjectArray = (arr, key) => {\r\n    const sorter = (a, b) => {\r\n        return b[key] - a[key]\r\n    }\r\n    arr.sort(sorter);\r\n};","import React, { createContext, useState, useEffect } from \"react\";\r\nimport { auth, login, updateName } from \"../../Firebase\";\r\nimport {\r\n  getUserDetails,\r\n  UpdateUserTable,\r\n  user_ActiveStatus,\r\n} from \"../../Firebase/chatManager\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport default function UserContextProvider(props) {\r\n  const [user, setUser] = useState(\r\n    JSON.parse(localStorage.getItem(\"userAuth\"))\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.parent.loginUser = (email, password) => {\r\n      login(email, password);\r\n    };\r\n    auth.onAuthStateChanged(async (user) => {\r\n      if (user) {\r\n        console.log(user.email, user.displayName);\r\n        localStorage.setItem(\"userAuth\", JSON.stringify(user));\r\n        const userOtherData = await getUserDetails(user);\r\n        await UpdateUserTable({ ...user, ...userOtherData });\r\n        user_ActiveStatus({ ...user, ...userOtherData });\r\n        setUser({ ...user, isChecked: true });\r\n        // updateName(user,\"Siddharth Vyas\")\r\n      } else {\r\n        localStorage.removeItem(\"userAuth\");\r\n        setUser(null);\r\n        // login(\"shubham@dj.com\", \"up14y7434\")\r\n        // login(\"testuser1@chat.com\",\"up14y7434\")\r\n        // login(\"testuser2@chat.com\",\"up14y7434\")\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user }}>\r\n      {props.children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n","import { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { firestore } from \"../Firebase\";\r\nimport { UserContext } from \"./Auth/UserContextProvider\";\r\n\r\nexport const UIContext = createContext();\r\n\r\nexport const MenuStates = {\r\n    participants: 0,\r\n    publicChat: 1,\r\n    polls: 2,\r\n    notification: 3,\r\n};\r\n\r\nexport const UIContextProvider = (props) => {\r\n    const { user } = useContext(UserContext)\r\n    const [activeMenu, setActiveMenu] = useState(MenuStates.participants);\r\n    const [hidePoll, setHidePoll] = useState(true)\r\n    const [isPollAdmin, setPollAdmin] = useState(false)\r\n    const userColorClassRecord = useRef(localStorage.getItem(\"participantColor\") ? JSON.parse(localStorage.getItem(\"participantColor\")) : {})\r\n\r\n\r\n    useEffect(() => {\r\n        const urlQuery = new URLSearchParams(window.location.search);\r\n        let showPoll = urlQuery.get(\"showPoll\");\r\n        if (showPoll === \"true\") {\r\n            setHidePoll(false)\r\n        }\r\n\r\n        // let publicRoomURl = urlQuery.get(\"publicRoom\");\r\n        // if (publicRoomURl) {\r\n        //     setPublicRoom(publicRoomURl)\r\n        // }\r\n\r\n        let pollAdmin = urlQuery.get(\"pollAdmin\");\r\n        if (pollAdmin === \"true\") {\r\n            setPollAdmin(true)\r\n        } else {\r\n            // setPollAdmin(false)\r\n        }\r\n\r\n        // let videoCall = urlQuery.get(\"videoCall\");\r\n        // if (videoCall === \"true\") {\r\n        //     setHidePoll(false)\r\n        // } else {\r\n\r\n        // }\r\n\r\n    }, [])\r\n\r\n\r\n    const getParticipantColorNumber = (id) => {\r\n        // console.log(id)\r\n        let mainObject = userColorClassRecord.current\r\n        if (!mainObject.hasOwnProperty(id)) {\r\n            let val = Math.floor(Math.random() * 3)\r\n            mainObject[id] = val\r\n            localStorage.setItem(\"participantColor\", JSON.stringify(userColorClassRecord.current))\r\n        }\r\n        return mainObject[id]\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <UIContext.Provider value={{ activeMenu, setActiveMenu, hidePoll, isPollAdmin, getParticipantColorNumber }}>\r\n            {props.children}\r\n        </UIContext.Provider>\r\n    )\r\n}\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  attachNotificationListener,\r\n  getAllParticipants,\r\n  getOnlineUsers,\r\n  getOnlinPresentUserInRoom,\r\n  getRoomIdWithUser,\r\n  getUserInteractedRoom,\r\n  goOfflineInRoom,\r\n  userOnlinePresence,\r\n} from \"../../Firebase/chatManager\";\r\nimport { attachPublicChatListener } from \"../../Firebase/publicChatManager\";\r\nimport { sortObjectArray } from \"../../Utility\";\r\nimport { UserContext } from \"../Auth/UserContextProvider\";\r\nimport { UIContext } from \"../UIContextProvider\";\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport default function ChatContextProvider(props) {\r\n  const { user } = useContext(UserContext);\r\n  const [onlineUserslist, setOnlineUserslist] = useState({});\r\n  const [allParticipantList, setAllParticipantList] = useState({});\r\n  const [activeRoom, setActiveRoom] = useState(null);\r\n  const [unseenMessageMetaData, setUnseenMessageMetaData] = useState({});\r\n  const [userLastInteractedRoom, setUserLastInteractedRoom] = useState(null);\r\n  const [publicNotification, setPublicNotification] = useState({\r\n    status: false,\r\n    data: null,\r\n  });\r\n\r\n  const [incallChatActive, setIncallChatActive] = useState({\r\n    status: false,\r\n    roomId: \"\",\r\n    roomName: \"\",\r\n  });\r\n  const [showInCallChat, setShowInCallChat] = useState(false);\r\n\r\n  const [publicRoomName, setPublicRoom] = useState(\"public-room-test\");\r\n  // const [publicRoomName, setPublicRoom] = useState(\"call-room-test\")//callchat\r\n  const [rawUserData, setRawUserData] = useState({});\r\n  const notificationListenerRef = useRef(null);\r\n  const userInteractedRoomRef = useRef(null);\r\n  const PublicChatListenerRef = useRef(null);\r\n\r\n  const InCallPresenceListenerRef = useRef(null);\r\n  const InCallOnlineUserListenerRef = useRef(null);\r\n  const InCallRoomValueRef = useRef(null);\r\n  const [inCallRoomParticipantList, setInCallRoomParticipantList] = useState(\r\n    {}\r\n  );\r\n\r\n  const { activeMenu } = useContext(UIContext);\r\n  const activeMenuRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    activeMenuRef.current = activeMenu;\r\n  }, [activeMenu]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      window.parent.toggleIncallChat = (\r\n        value,\r\n        roomId = \"test-incallChat\",\r\n        roomName = \"In Call Messages\"\r\n      ) => {\r\n        setIncallChatActive({\r\n          status: value,\r\n          roomId: roomId,\r\n          roomName: roomName,\r\n        });\r\n        if (value) {\r\n          InCallRoomValueRef.current = roomId;\r\n          setShowInCallChat(true);\r\n          //attach participant Listener\r\n          getOnlinPresentUserInRoom(\r\n            roomId,\r\n            InCallOnlineUserListenerRef.current,\r\n            (data, err) => {\r\n              if (err) {\r\n                console.error(\"Error in loading online users\");\r\n                console.error(err);\r\n                return;\r\n              }\r\n              console.log(data);\r\n              setInCallRoomParticipantList(data);\r\n            }\r\n          );\r\n          //add disconnect Listener\r\n          userOnlinePresence(user, roomId, InCallPresenceListenerRef.current);\r\n        } else {\r\n          setShowInCallChat(false);\r\n          if (InCallOnlineUserListenerRef.current) {\r\n            InCallOnlineUserListenerRef.current.off();\r\n          }\r\n          if (InCallPresenceListenerRef.current) {\r\n            InCallPresenceListenerRef.current.cancel();\r\n          }\r\n          if (InCallRoomValueRef.current) {\r\n            goOfflineInRoom(user, InCallRoomValueRef.current);\r\n            InCallRoomValueRef.current = null;\r\n          }\r\n          setInCallRoomParticipantList({});\r\n        }\r\n      };\r\n      let attachListenerPublic = (roomId) => {\r\n        attachPublicChatListener(PublicChatListenerRef, roomId, (data, err) => {\r\n          if (err) {\r\n            if (err.code === \"NotFound\") {\r\n              console.error(\"\");\r\n              console.error(err);\r\n            }\r\n            return;\r\n          }\r\n          // console.log(data)\r\n          // console.log(user)\r\n          // console.log(activeMenuRef.current)\r\n          if (activeMenuRef.current !== 1 && data.userId !== user.uid) {\r\n            setPublicNotification({ status: true, data });\r\n            if (window.parent.notification) {\r\n              window.parent.notification({\r\n                type: \"publicChat\",\r\n                senderId: data.userId,\r\n                senderName: data.userName,\r\n                message: data.message,\r\n                room: data.room,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      };\r\n      const urlQuery = new URLSearchParams(window.location.search);\r\n      let publicRoomURl = urlQuery.get(\"publicRoom\");\r\n      if (publicRoomURl) {\r\n        setPublicRoom(publicRoomURl);\r\n        //attachListener\r\n        attachListenerPublic(publicRoomURl);\r\n      } else {\r\n        //attachListener\r\n        attachListenerPublic(publicRoomName);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (InCallPresenceListenerRef.current) {\r\n        InCallPresenceListenerRef.current.cancel();\r\n      }\r\n    };\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user && user.isChecked) {\r\n      //read room name user have interacted\r\n      attachNotificationListener(\r\n        notificationListenerRef.current,\r\n        user.uid,\r\n        (data, err) => {\r\n          if (err) {\r\n            if (err.code === \"NotFound\") {\r\n              setUnseenMessageMetaData({});\r\n            } else {\r\n              console.error(err);\r\n            }\r\n            return;\r\n          }\r\n          // console.log(data)\r\n          setUnseenMessageMetaData(data);\r\n\r\n          if (window.parent.notification) {\r\n            let result = [];\r\n            Object.keys(data).forEach((userId) => {\r\n              result.push({\r\n                ...data[userId],\r\n                userId: userId,\r\n              });\r\n            });\r\n\r\n            if (result.length > 0) {\r\n              sortObjectArray(result, \"createdAt\");\r\n              let details = {\r\n                type: \"privateChat\",\r\n                senderId: result[0].userId,\r\n                senderName: result[0].name ?? \"Participant\",\r\n                message: result[0].message,\r\n                room: result[0].roomId,\r\n                count: result[0].count,\r\n              };\r\n              // console.log(details)\r\n              if (window.parent.notification) {\r\n                window.parent.notification(details);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      );\r\n\r\n      getUserInteractedRoom(\r\n        userInteractedRoomRef.current,\r\n        user.uid,\r\n        (data, err) => {\r\n          if (err) {\r\n            console.error(err);\r\n            return;\r\n          }\r\n          // console.log(data)\r\n          let result = [];\r\n          Object.keys(data).forEach((roomid) => {\r\n            let roomDetails = data[roomid];\r\n            // console.log(roomDetails)\r\n            let otherParticipantId = roomDetails.participants.filter(\r\n              (id) => id !== user.uid\r\n            )[0];\r\n            if (otherParticipantId) {\r\n              let otherParticipantName = roomDetails[otherParticipantId];\r\n              result.push({\r\n                otherParticipant: {\r\n                  id: otherParticipantId,\r\n                  name: otherParticipantName,\r\n                },\r\n                createdAt: roomDetails.createdAt,\r\n                message: roomDetails.message,\r\n                senderName: roomDetails.name,\r\n                senderId: roomDetails.id,\r\n              });\r\n            }\r\n          });\r\n          sortObjectArray(result, \"createdAt\");\r\n          // console.log(result)\r\n          if (result.length > 5) {\r\n            let newResult = [\r\n              result[0],\r\n              result[1],\r\n              result[2],\r\n              result[3],\r\n              result[4],\r\n            ];\r\n            setUserLastInteractedRoom(newResult);\r\n          } else {\r\n            setUserLastInteractedRoom(result);\r\n          }\r\n        }\r\n      );\r\n      //read online users list\r\n      getOnlineUsers((data, err) => {\r\n        if (err) {\r\n          console.error(\"Error in loading online users\");\r\n          console.error(err);\r\n          return;\r\n        }\r\n        console.log(data);\r\n        setOnlineUserslist(data);\r\n      });\r\n\r\n      //AllParticipant\r\n      getAllParticipants((data, err) => {\r\n        if (err) {\r\n          console.error(\"Error in loading online users\");\r\n          console.error(err);\r\n          return;\r\n        }\r\n        setAllParticipantList(data.result);\r\n        setRawUserData(data.rawData);\r\n      });\r\n    }\r\n    return () => {\r\n      if (notificationListenerRef.current) {\r\n        notificationListenerRef.current.off();\r\n      }\r\n    };\r\n  }, [user]);\r\n\r\n  const openChatWithUser = async (userData) => {\r\n    //open the room\r\n    let roomId = getRoomIdWithUser(user.uid, userData.id);\r\n    setActiveRoom({\r\n      roomId: roomId,\r\n      participant: userData,\r\n    });\r\n  };\r\n\r\n  const closePreviousChatRoom = () => {\r\n    setActiveRoom(null);\r\n  };\r\n\r\n  // const removeNotification = (uid) => {\r\n  //     delete unseenMessageMetaData[uid]\r\n  //     setUnseenMessageMetaData(uid)\r\n  // }\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        onlineUserslist,\r\n        openChatWithUser,\r\n        activeRoom,\r\n        closePreviousChatRoom,\r\n        unseenMessageMetaData,\r\n        userLastInteractedRoom,\r\n        allParticipantList,\r\n        publicRoomName,\r\n        publicNotification,\r\n        setPublicNotification,\r\n        incallChatActive,\r\n        showInCallChat,\r\n        setShowInCallChat,\r\n        inCallRoomParticipantList,\r\n        rawUserData,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ChatContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport { MenuStates, UIContext } from '../../Context/UIContextProvider'\r\n\r\nexport default function Menu() {\r\n    const { activeMenu, setActiveMenu, hidePoll, isPollAdmin } = useContext(UIContext);\r\n    const { publicNotification, setPublicNotification } = useContext(ChatContext)\r\n    return (\r\n        <ul className=\"sidebar__tabs\">\r\n            <li onClick={() => setActiveMenu(MenuStates.participants)}>\r\n                <a\r\n                    className={activeMenu === MenuStates.participants ? \"active\" : \"\"}\r\n                    href=\"#\"\r\n                >\r\n                    <i className=\"icon-people\"></i> Participants\r\n                </a>\r\n            </li>\r\n            <li onClick={() => {\r\n                setPublicNotification({\r\n                    status: false,\r\n                    data: null\r\n                })\r\n                setActiveMenu(MenuStates.publicChat)\r\n            }}>\r\n                <a className={`${activeMenu === MenuStates.publicChat ? \"active\" : \"\"}`} href=\"#\"><i className={`${publicNotification.status ? \"menu-notification\" : \"\"} icon-chat`}></i> Public Chat</a>\r\n            </li>\r\n\r\n            {!hidePoll && (\r\n                <li onClick={() => setActiveMenu(MenuStates.polls)}>\r\n                    <a\r\n                        className={activeMenu === MenuStates.polls ? \"active\" : \"\"}\r\n                        href=\"#\"\r\n                    >\r\n                        <i className=\"icon-polls\"></i> Polls\r\n                    </a>\r\n                </li>\r\n            )}\r\n            {\r\n                !hidePoll && isPollAdmin &&\r\n                <li onClick={() => setActiveMenu(MenuStates.notification)}>\r\n                    <a className={activeMenu === MenuStates.notification ? \"active\" : \"\"} href=\"#\">\r\n                        <i className=\"icon-polls\"></i> Notification\r\n                    </a>\r\n                </li>\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n","import React, { useContext, useRef } from \"react\";\r\nimport { UIContext } from \"../../Context/UIContextProvider\";\r\nimport { ChatTextStyle, getInitals, UserIconStyle } from \"../../Utility\";\r\n\r\nconst Message = ({ name, message, userId, time, userSubTitle }) => {\r\n  const { getParticipantColorNumber } = useContext(UIContext);\r\n\r\n  // const initals = useRef(getInitals(name))\r\n  const avartStyleRandom = useRef(getParticipantColorNumber(userId));\r\n\r\n  return (\r\n    <div className=\"chat-section__text\">\r\n      {/* <div className=\"chat-section__text-header\">\r\n                <div className={`user-icon ${UserIconStyle[avartStyleRandom.current]} `}>{initals.current}</div>\r\n                <div>\r\n                    <h3>{name}</h3>\r\n                </div>\r\n            </div> */}\r\n      <div className=\"chat-section__text-body\">\r\n        <h3\r\n          className={`chat-user-title ${\r\n            ChatTextStyle[avartStyleRandom.current]\r\n          } `}\r\n        >\r\n          {name}\r\n        </h3>\r\n        <h4>{userSubTitle ? userSubTitle : \"\"}</h4>\r\n        <p>{message}</p>\r\n        <p className=\"chat-time\">\r\n          <small>\r\n            {time &&\r\n              new Date(time).toLocaleTimeString(\"en-US\", {\r\n                timeStyle: \"short\",\r\n              })}\r\n          </small>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ReceivedMsg = React.memo(\r\n  ({ name, message, userId, time, userSubTitle }) => {\r\n    return (\r\n      <div className=\"chat-section__message chat-section__message--received\">\r\n        <Message\r\n          name={name}\r\n          message={message}\r\n          userId={userId}\r\n          time={time}\r\n          userSubTitle={userSubTitle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport const SentMsg = React.memo(\r\n  ({ name, message, userId, time, userSubTitle }) => {\r\n    return (\r\n      <div className=\"chat-section__message chat-section__message--sent\">\r\n        <Message\r\n          name={name}\r\n          message={message}\r\n          userId={userId}\r\n          time={time}\r\n          userSubTitle={userSubTitle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","export default __webpack_public_path__ + \"static/media/arrow.4ad046c7.svg\";","import React, { Component } from \"react\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport {\r\n  getMessageListenerVideoChat,\r\n  getMessageVideoChat,\r\n  sendMessageVideoChat,\r\n} from \"../../Firebase/publicChatManager\";\r\nimport { ReceivedMsg, SentMsg } from \"../Messages\";\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\";\r\n\r\nclass PublicChat extends Component {\r\n  state = {\r\n    messages: [],\r\n    listenerCounter: 0,\r\n    scrollProgress: false,\r\n    allowScrolling: false,\r\n    pageSize: 500,\r\n    pageNumber: 0,\r\n    initialScrollDone: false,\r\n    shouldAutoScroll: true,\r\n    firstTime: true,\r\n    typedMessage: \"\",\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.messageDiv = React.createRef();\r\n  }\r\n  inputRef = React.createRef();\r\n  handleScroll = () => {\r\n    if (\r\n      this.messageDiv.current.scrollHeight - this.messageDiv.current.scrollTop >\r\n      2 * this.messageDiv.current.clientHeight\r\n    ) {\r\n      this.setState({ shouldAutoScroll: false });\r\n      // console.log(\"shouldAutoScroll false\")\r\n    } else {\r\n      this.setState({ shouldAutoScroll: true });\r\n      // console.log(\"shouldAutoScroll true\")\r\n    }\r\n\r\n    if (\r\n      this.messageDiv.current &&\r\n      this.messageDiv.current.offsetTop > this.messageDiv.current.scrollTop\r\n    ) {\r\n      if (this.state.allowScrolling && this.state.scrollProgress == false) {\r\n        // console.log(\"scroll\")\r\n        this.setState({ scrollProgress: true });\r\n        this.loadMessages();\r\n      }\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.messageDiv.current.removeEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n    this.loadMessages();\r\n    getMessageListenerVideoChat(this.props.room.roomId, (err, message) => {\r\n      //first argument is for checking error and second one contain message\r\n      if (message != null) {\r\n        let messages = this.state.messages;\r\n        messages.push(message);\r\n        this.setState({ messages: messages });\r\n        this.setState({ listenerCounter: this.state.listenerCounter + 1 });\r\n        this.scroll();\r\n\r\n        if (this.props.showNotification) {\r\n          if (message.userId != this.props.user.email) {\r\n            this.props.showNotification(true);\r\n          } else {\r\n            this.props.showNotification(false);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.scroll();\r\n    });\r\n  }\r\n\r\n  loadMessages = () => {\r\n    getMessageVideoChat(\r\n      this.props.room.roomId,\r\n      this.state.pageNumber,\r\n      this.state.pageSize,\r\n      this.state.listenerCounter\r\n    )\r\n      .then((messages) => {\r\n        const previousMessages = this.state.messages;\r\n\r\n        // if (previousMessages.length >= 0 && messages.length >= 0 && previousMessages[previousMessages.length - 1].id == messages[0].id) {\r\n        //     messages.shift();\r\n        // }\r\n        if (\r\n          previousMessages.length >= 0 &&\r\n          messages.length >= 0 &&\r\n          messages[messages.length - 1].id == previousMessages[0].id\r\n        ) {\r\n          messages.pop();\r\n        }\r\n\r\n        const newMessages = [...messages, ...previousMessages];\r\n\r\n        // console.log(newMessages)\r\n\r\n        this.setState({ messages: newMessages });\r\n        // console.log(this.state.pageNumber)\r\n\r\n        if (messages.length >= this.state.pageSize) {\r\n          // console.log(\"messages.length \" + messages.length)\r\n          this.setState({ pageNumber: this.state.pageNumber + 1 });\r\n          this.setState({ allowScrolling: true });\r\n        } else {\r\n          this.setState({ allowScrolling: false });\r\n          this.setState({ pageNumber: this.state.pageNumber - 1 });\r\n        }\r\n\r\n        this.setState({ scrollProgress: false });\r\n        this.scroll();\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ scrollProgress: false });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps, nextContext) {\r\n    if (nextProps.activeSideMenu) {\r\n      this.scroll();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (!this.state.initialScrollDone) {\r\n      this.scroll();\r\n      this.setState({ initialScrollDone: true });\r\n    }\r\n  }\r\n\r\n  uuid4 = () => {\r\n    let array = new Uint8Array(16);\r\n    crypto.getRandomValues(array);\r\n\r\n    // manipulate 9th byte\r\n    array[8] &= 0b00111111; // clear first two bits\r\n    array[8] |= 0b10000000; // set first two bits to 10\r\n\r\n    // manipulate 7th byte\r\n    array[6] &= 0b00001111; // clear first four bits\r\n    array[6] |= 0b01000000; // set first four bits to 0100\r\n\r\n    const pattern = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\r\n    let idx = 0;\r\n\r\n    return pattern.replace(\r\n      /XX/g,\r\n      () => array[idx++].toString(16).padStart(2, \"0\") // padStart ensures leading zero, if needed\r\n    );\r\n  };\r\n\r\n  scroll = () => {\r\n    // console.log(\"scroll\")\r\n    setTimeout(() => {\r\n      if (\r\n        this.messageDiv &&\r\n        this.messageDiv.current &&\r\n        this.state.shouldAutoScroll\r\n      ) {\r\n        const scrollHeight = this.messageDiv.current.scrollHeight;\r\n        const height = this.messageDiv.current.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.messageDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n        // if(this.props.showNotification)\r\n        // {\r\n        //     this.props.showNotification(false);\r\n        // }\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  onSendMessageClick = (event) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let messageData = {\r\n      id: this.uuid4(),\r\n      room: this.props.room.roomId,\r\n      userId: this.context.user.uid,\r\n      userName: this.context.user.displayName,\r\n      message: this.state.typedMessage,\r\n    };\r\n\r\n    sendMessageVideoChat(messageData)\r\n      .then((value) => {\r\n        this.scroll();\r\n        this.setState({\r\n          typedMessage: \"\",\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar__body\">\r\n        <div className=\"chat-section\">\r\n          {\r\n            this.props.showHeader ? this.props.children : null\r\n            // <div className=\"chat-header\" onClick={this.props.onbackClick}>\r\n            //     <img src={arrowSvg} alt=\"arrowSvg\" />\r\n            //     <div className=\"user-profile\">\r\n            //         <span className=\"user-profile__title\">\r\n            //             {this.props.roomName}\r\n            //         </span>\r\n            //     </div>\r\n            // </div>\r\n          }\r\n\r\n          <div ref={this.messageDiv} className=\"chat-section__body\">\r\n            {this.state.messages.map((value, pos) => {\r\n              if (value.userId === this.context.user.uid) {\r\n                return (\r\n                  <SentMsg\r\n                    userSubTitle={`${\r\n                      this.props.rawUserData[value.userId].designation\r\n                    }, ${this.props.rawUserData[value.userId].company}`}\r\n                    key={pos}\r\n                    userId={value.userId}\r\n                    time={value.createdAt}\r\n                    name={value.userName}\r\n                    message={value.message}\r\n                  />\r\n                );\r\n              } else {\r\n                return (\r\n                  <ReceivedMsg\r\n                    userSubTitle={`${\r\n                      this.props.rawUserData[value.userId].designation\r\n                    }, ${this.props.rawUserData[value.userId].company}`}\r\n                    key={pos}\r\n                    userId={value.userId}\r\n                    time={value.createdAt}\r\n                    name={value.userName}\r\n                    message={value.message}\r\n                  />\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n          <div className=\"chat-section__footer\">\r\n            <div className=\"chat-section__form\">\r\n              <form onSubmit={this.onSendMessageClick}>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"chat-section__input\"\r\n                  placeholder=\"Write here\"\r\n                  value={this.state.typedMessage}\r\n                  onChange={(e) =>\r\n                    this.setState({\r\n                      typedMessage: e.target.value,\r\n                    })\r\n                  }\r\n                  ref={this.inputRef}\r\n                ></input>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"chat-section__btn \"\r\n                  disabled={this.state.typedMessage.length === 0}\r\n                >\r\n                  <i className=\"icon-send\"></i>\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPublicChat.contextType = UserContext;\r\nexport default PublicChat;\r\n","import React, { useContext, useMemo, useRef } from 'react'\r\nimport { UIContext } from '../../Context/UIContextProvider'\r\nimport PublicChat from '../PublicChat/PublicChat'\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\"\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport { AvatarStyle, getInitals } from '../../Utility'\r\nimport Tooltip from 'rc-tooltip';\r\nimport 'rc-tooltip/assets/bootstrap_white.css'\r\n\r\nconst InCallChatHeader = (props) => {\r\n    const { incallChatActive, setShowInCallChat, inCallRoomParticipantList } = useContext(ChatContext)\r\n\r\n    let count = useMemo(() => Object.keys(inCallRoomParticipantList).length, [inCallRoomParticipantList])\r\n    const { getParticipantColorNumber } = useContext(UIContext)\r\n    \r\n    return (\r\n        <div className=\"chat-header\" onClick={props.onbackClick}>\r\n            <img src={arrowSvg} alt=\"arrowSvg\" />\r\n            <div className=\"user-profile\">\r\n                <span className=\"user-profile__title\">\r\n                    {props.roomName}\r\n                    <small>\r\n                        {\r\n                            count > 0 && `${count} active`\r\n                        }\r\n                    </small>\r\n                </span>\r\n            </div>\r\n            <div className=\"headerMemberList-container\">\r\n                {\r\n                    Object.values(inCallRoomParticipantList).map(user => (\r\n                        <Tooltip id=\"listMemberTooltip\" placement=\"bottom\" trigger={['hover']} overlay={<span >{user.name.toLowerCase()}</span>}>\r\n                            <span className={`user-profile__image ${AvatarStyle[getParticipantColorNumber(user.id)]} headerMemberList`} >{getInitals(user.name)}</span>\r\n                        </Tooltip>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function IncallChat() {\r\n\r\n    const { incallChatActive, setShowInCallChat, inCallRoomParticipantList } = useContext(ChatContext)\r\n\r\n    const onbackClick = (e) => {\r\n        if (e) {\r\n            e.preventDefault()\r\n        }\r\n        setShowInCallChat(false)\r\n    }\r\n\r\n    return (\r\n        <PublicChat room={{ roomId: incallChatActive.roomId }} showHeader={true}  >\r\n            <InCallChatHeader roomName={incallChatActive.roomName} onbackClick={onbackClick} />\r\n        </PublicChat>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <div className=\"sidebar__body loaderContainer\">\r\n            <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useRef } from \"react\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { ChatContext } from \"../../Context/Chat/ChatContextProvider\";\r\nimport { UIContext } from \"../../Context/UIContextProvider\";\r\nimport { AvatarStyle, getInitals } from \"../../Utility\";\r\nimport IncallChat from \"../IncallChat/IncallChat\";\r\nimport \"./index.css\";\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nconst defaultUserRole = \"Participant\";\r\n\r\nconst UserTile = ({ user, role, notification }) => {\r\n  const { openChatWithUser, onlineUserslist } = useContext(ChatContext);\r\n  const { getParticipantColorNumber } = useContext(UIContext);\r\n\r\n  const initals = useRef(getInitals(user.name));\r\n  const avartStyleRandom = useRef(getParticipantColorNumber(user.id));\r\n\r\n  const getDotStyle = () => {\r\n    if (notification) {\r\n      return \"user-notification\";\r\n    } else if (onlineUserslist.hasOwnProperty(user.id)) {\r\n      return \"user-notification user-online-dot\";\r\n    } else {\r\n      return \"user-notification user-offline-dot\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"user-profile\"\r\n      onClick={() => {\r\n        console.log(user);\r\n        openChatWithUser(user);\r\n      }}\r\n    >\r\n      <span\r\n        className={`user-profile__image  ${getDotStyle()} ${\r\n          AvatarStyle[avartStyleRandom.current]\r\n        }`}\r\n      >\r\n        {initals.current}\r\n      </span>\r\n      <span className=\"user-profile__title\">\r\n        <b> {user.name.toLowerCase()}</b>\r\n        <small>{`${user.designation}, ${user.company}`}</small>\r\n      </span>\r\n      {notification && (\r\n        <span\r\n          className={`notification_count ${\r\n            AvatarStyle[avartStyleRandom.current]\r\n          }`}\r\n        >\r\n          {notification.count}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UsersSection = ({ heading, role, userList }) => {\r\n  const { user } = useContext(UserContext);\r\n  const { unseenMessageMetaData } = useContext(ChatContext);\r\n\r\n  return (\r\n    <>\r\n      {heading && <h2 className=\"sidebar__title\">{heading}</h2>}\r\n      <ul className=\"sidebar__menu\">\r\n        {Object.keys(userList).map((userId) => {\r\n          if (userList[userId].id !== user.uid && userList[userId].name) {\r\n            return (\r\n              <li key={userList[userId].id + \"--li\"}>\r\n                <UserTile\r\n                  key={userList[userId].id}\r\n                  user={userList[userId]}\r\n                  role={role}\r\n                  notification={unseenMessageMetaData[userId]}\r\n                />\r\n              </li>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction getTrimedMessage(\r\n  sendId,\r\n  senderName,\r\n  currentUserId,\r\n  message,\r\n  limit = 40\r\n) {\r\n  if (!message) {\r\n    return \"\";\r\n  }\r\n  let result = \"\";\r\n  if (sendId === currentUserId) {\r\n    result = \"me: \";\r\n  } else {\r\n    result = senderName.toLowerCase() + \": \";\r\n  }\r\n  if (message.length > limit) {\r\n    result += message.substr(0, limit) + \"...\";\r\n  } else {\r\n    result += message;\r\n  }\r\n  return result;\r\n}\r\n\r\nconst RecentMessageSection = ({ heading, role, recentList }) => {\r\n  const { user } = useContext(UserContext);\r\n  const { unseenMessageMetaData, rawUserData } = useContext(ChatContext);\r\n  return (\r\n    <>\r\n      {heading && <h2 className=\"sidebar__title\">{heading}</h2>}\r\n      <ul className=\"sidebar__menu\">\r\n        {recentList.map((recentMsg) => (\r\n          <>\r\n            {recentMsg.otherParticipant.id && recentMsg.otherParticipant.name && (\r\n              <li key={recentMsg.otherParticipant.id + \"recent--li\"}>\r\n                <UserTile\r\n                  key={recentMsg.otherParticipant.id + \"recent\"}\r\n                  user={\r\n                    rawUserData[recentMsg.otherParticipant.id]\r\n                      ? rawUserData[recentMsg.otherParticipant.id]\r\n                      : recentMsg.otherParticipant\r\n                  }\r\n                  role={getTrimedMessage(\r\n                    recentMsg.senderId,\r\n                    recentMsg.senderName,\r\n                    user.uid,\r\n                    recentMsg.message\r\n                  )}\r\n                  notification={\r\n                    unseenMessageMetaData[recentMsg.otherParticipant.id]\r\n                  }\r\n                />\r\n              </li>\r\n            )}\r\n          </>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function Participants() {\r\n  const {\r\n    onlineUserslist,\r\n    userLastInteractedRoom,\r\n    allParticipantList,\r\n    incallChatActive,\r\n    showInCallChat,\r\n    setShowInCallChat,\r\n  } = useContext(ChatContext);\r\n  return (\r\n    <>\r\n      {showInCallChat && incallChatActive.status && incallChatActive.roomId && (\r\n        <IncallChat />\r\n      )}\r\n      {!showInCallChat && (\r\n        <div className=\"sidebar__body\">\r\n          {incallChatActive.status && incallChatActive.roomId && (\r\n            <div\r\n              className=\"chat-header\"\r\n              onClick={() => setShowInCallChat(true)}\r\n            >\r\n              <div className=\"user-profile\">\r\n                <span className=\"user-profile__title\">In Call Messages</span>\r\n              </div>\r\n              <img className=\"enterArrow\" src={arrowSvg} alt=\"arrowSvg\" />\r\n            </div>\r\n          )}\r\n          {userLastInteractedRoom && (\r\n            <RecentMessageSection\r\n              heading={`Recent (${userLastInteractedRoom.length})`}\r\n              role=\"Participant\"\r\n              recentList={userLastInteractedRoom}\r\n            />\r\n          )}\r\n          {\r\n            Object.keys(onlineUserslist).length > 1 ? (\r\n              <UsersSection\r\n                heading={\r\n                  onlineUserslist\r\n                    ? `Online  (${Object.keys(onlineUserslist).length - 1})`\r\n                    : \"\"\r\n                }\r\n                role=\"Participant\"\r\n                userList={onlineUserslist}\r\n              />\r\n            ) : // <UsersSection heading={onlineUserslist ? \"In Call\" : ''} role=\"Participant\" userList={onlineUserslist} />\r\n            null\r\n            //<Loader />\r\n          }\r\n          {Object.keys(allParticipantList).length > 0 && (\r\n            <UsersSection\r\n              heading={\r\n                allParticipantList\r\n                  ? `All Participants (${\r\n                      Object.keys(allParticipantList).length - 1\r\n                    })`\r\n                  : \"\"\r\n              }\r\n              role=\"Participant\"\r\n              userList={allParticipantList}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { ChatContext } from \"../../Context/Chat/ChatContextProvider\";\r\nimport { AvatarStyle, getInitals, LOREM_TEXT } from \"../../Utility\";\r\nimport { ReceivedMsg, SentMsg } from \"../Messages\";\r\nimport \"../../Assets/css/chatRoom.css\";\r\nimport {\r\n  attachNewMessagesListener,\r\n  attachOnDisconnectForTyping,\r\n  attachTypingIndicator,\r\n  removeNotification,\r\n  sendMessage1on1,\r\n  singalTypingIndicator,\r\n} from \"../../Firebase/chatManager\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { firestore, database, fieldValue } from \"../../Firebase\";\r\nimport { AppString } from \"../../Firebase/constant\";\r\nimport arrowSvg from \"../../Assets/svg/arrow.svg\";\r\nimport { UIContext } from \"../../Context/UIContextProvider\";\r\nimport { RiMailSendLine } from \"react-icons/ri\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst email_server_endpoint =\r\n  \"https://mailsender-dot-vc-copy.el.r.appspot.com/sendChatMail/\"; // \"http://192.168.0.35:8080/sendChatMail/\";\r\n\r\nexport default function PrivateChatRoom() {\r\n  const { user } = useContext(UserContext);\r\n  const { activeRoom, closePreviousChatRoom, allParticipantList } =\r\n    useContext(ChatContext);\r\n  const { getParticipantColorNumber } = useContext(UIContext);\r\n\r\n  const [typedMessage, setTypedMessage] = useState(\"\");\r\n  const [typingIndicator, setTypingIndicator] = useState(false);\r\n\r\n  //mail functionality\r\n  const [loading, setLoading] = useState(false);\r\n  const [activeMember, setActiveMember] = useState({});\r\n  const [activeTab, setActiveTab] = useState(true);\r\n  const [sendable, setSendable] = useState(true);\r\n  const [emailFeature, setEmailFeature] = useState(true);\r\n  const [userDetails, setUserDetails] = useState({});\r\n  const [alreadySent, setAlreadySent] = useState(false);\r\n  const [activeRoomMessage, setActiveRoomMessage] = useState(null);\r\n  const chatBodyRef = useRef(null);\r\n  const manualScrollUp = useRef(false);\r\n  const initals = useRef(getInitals(activeRoom.participant.name));\r\n  const avartStyleRandom = useRef(\r\n    getParticipantColorNumber(activeRoom.participant.id)\r\n  );\r\n\r\n  let currentChatListenerRef = useRef(null);\r\n  let typingListenerRef = useRef(null);\r\n  let typingDisconnectRef = useRef(null);\r\n\r\n  let inputRef = useRef(null);\r\n\r\n  const attachListener = () => {\r\n    let userRef = database.ref(\r\n      `/chat/${AppString.ROOM_MESSAGES}/${activeRoom.roomId}`\r\n    );\r\n    currentChatListenerRef.current = userRef;\r\n    userRef.on(\r\n      \"value\",\r\n      async (snapshot) => {\r\n        if (snapshot.exists()) {\r\n          let data = snapshot.val();\r\n          setActiveRoomMessage(data);\r\n          removeNotification(user.uid, activeRoom.participant.id);\r\n        }\r\n      },\r\n      (err) => {\r\n        console.error(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    firestore\r\n      .collection(\"user-invite\")\r\n      .doc(`${user.email}+${activeRoom.participant.email}`)\r\n      .get()\r\n      .then((res) => {\r\n        if (res.exists) {\r\n          setAlreadySent(true);\r\n        } else {\r\n          setAlreadySent(false);\r\n        }\r\n      });\r\n    inputRef.current.focus();\r\n    attachListener();\r\n    attachTypingIndicator(\r\n      activeRoom.roomId,\r\n      activeRoom.participant.id,\r\n      typingListenerRef.current,\r\n      (data, err) => {\r\n        if (err) {\r\n          console.error(err);\r\n          if (err.code === \"noStatus\") {\r\n            setTypingIndicator(false);\r\n          } else {\r\n            console.error(err);\r\n          }\r\n          return;\r\n        }\r\n        setTypingIndicator(data);\r\n      }\r\n    );\r\n\r\n    attachOnDisconnectForTyping(\r\n      typingDisconnectRef.current,\r\n      activeRoom.roomId,\r\n      user.uid\r\n    );\r\n\r\n    inputRef.current.addEventListener(\"focusin\", () => {\r\n      singalTypingIndicator(activeRoom.roomId, user.uid, true);\r\n    });\r\n\r\n    inputRef.current.addEventListener(\"focusout\", () => {\r\n      singalTypingIndicator(activeRoom.roomId, user.uid, false);\r\n    });\r\n\r\n    let maxHeight = chatBodyRef.current.getBoundingClientRect().height;\r\n    chatBodyRef.current.addEventListener(\"scroll\", (event) => {\r\n      if (chatBodyRef.current.scrollTop < maxHeight - maxHeight * 0.4) {\r\n        manualScrollUp.current = true;\r\n      } else {\r\n        manualScrollUp.current = false;\r\n      }\r\n    });\r\n    return () => {\r\n      if (currentChatListenerRef.current) currentChatListenerRef.current.off();\r\n      if (typingListenerRef.current) typingListenerRef.current.off();\r\n      if (typingDisconnectRef.current) typingDisconnectRef.current.cancel();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chatBodyRef.current && !manualScrollUp.current) {\r\n      chatBodyRef.current.scrollTo(0, chatBodyRef.current.scrollHeight);\r\n    }\r\n  }, [activeRoomMessage]);\r\n\r\n  const handleBtnClick = (event) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    let userName = user.displayName\r\n      ? user.displayName\r\n      : user.email.split(\"@\")[0];\r\n    sendMessage1on1(\r\n      userName,\r\n      user.uid,\r\n      activeRoom.participant.id,\r\n      activeRoom.participant.name,\r\n      activeRoom.roomId,\r\n      typedMessage\r\n    );\r\n    chatBodyRef.current.scrollTo(0, chatBodyRef.current.scrollHeight);\r\n    setTypedMessage(\"\");\r\n  };\r\n\r\n  const getUserDetails = (allPart, uid) => {\r\n    let details;\r\n    Object.entries(allPart).forEach(([k, v]) => {\r\n      if (v.id == uid) details = v;\r\n      return;\r\n    });\r\n    return details;\r\n  };\r\n\r\n  const userDetailsCurr = getUserDetails(allParticipantList, user.uid);\r\n\r\n  const sendMail = () => {\r\n    swal({\r\n      title: \"Send Invite\",\r\n      text: \"\",\r\n      icon: \"info\",\r\n      buttons: true,\r\n      dangerMode: true,\r\n    }).then((ok) => {\r\n      if (ok) {\r\n        // this.setState({ loading: true });\r\n        setLoading(true);\r\n        console.log(userDetailsCurr, activeRoom);\r\n        fetch(email_server_endpoint, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-AUTH-TOKEN\": \"12901cb8edbcd4fff903e48585403839\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            sender: {\r\n              ...userDetailsCurr,\r\n            },\r\n            reciver: {\r\n              ...activeRoom.participant,\r\n            },\r\n          }),\r\n        })\r\n          .then(function (res) {\r\n            firestore\r\n              .collection(\"user-invite\")\r\n              .doc(`${user.email}+${activeRoom.participant.email}`)\r\n              .set({\r\n                sender: user.email,\r\n                receiver: activeRoom.participant.email,\r\n                sent: true,\r\n                timestamp: fieldValue.serverTimestamp(),\r\n              })\r\n              .then(() => {\r\n                setSendable(false);\r\n                setLoading(false);\r\n                setAlreadySent(true);\r\n                swal(\"Sent\", {\r\n                  icon: \"success\",\r\n                });\r\n              });\r\n          })\r\n          .catch(function (res) {\r\n            console.log(res);\r\n          });\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar__body\">\r\n      <div className=\"chat-section\">\r\n        <div\r\n          className=\"chat-header\"\r\n          onClick={closePreviousChatRoom}\r\n          style={{ position: \"relative\" }}\r\n        >\r\n          <img src={arrowSvg} alt=\"arrowSvg\" />\r\n          <div className=\"user-profile\">\r\n            <span\r\n              className={`user-profile__image ${\r\n                AvatarStyle[avartStyleRandom.current]\r\n              }`}\r\n            >\r\n              {initals.current}\r\n            </span>\r\n            <span className=\"user-profile__title\">\r\n              {activeRoom.participant.name.toLowerCase()}\r\n              <small>\r\n                {typingIndicator\r\n                  ? \"typing...\"\r\n                  : `${activeRoom.participant.designation}, ${activeRoom.participant.company}`}\r\n              </small>\r\n            </span>\r\n          </div>\r\n          {emailFeature ? (\r\n            <RiMailSendLine\r\n              style={{\r\n                position: \"absolute\",\r\n                right: \"2rem\",\r\n                pointerEvents: alreadySent ? \"none\" : \"all\",\r\n                opacity: alreadySent ? \"0.5\" : \"1\",\r\n              }}\r\n              className={`mail ${activeMember ? \"\" : \"d-none\"} ${\r\n                activeTab === \"tab1\" ? \"d-none\" : \"\"\r\n              } ${sendable ? \"\" : \"faded\"}`}\r\n              size=\"2rem\"\r\n              onClick={(event) => {\r\n                event.stopPropagation();\r\n                sendMail();\r\n              }}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div className=\"chat-section__body\" ref={chatBodyRef}>\r\n          {activeRoomMessage &&\r\n            Object.values(activeRoomMessage).map((messageDetails) => {\r\n              if (messageDetails.id !== user.uid) {\r\n                return (\r\n                  <ReceivedMsg\r\n                    userId={messageDetails.id}\r\n                    time={messageDetails.createdAt}\r\n                    key={messageDetails.createdAt + \"+\" + messageDetails.id}\r\n                    name={messageDetails.name}\r\n                    message={messageDetails.message}\r\n                  />\r\n                );\r\n              } else {\r\n                return (\r\n                  <SentMsg\r\n                    userId={messageDetails.id}\r\n                    time={messageDetails.createdAt}\r\n                    key={messageDetails.createdAt + \"+\" + messageDetails.id}\r\n                    name={messageDetails.name}\r\n                    message={messageDetails.message}\r\n                  />\r\n                );\r\n              }\r\n            })}\r\n        </div>\r\n        {activeRoom && (\r\n          <div className=\"chat-section__footer\">\r\n            <div className=\"chat-section__form\">\r\n              <form onSubmit={handleBtnClick}>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"chat-section__input\"\r\n                  placeholder=\"Write here\"\r\n                  value={typedMessage}\r\n                  onChange={(e) => setTypedMessage(e.target.value)}\r\n                  ref={inputRef}\r\n                ></input>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"chat-section__btn \"\r\n                  disabled={typedMessage.length === 0}\r\n                >\r\n                  <i className=\"icon-send\"></i>\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ChatContext } from '../../Context/Chat/ChatContextProvider'\r\nimport Participants from '../Participants/Participants'\r\nimport PrivateChatRoom from '../PrivateChatRoom/PrivateChatRoom'\r\n\r\nexport default function PrivateChat() {\r\n    const { activeRoom } = useContext(ChatContext)\r\n    return (\r\n        <>\r\n            {\r\n                activeRoom ? \r\n                <PrivateChatRoom />\r\n                :\r\n                <Participants />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","export const POLL_STATES = {\r\n  hide: \"hide\",\r\n  showQuestion: \"showQuestion\",\r\n  showResult: \"showResult\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { POLL_STATES } from \"../../Constants/PollStates\";\r\n\r\nexport function PollResult(props) {\r\n  const { index: currentIndex } = props;\r\n  const { question, options, index, totalResponse } = props.data;\r\n  options.sort(function (a, b) {\r\n    return a.id - b.id;\r\n  });\r\n\r\n  return (\r\n    <div className=\"pollBox__question\">\r\n      <h3 className=\"pollBox__title\">{`Q${currentIndex + 1}. ${question}`}</h3>\r\n      <ul className=\"pollBox__options\">\r\n        {options.map((option) => (\r\n          <li>\r\n            <div className=\"custom-slider\">\r\n              <span className=\"custom-slider__text\">{option.value}</span>\r\n              <div className=\"custom-slider__bar\">\r\n                <span className=\"custom-slider__mark\">{`${\r\n                  totalResponse > 0\r\n                    ? (option.response / totalResponse) * 100\r\n                    : 0\r\n                }%`}</span>\r\n                <div\r\n                  className=\"custom-slider__bar-inner\"\r\n                  style={{\r\n                    width: `${\r\n                      totalResponse > 0\r\n                        ? (option.response / totalResponse) * 100\r\n                        : 0\r\n                    }%`,\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PollQuestion(props) {\r\n  const { handleSubmit, checkIfAlreadyAnswered, index: currentIndex } = props;\r\n  const { question, options, feedbacks, index, id, eventId } = props.data;\r\n  options?.sort(function (a, b) {\r\n    return a.id - b.id;\r\n  });\r\n\r\n  const [answer, setAnswer] = useState(checkIfAlreadyAnswered);\r\n  const [showError, setShowError] = useState(false);\r\n  const [feedbackSuccess, setFeedbackSuccess] = useState(false);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (checkIfAlreadyAnswered) {\r\n      setAnswer(checkIfAlreadyAnswered);\r\n    }\r\n  }, [checkIfAlreadyAnswered]);\r\n\r\n  const handleSubmitButton = (e) => {\r\n    e.preventDefault();\r\n    if (!answer) {\r\n      setShowError(true);\r\n      return;\r\n    }\r\n    setShowError(false);\r\n    handleSubmit(id, answer, \"multiple\");\r\n  };\r\n\r\n  const handleFeedbackSubmitButton = (e) => {\r\n    e.preventDefault();\r\n    if (!feedback) {\r\n      setShowError(true);\r\n      return;\r\n    }\r\n    setShowError(false);\r\n    handleSubmit(id, feedback, \"feedback\");\r\n    setFeedbackSuccess(true);\r\n    setFeedback(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"pollBox__question\">\r\n      {options && (\r\n        <form onSubmit={handleSubmitButton}>\r\n          <h3 className=\"pollBox__title\">{`Q${\r\n            currentIndex + 1\r\n          }. ${question}`}</h3>\r\n          <ul className=\"pollBox__options\">\r\n            {options.map((option, index) => (\r\n              <li key={`option-${option.id}`}>\r\n                <label\r\n                  key={`checkbox-${option.id}`}\r\n                  className=\"custom-checkbox\"\r\n                >\r\n                  {`0${index + 1}.  ${option.value}`}\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={option.id}\r\n                    checked={!answer ? false : option.id === answer.id}\r\n                    onChange={(e) => {\r\n                      setShowError(false);\r\n                      setAnswer(option);\r\n                    }}\r\n                    disabled={checkIfAlreadyAnswered === null ? false : true}\r\n                  />\r\n                  <span className=\"custom-checkbox__icon icon-unchecked2\"></span>\r\n                </label>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {showError && (\r\n            <>\r\n              <div style={{ color: \"red\", marginBottom: \"0rem\" }}>\r\n                * Please give some response first, to submit.\r\n              </div>\r\n              <br></br>\r\n            </>\r\n          )}\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-secondary\"\r\n              disabled={checkIfAlreadyAnswered === null ? false : true}\r\n            >{`${\r\n              checkIfAlreadyAnswered === null ? \"Submit\" : \"Answered\"\r\n            }`}</button>\r\n          </div>\r\n        </form>\r\n      )}\r\n\r\n      {feedbacks && (\r\n        <form onSubmit={handleFeedbackSubmitButton}>\r\n          {!feedbackSuccess ? (\r\n            <div>\r\n              <h3 className=\"pollBox__title\">{`Q${\r\n                currentIndex + 1\r\n              }. ${question}`}</h3>\r\n              <ul className=\"pollBox__options\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Write text here...\"\r\n                  value={feedback}\r\n                  onChange={(e) => {\r\n                    setShowError(false);\r\n                    setFeedback(e.target.value);\r\n                  }}\r\n                />\r\n              </ul>\r\n              {showError && (\r\n                <>\r\n                  <div style={{ color: \"red\", marginBottom: \"0rem\" }}>\r\n                    * Please give some response first, to submit.\r\n                  </div>\r\n                  <br></br>\r\n                </>\r\n              )}\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <button type=\"submit\" className=\"btn btn-secondary\">\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div style={{ textAlign: \"center\", position: \"relative\" }}>\r\n              <div className=\"success-positioning d-flex\">\r\n                <div className=\"success-icon\">\r\n                  <div className=\"success-icon__tip\"></div>\r\n                  <div className=\"success-icon__long\"></div>\r\n                </div>\r\n              </div>\r\n              <h4>Feedback Submit Successfully</h4>\r\n              <div\r\n                onClick={() => {\r\n                  setFeedbackSuccess(!feedbackSuccess);\r\n                }}\r\n                className=\"feedback-modal-cls-btn\"\r\n              >\r\n                <img\r\n                  src={process.env.PUBLIC_URL + \"assets/images/icons/close.svg\"}\r\n                  alt=\"\"\r\n                  height=\"25px\"\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PollUser(props) {\r\n  const { visiblePollData, submitResponse, pollAnswerredData } = props;\r\n  return (\r\n    <div className=\"sidebar__body\">\r\n      <div className=\"\">\r\n        {/* <div className=\"pollBox__header\">\r\n          <div className=\"d-flex justify-content-between align-items-center pd-b10\">\r\n            <h2 className=\"pollBox__title\">Ask a question</h2>\r\n            <button className=\"btn btn-grey pollBox__close\">Close</button>\r\n          </div>\r\n          <div className=\"pollBox__send mg-b20\">\r\n            <img src=\"assets/images/user.png\" alt=\"\" />\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Ask a question\"\r\n              />\r\n              <button className=\"btn\">\r\n                <i className=\"icon-send\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <h2 className=\"pollBox__title mg-b10\">Polls</h2>\r\n        </div> */}\r\n        <div className=\"pollBox__body\">\r\n          {visiblePollData && visiblePollData.length === 0 && (\r\n            <div\r\n              className=\"noVisiblePoll\"\r\n              style={{\r\n                textAlign: \"center\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n            >\r\n              {/* <h2>Answer polls and quizes</h2> */}\r\n              <p>\r\n                As soon as a poll is posted <br></br>you will be able to express\r\n                your opinion.\r\n              </p>\r\n            </div>\r\n          )}\r\n          {visiblePollData &&\r\n            visiblePollData.map((pollItem, index) => (\r\n              <div\r\n                className=\"pollBox\"\r\n                key={pollItem.id}\r\n                style={{ overflow: \"hidden\" }}\r\n              >\r\n                {pollItem.state === POLL_STATES.showQuestion && (\r\n                  <PollQuestion\r\n                    data={pollItem}\r\n                    handleSubmit={submitResponse}\r\n                    checkIfAlreadyAnswered={pollAnswerredData[pollItem.id]}\r\n                    index={index}\r\n                  />\r\n                )}\r\n                {pollItem.state === POLL_STATES.showResult && (\r\n                  <PollResult data={pollItem} index={index} />\r\n                )}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const POLL_COLLECTION = \"poll\";\r\nexport const POLLRESPONSE_COLLECTION = \"pollResponse\";\r\nexport const BACKSTAGE_COLLECTION = \"backStage\";\r\n","import {\r\n  POLLRESPONSE_COLLECTION,\r\n  POLL_COLLECTION,\r\n} from \"../Constants/CollectionConstants\";\r\nimport { POLL_STATES } from \"../Constants/PollStates\";\r\nimport firebase, { firestore } from \"../Firebase/index\";\r\n\r\nvar uniqid = require(\"uniqid\");\r\nlet pollListenerRef = null;\r\nexport const PollManager = {\r\n  addPollQuestion: (type, form, eventId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        // let id = uniqid(\"poll-\");\r\n        let docRef = firestore.collection(POLL_COLLECTION).doc();\r\n        let options = [];\r\n        form.option1 &&\r\n          options.push({\r\n            id: 0,\r\n            value: form.option1,\r\n            response: 0,\r\n          });\r\n        form.option2 &&\r\n          options.push({\r\n            id: 1,\r\n            value: form.option2,\r\n            response: 0,\r\n          });\r\n        form.option3 &&\r\n          options.push({\r\n            id: 2,\r\n            value: form.option3,\r\n            response: 0,\r\n          });\r\n        form.option4 &&\r\n          options.push({\r\n            id: 3,\r\n            value: form.option4,\r\n            response: 0,\r\n          });\r\n\r\n        if (type === \"feedback\") {\r\n          await docRef.set({\r\n            feedbacks: [],\r\n            question: form.question,\r\n            //   index: index,\r\n            eventId: eventId,\r\n            state: POLL_STATES.hide,\r\n            totalResponse: 0,\r\n            timestamp: firebase.firestore.Timestamp.now(),\r\n            //   id,\r\n          });\r\n        }\r\n\r\n        if (type === \"multiple\") {\r\n          await docRef.set({\r\n            options: options,\r\n            question: form.question,\r\n            //   index: index,\r\n            eventId: eventId,\r\n            state: POLL_STATES.hide,\r\n            totalResponse: 0,\r\n            timestamp: firebase.firestore.Timestamp.now(),\r\n            //   id,\r\n          });\r\n        }\r\n\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n\r\n  removePollQuestion: (id) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore.collection(POLL_COLLECTION);\r\n        await ref.doc(id).delete();\r\n        res(\"success\");\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  publishPollQuestion: (id, data) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore.collection(POLL_COLLECTION);\r\n        await ref.doc(id).update(data);\r\n        res(\"success\");\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n\r\n  getPollResponse: (pollId, userId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore\r\n          .collection(POLLRESPONSE_COLLECTION)\r\n          .doc(`${userId}+${pollId}`);\r\n        const doc = await ref.get();\r\n        if (doc.exists) {\r\n          res(doc.data().option);\r\n        } else {\r\n          res(null);\r\n        }\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  attachPollListener: (eventId, callback = () => console.log(\"noFunFound\")) => {\r\n    const ref = firestore\r\n      .collection(POLL_COLLECTION)\r\n      .where(\"eventId\", \"==\", eventId);\r\n    pollListenerRef = ref.onSnapshot(\r\n      (query) => {\r\n        if (query.empty) {\r\n          callback([]);\r\n        }\r\n        let _data = query.docs.map((doc) => {\r\n          let record = { id: doc.id, ...doc.data() };\r\n          return record;\r\n        });\r\n        callback(_data);\r\n      },\r\n      (err) => {\r\n        callback(null, err);\r\n      }\r\n    );\r\n  },\r\n  removePollListener: () => {\r\n    if (pollListenerRef) {\r\n      pollListenerRef();\r\n    }\r\n  },\r\n  addResponse: (eventId, pollId, userId, userName, option, type) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const pollRef = firestore.collection(POLL_COLLECTION).doc(pollId);\r\n        const responseRef = firestore\r\n          .collection(POLLRESPONSE_COLLECTION)\r\n          .doc(`${userId}+${pollId}`);\r\n        let id = uniqid(\"response-\");\r\n        await firestore.runTransaction(async (transcation) => {\r\n          let doc = await transcation.get(pollRef);\r\n          let responseDoc = await transcation.get(responseRef);\r\n          if (responseDoc.exists) {\r\n            let err = {\r\n              code: \"AlreadyResponded\",\r\n              message: \"Already responded to the current poll.\",\r\n            };\r\n            throw err;\r\n          }\r\n          if (!doc.exists) {\r\n            let err = {\r\n              code: \"NotValidId\",\r\n              message: \"No Poll Found\",\r\n            };\r\n            throw err;\r\n          }\r\n          if (type === \"feedback\") {\r\n\r\n            let feedbackData = {\r\n              userId: userId,\r\n              userName: userName,\r\n              date: new Date().getTime(),\r\n              feedback: option,\r\n            };\r\n\r\n            let feedbacks = doc.data().feedbacks;\r\n            feedbacks.push(feedbackData);\r\n            transcation.update(pollRef, {\r\n              feedbacks: feedbacks,\r\n              totalResponse: firebase.firestore.FieldValue.increment(1),\r\n            });\r\n          }\r\n          if (type === \"multiple\") {\r\n            let _option = { ...option };\r\n            delete _option.response;\r\n\r\n            transcation.set(responseRef, {\r\n              id: id,\r\n              targetId: pollId,\r\n              user: userId,\r\n              userName: userName,\r\n              eventId: eventId,\r\n              timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n              date: new Date().getTime(),\r\n              option: _option,\r\n            });\r\n\r\n            const options = doc.data().options;\r\n\r\n            options[option.id] = {\r\n              ...options[option.id],\r\n              response: parseInt(options[option.id].response) + 1,\r\n            };\r\n            transcation.update(pollRef, {\r\n              options: options,\r\n              totalResponse: firebase.firestore.FieldValue.increment(1),\r\n            });\r\n          }\r\n        });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  changeAllPollState: (eventId, state = POLL_STATES.hide) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const pollColl = firestore.collection(POLL_COLLECTION);\r\n        const docRef = firestore\r\n          .collection(POLL_COLLECTION)\r\n          .where(\"eventId\", \"==\", eventId);\r\n        await firestore.runTransaction(async (transcation) => {\r\n          let query = await transcation.get(docRef);\r\n          if (query.empty) {\r\n            let er = { code: \"EmptyPoll\", message: \"No Poll Found\" };\r\n            throw er;\r\n          }\r\n          const docIds = query.docs.map((doc) => doc.id);\r\n          for (let i = 0; i < docIds.length; i++) {\r\n            await pollColl.doc(docIds[i]).update({\r\n              state,\r\n            });\r\n          }\r\n        });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { POLL_STATES } from \"../../Constants/PollStates\";\r\nimport { PollUser } from \"../../Components/Poll\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { PollManager } from \"../../Managers/PollManager\";\r\n\r\nimport \"./PollContainer.css\";\r\n// import { getByPlaceholderText } from \"@testing-library/react\";\r\nexport default function PollContainer(props) {\r\n  const { id: eventId, isPollUser, pollAnalytics } = props;\r\n  const { user } = useContext(UserContext);\r\n  const [pollAnswerredData, setPollAnswerredData] = useState({});\r\n\r\n  const [pollData, setPollData] = useState(null);\r\n  const [pollForm, setPollForm] = useState([]);\r\n  const [isPollFormOpen, setIsPollFormOpen] = useState(false);\r\n\r\n  const [isFeedbackExpand, setIsFeedbackExpand] = useState();\r\n  const [pollFeedback, setPollFeedback] = useState([]);\r\n  const [isPollFeedback, setIsPollFeedback] = useState(false);\r\n\r\n  const [createNewPollbtnOpen, setCreateNewPollbtnOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState({\r\n    open: false,\r\n    id: null,\r\n    type: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    getPoll();\r\n    return () => {\r\n      PollManager.removePollListener();\r\n    };\r\n  }, []);\r\n  const submitResponse = (pollId, option, type) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        await PollManager.addResponse(\r\n          eventId,\r\n          pollId,\r\n          user.uid,\r\n          user.displayName,\r\n          option,\r\n          type\r\n        );\r\n        // pollAnalytics(pollId, option.id);\r\n        setPollAnswerredData({ ...pollAnswerredData, [pollId]: option });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  const getAllPollAnsweredDataForCurrentUser = async (data) => {\r\n    if (data.length > 0) {\r\n      let _pollAnswerredData = {};\r\n      for (let i = 0; i < data.length; i++) {\r\n        let res = await checkIfAlreadyAnswered(data[i].id);\r\n        _pollAnswerredData = {\r\n          ..._pollAnswerredData,\r\n          [data[i].id]: res,\r\n        };\r\n      }\r\n      setPollAnswerredData(_pollAnswerredData);\r\n    }\r\n  };\r\n\r\n  const checkIfAlreadyAnswered = (pollId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const pollIds = Object.keys(pollAnswerredData);\r\n        if (pollIds.indexOf(pollId) !== -1) {\r\n          // console.log(pollIds[pollId])\r\n          res(pollIds[pollId]);\r\n        }\r\n        const result = await PollManager.getPollResponse(pollId, user?.uid);\r\n        if (result) {\r\n          res(result);\r\n        } else {\r\n          res(null);\r\n        }\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  let visiblePollData = null;\r\n  if (pollData) {\r\n    visiblePollData = pollData.filter(\r\n      (item) => item.state !== POLL_STATES.hide\r\n    ); //pass index also\r\n  }\r\n\r\n  const getPoll = () => {\r\n    setLoading(true);\r\n    PollManager.attachPollListener(eventId, (data, err) => {\r\n      if (err) {\r\n        setLoading(false);\r\n        // console.log(err)\r\n        return;\r\n      }\r\n      setPollData(sortData(data));\r\n      getAllPollAnsweredDataForCurrentUser(data);\r\n      setLoading(false);\r\n    });\r\n  };\r\n  const handleformSubmit = async (type, id, updatedData) => {\r\n    // handling save button\r\n    if (type === \"save\") {\r\n      // extracting current form data from form array\r\n      let form = pollForm.filter((data, ind) => ind === id);\r\n      if (!form[0].question) {\r\n        return;\r\n      }\r\n      if (pollForm.length <= 1) {\r\n        setIsPollFormOpen(false);\r\n      }\r\n\r\n      return new Promise(async (res, rej) => {\r\n        try {\r\n          await PollManager.addPollQuestion(\"multiple\", form[0], eventId);\r\n          // updating saved form data array\r\n          getPoll();\r\n          let newForm = pollForm.filter((data, ind) => ind !== id);\r\n          // removing that form from form array\r\n          // newForm.sort((a, b) => a - b);\r\n          setPollForm(newForm);\r\n          res();\r\n        } catch (error) {\r\n          setIsPollFormOpen(true);\r\n          rej(error);\r\n        }\r\n      });\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n    if (type === \"showResult\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n  };\r\n  const handleMultipleChoice = () => {\r\n    setPollForm([\r\n      {\r\n        question: \"\",\r\n        option1: \"\",\r\n        option2: \"\",\r\n        option3: \"\",\r\n        option4: \"\",\r\n      },\r\n      ...pollForm,\r\n    ]);\r\n    setIsPollFormOpen(true);\r\n    setCreateNewPollbtnOpen(false);\r\n    return;\r\n  };\r\n\r\n  const handleFeedback = () => {\r\n    setPollFeedback([\r\n      {\r\n        question: \"\",\r\n      },\r\n      ...pollFeedback,\r\n    ]);\r\n    setIsPollFeedback(true);\r\n    setCreateNewPollbtnOpen(false);\r\n    return;\r\n  };\r\n  const handleDeleteFeedbackPoll = async (type, id) => {\r\n    if (type === \"unpublish\") {\r\n      if (pollFeedback.length > 1) {\r\n        let form = pollFeedback.filter((data, ind) => ind !== id);\r\n        setPollFeedback(form);\r\n      } else {\r\n        setPollFeedback([]);\r\n      }\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.removePollQuestion(id);\r\n      if (result === \"success\") {\r\n        let form = pollFeedback.filter((data) => data.id !== id);\r\n        setPollData(sortData(form));\r\n      }\r\n    }\r\n    setShowDeleteModal({ open: false, id: null, type: \"\" });\r\n  };\r\n  const handleFeedBackSubmit = async (type, id, updatedData) => {\r\n    // handling save button\r\n    if (type === \"save\") {\r\n      // extracting current form data from form array\r\n      let form = pollFeedback.filter((data, ind) => ind === id);\r\n      if (!form[0].question) {\r\n        return;\r\n      }\r\n      if (pollFeedback.length <= 1) {\r\n        setIsPollFeedback(false);\r\n      }\r\n\r\n      return new Promise(async (res, rej) => {\r\n        try {\r\n          await PollManager.addPollQuestion(\"feedback\", form[0], eventId);\r\n          // updating saved form data array\r\n          getPoll();\r\n          let newForm = pollFeedback.filter((data, ind) => ind !== id);\r\n          // removing that form from form array\r\n          // newForm.sort((a, b) => a - b);\r\n          setPollFeedback(newForm);\r\n          res();\r\n        } catch (error) {\r\n          setIsPollFeedback(true);\r\n          rej(error);\r\n        }\r\n      });\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n    if (type === \"showResult\") {\r\n      const result = await PollManager.publishPollQuestion(id, {\r\n        state: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        let allForms = pollData.filter((data) => data.id !== id);\r\n        let form = pollData.filter((data) => data.id === id);\r\n        form[0].state = updatedData;\r\n        allForms.push(form[0]);\r\n        setPollData(sortData(allForms));\r\n      }\r\n    }\r\n  };\r\n  const handleDeletePoll = async (type, id) => {\r\n    if (type === \"unpublish\") {\r\n      if (pollForm.length > 1) {\r\n        let form = pollForm.filter((data, ind) => ind !== id);\r\n        setPollForm(form);\r\n      } else {\r\n        setPollForm([]);\r\n      }\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await PollManager.removePollQuestion(id);\r\n      if (result === \"success\") {\r\n        let form = pollData.filter((data) => data.id !== id);\r\n        setPollData(sortData(form));\r\n      }\r\n    }\r\n    setShowDeleteModal({ open: false, id: null, type: \"\" });\r\n  };\r\n\r\n  const updateItem = (type, index, whichvalue, newvalue) => {\r\n    if (type === \"multiple\") {\r\n      let g = pollForm[index];\r\n      g[whichvalue] = newvalue;\r\n      if (index === -1) {\r\n        // handle error\r\n        console.log(\"no match\");\r\n      } else\r\n        setPollForm([\r\n          ...pollForm.slice(0, index),\r\n          g,\r\n          ...pollForm.slice(index + 1),\r\n        ]);\r\n    }\r\n    if (type === \"feedback\") {\r\n      let g = pollFeedback[index];\r\n      g[whichvalue] = newvalue;\r\n      if (index === -1) {\r\n        // handle error\r\n        console.log(\"no match\");\r\n      } else\r\n        setPollFeedback([\r\n          ...pollFeedback.slice(0, index),\r\n          g,\r\n          ...pollFeedback.slice(index + 1),\r\n        ]);\r\n    }\r\n  };\r\n\r\n  const sortData = (data) => {\r\n    let sorted = data.sort((a, b) => (a.timestamp >= b.timestamp ? -1 : 1));\r\n    return sorted;\r\n  };\r\n  return (\r\n    <>\r\n      {!isPollUser ? (\r\n        <div className=\"communityBox__body\">\r\n          <div className=\"poll-form-container\">\r\n            <div style={{ position: \"relative\" }}>\r\n              <button\r\n                className={`poll-btn ${createNewPollbtnOpen && \"pbh\"}`}\r\n                onClick={() => setCreateNewPollbtnOpen(!createNewPollbtnOpen)}\r\n              >\r\n                + Create new Poll\r\n              </button>\r\n              {createNewPollbtnOpen && (\r\n                <div className=\"create-new-btn-optns\">\r\n                  <div onClick={() => handleMultipleChoice()}>\r\n                    Multiple Choice\r\n                  </div>\r\n                  <div onClick={() => handleFeedback()}>Feedback</div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            {/* Poll Form Start */}\r\n            {isPollFormOpen &&\r\n              pollForm?.map((data, index) => (\r\n                <div className=\"poll-form\" key={index}>\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    // onClick={() => handleDeletePoll(\"unpublish\", index)}\r\n                    onClick={() =>\r\n                      setShowDeleteModal({\r\n                        open: true,\r\n                        id: index,\r\n                        type: \"unpublish\",\r\n                        formType: \"multiple\",\r\n                      })\r\n                    }\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      alignSelf: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        process.env.PUBLIC_URL +\r\n                        \"assets/images/icons/delete.svg\"\r\n                      }\r\n                      alt=\"delete\"\r\n                      height=\"10px\"\r\n                      style={{ display: \"inline-block\", paddingRight: \"5px\" }}\r\n                    />\r\n                    Delete Poll\r\n                  </button>\r\n                  <input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    placeholder=\"Add question text\"\r\n                    value={data.question}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"question\", e.target.value)\r\n                    }\r\n                    required\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 1\"\r\n                    value={data.option1}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option1\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 2\"\r\n                    value={data.option2}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option2\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 3\"\r\n                    value={data.option3}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option3\", e.target.value)\r\n                    }\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Option 4\"\r\n                    value={data.option4}\r\n                    onChange={(e) =>\r\n                      updateItem(\"multiple\", index, \"option4\", e.target.value)\r\n                    }\r\n                  />\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() => handleformSubmit(\"save\", index)}\r\n                    style={{ border: \"1px solid black\", alignSelf: \"center\" }}\r\n                  >\r\n                    Save Poll\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            {/* end of Poll Form */}\r\n            {/* Feedback form start */}\r\n            {isPollFeedback &&\r\n              pollFeedback?.map((data, index) => (\r\n                <div className=\"poll-form\" key={index}>\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    // onClick={() => handleDeletePoll(\"unpublish\", index)}\r\n                    onClick={() =>\r\n                      setShowDeleteModal({\r\n                        open: true,\r\n                        id: index,\r\n                        type: \"unpublish\",\r\n                        formType: \"feedback\",\r\n                      })\r\n                    }\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      alignSelf: \"flex-end\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        process.env.PUBLIC_URL +\r\n                        \"assets/images/icons/delete.svg\"\r\n                      }\r\n                      alt=\"delete\"\r\n                      height=\"10px\"\r\n                      style={{ display: \"inline-block\", paddingRight: \"5px\" }}\r\n                    />\r\n                    Delete Poll\r\n                  </button>\r\n                  <input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    placeholder=\"Add question text\"\r\n                    value={data.question}\r\n                    onChange={(e) =>\r\n                      updateItem(\"feedback\", index, \"question\", e.target.value)\r\n                    }\r\n                    required\r\n                  />\r\n\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() => handleFeedBackSubmit(\"save\", index)}\r\n                    style={{ border: \"1px solid black\", alignSelf: \"center\" }}\r\n                  >\r\n                    Save Poll\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            {/* End of feedback form */}\r\n          </div>\r\n          {loading && <div style={{ marginTop: \"1rem\" }}>Please wait...</div>}\r\n          {pollData &&\r\n            pollData.map((data, index) => (\r\n              <div key={data.id} className=\"poll-form poll-form-data\">\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignSelf: data.state === POLL_STATES.hide && \"flex-end\",\r\n                  }}\r\n                >\r\n                  {data.state !== POLL_STATES.hide && (\r\n                    <div className=\"live-text\" style={{ fontWeight: 600 }}>\r\n                      <div className=\"live-mark\"></div>\r\n                      LIVE NOW\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() =>\r\n                      setShowDeleteModal({\r\n                        open: true,\r\n                        id: data.id,\r\n                        type: \"publish\",\r\n                        formType: \"multiple\",\r\n                      })\r\n                    }\r\n                    // onClick={() => handleDeletePoll(\"publish\", data.id)}\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        process.env.PUBLIC_URL +\r\n                        \"assets/images/icons/delete.svg\"\r\n                      }\r\n                      alt=\"delete\"\r\n                      height=\"10px\"\r\n                      style={{ display: \"inline-block\", paddingRight: \"5px\" }}\r\n                    />\r\n                    Delete Poll\r\n                  </button>\r\n                </div>\r\n                <p\r\n                  style={{\r\n                    paddingTop: \"10px\",\r\n                    marginBottom: \"25px\",\r\n                    fontWeight: 600,\r\n                  }}\r\n                >\r\n                  {`Q${pollData.length - index}. ${data.question}`}\r\n                  {data.feedbacks && (\r\n                    <span\r\n                      style={{ float: \"right\", cursor: \"pointer\" }}\r\n                      onClick={() =>\r\n                        isFeedbackExpand\r\n                          ? setIsFeedbackExpand(\"\")\r\n                          : setIsFeedbackExpand(pollData.length - index)\r\n                      }\r\n                    >\r\n                      {!isFeedbackExpand ? (\r\n                        <img\r\n                          src={\r\n                            process.env.PUBLIC_URL +\r\n                            \"assets/images/icons/chevrondown.svg\"\r\n                          }\r\n                          alt=\"down\"\r\n                          height=\"15px\"\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          src={\r\n                            process.env.PUBLIC_URL +\r\n                            \"assets/images/icons/chevronup.svg\"\r\n                          }\r\n                          alt=\"down\"\r\n                          height=\"15px\"\r\n                        />\r\n                      )}\r\n                    </span>\r\n                  )}\r\n                </p>\r\n                <div style={{ maxHeight: \"200px\", overflow: \"auto\" }}>\r\n                  {data?.feedbacks?.length === 0 && (\r\n                    <div\r\n                      style={{\r\n                        display:\r\n                          isFeedbackExpand === pollData.length - index\r\n                            ? \"block\"\r\n                            : \"none\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      No feedback\r\n                    </div>\r\n                  )}\r\n                  {data?.feedbacks?.map((feedback) => (\r\n                    <li\r\n                      key={feedback.date}\r\n                      className=\"poll-ans-list\"\r\n                      style={{\r\n                        display:\r\n                          isFeedbackExpand === pollData.length - index\r\n                            ? \"list-item\"\r\n                            : \"none\",\r\n                      }}\r\n                    >\r\n                      {feedback.feedback}\r\n                    </li>\r\n                  ))}\r\n                </div>\r\n                {data?.options?.map((option, index) => (\r\n                  <div key={index} className=\"poll-ans-list\">\r\n                    <span>{`0${index + 1}. `}</span> {option.value}\r\n                    {data.state === POLL_STATES.showResult && (\r\n                      <div\r\n                        className=\"custom-slider\"\r\n                        style={{ padingLeft: \"6%\" }}\r\n                      >\r\n                        {/* <span className=\"custom-slider__text\">\r\n                        {option.value}\r\n                      </span> */}\r\n                        <div className=\"custom-slider__bar\">\r\n                          <span className=\"custom-slider__mark\">{`${\r\n                            data.totalResponse > 0\r\n                              ? (option.response / data.totalResponse) * 100\r\n                              : 0\r\n                          }%`}</span>\r\n                          <div\r\n                            className=\"custom-slider__bar-inner\"\r\n                            style={{\r\n                              width: `${\r\n                                data.totalResponse > 0\r\n                                  ? (option.response / data.totalResponse) * 100\r\n                                  : 0\r\n                              }%`,\r\n                            }}\r\n                          ></div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent:\r\n                      data.state !== POLL_STATES.hide\r\n                        ? \"space-between\"\r\n                        : \"center\",\r\n                  }}\r\n                >\r\n                  <button\r\n                    className=\"poll-btn\"\r\n                    onClick={() =>\r\n                      handleformSubmit(\r\n                        \"publish\",\r\n                        data.id,\r\n                        data.state !== POLL_STATES.hide\r\n                          ? POLL_STATES.hide\r\n                          : POLL_STATES.showQuestion\r\n                      )\r\n                    }\r\n                    style={{\r\n                      border: \"1px solid black\",\r\n                      fontWeight: \"700\",\r\n                    }}\r\n                  >\r\n                    {data.state !== POLL_STATES.hide\r\n                      ? \"Unpublish\"\r\n                      : \"Publish Poll\"}\r\n                  </button>\r\n                  {data.state !== POLL_STATES.hide && !data.feedbacks && (\r\n                    <button\r\n                      className=\"poll-btn\"\r\n                      onClick={() =>\r\n                        handleformSubmit(\r\n                          \"showResult\",\r\n                          data.id,\r\n                          data.state === POLL_STATES.showResult\r\n                            ? POLL_STATES.showQuestion\r\n                            : POLL_STATES.showResult\r\n                        )\r\n                      }\r\n                      style={{\r\n                        border: \"1px solid black\",\r\n                        fontWeight: \"700\",\r\n                      }}\r\n                    >\r\n                      {data.state === POLL_STATES.showQuestion\r\n                        ? \"Show Result\"\r\n                        : \"Hide Result\"}\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {showDeleteModal.open && (\r\n            <DeleteModal\r\n              type={showDeleteModal.type}\r\n              id={showDeleteModal.id}\r\n              formType={showDeleteModal.formType}\r\n              handleDeletePoll={handleDeletePoll}\r\n              handleDeleteFeedbackPoll={handleDeleteFeedbackPoll}\r\n              setShowDeleteModal={setShowDeleteModal}\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <PollUser\r\n          visiblePollData={visiblePollData}\r\n          submitResponse={submitResponse}\r\n          pollAnswerredData={pollAnswerredData}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\nconst DeleteModal = ({\r\n  handleDeletePoll,\r\n  type,\r\n  id,\r\n  formType,\r\n  handleDeleteFeedbackPoll,\r\n  setShowDeleteModal,\r\n}) => {\r\n  return (\r\n    <div className=\"dlt-mdl\">\r\n      <div className=\"dlt-mdl-bdy\">\r\n        <div style={{ fontWeight: 700 }}>\r\n          By deleting this poll you will loose all associated data and results.\r\n        </div>\r\n        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n          <button\r\n            className=\"poll-btn\"\r\n            onClick={() =>\r\n              setShowDeleteModal({ open: false, id: null, type: \"\" })\r\n            }\r\n            style={{\r\n              border: \"1px solid black\",\r\n            }}\r\n          >\r\n            Not Now\r\n          </button>\r\n          <button\r\n            className=\"poll-btn\"\r\n            onClick={() =>\r\n              formType === \"feedback\"\r\n                ? handleDeleteFeedbackPoll(type, id)\r\n                : formType === \"multiple\"\r\n                ? handleDeletePoll(type, id)\r\n                : null\r\n            }\r\n            style={{\r\n              border: \"1px solid black\",\r\n            }}\r\n          >\r\n            Delete Poll\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { BACKSTAGE_COLLECTION } from \"../Constants/CollectionConstants\";\r\nimport firebase, { firestore } from \"../Firebase/index\";\r\n\r\nexport const NotificationManager = {\r\n  addNotification: (notificaton, eventId, userId) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        let docRef = firestore\r\n          .collection(BACKSTAGE_COLLECTION)\r\n          .doc(\"notification\");\r\n        await docRef.set({\r\n          ...notificaton,\r\n          eventId: eventId,\r\n          userId: userId,\r\n          timestamp: firebase.firestore.Timestamp.now(),\r\n        });\r\n        res();\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n\r\n  publishNotification: (id, data) => {\r\n    return new Promise(async (res, rej) => {\r\n      try {\r\n        const ref = firestore.collection(BACKSTAGE_COLLECTION);\r\n        await ref.doc(id).update(data);\r\n        res(\"success\");\r\n      } catch (error) {\r\n        rej(error);\r\n      }\r\n    });\r\n  },\r\n  getNotification: (eventId, callback = () => console.log(\"noFunFound\")) => {\r\n    const ref = firestore\r\n      .collection(BACKSTAGE_COLLECTION)\r\n      .where(\"eventId\", \"==\", eventId);\r\n    ref.onSnapshot(\r\n      (query) => {\r\n        if (query.empty) {\r\n          callback([]);\r\n        }\r\n        let _data = query.docs.map((doc) => {\r\n          let record = { id: doc.id, ...doc.data() };\r\n          return record;\r\n        });\r\n        callback(_data);\r\n      },\r\n      (err) => {\r\n        callback(null, err);\r\n      }\r\n    );\r\n  },\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { NotificationManager } from \"../../Managers/NotificationManager\";\r\n\r\nexport default function PollContainer(props) {\r\n  const { id: eventId, isPollUser } = props;\r\n\r\n  const { user } = useContext(UserContext);\r\n\r\n  const [pollNotification, setPollNotification] = useState({});\r\n  const [pollNotificationForm, setPollNotificationForm] = useState({\r\n    notification: \"\",\r\n    published: false,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getPollNotification();\r\n  }, []);\r\n\r\n  const getPollNotification = () => {\r\n    setLoading(true);\r\n    NotificationManager.getNotification(eventId, (data, err) => {\r\n      if (err) {\r\n        setLoading(false);\r\n        // console.log(err)\r\n        return;\r\n      }\r\n      setPollNotification(data[0]);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  const handleNotificationSubmit = async (type, id, updatedData) => {\r\n    // handling save button\r\n    if (type === \"save\") {\r\n      return new Promise(async (res, rej) => {\r\n        try {\r\n          await NotificationManager.addNotification(\r\n            pollNotificationForm,\r\n            eventId,\r\n            user.uid\r\n          );\r\n          // updating saved form data array\r\n          getPollNotification();\r\n          setPollNotification({\r\n            notification: \"\",\r\n            published: false,\r\n          });\r\n          res();\r\n        } catch (error) {\r\n          rej(error);\r\n        }\r\n      });\r\n    }\r\n    if (type === \"publish\") {\r\n      const result = await NotificationManager.publishNotification(id, {\r\n        published: updatedData,\r\n      });\r\n      if (result === \"success\") {\r\n        setPollNotification({ ...pollNotification, published: updatedData });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isPollUser && (\r\n        <div className=\"communityBox__body\">\r\n          <div className=\"poll-form-container\">\r\n            {/* Feedback form start */}\r\n            <div className=\"poll-form\">\r\n              <input\r\n                autoFocus\r\n                type=\"text\"\r\n                placeholder=\"Write text here...\"\r\n                value={pollNotificationForm.notification}\r\n                onChange={(e) =>\r\n                  setPollNotificationForm({\r\n                    notification: e.target.value,\r\n                    published: false,\r\n                  })\r\n                }\r\n                required\r\n              />\r\n\r\n              <button\r\n                className=\"poll-btn\"\r\n                onClick={() => handleNotificationSubmit(\"save\")}\r\n                style={{ border: \"1px solid black\", alignSelf: \"center\" }}\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            {/* End of feedback form */}\r\n          </div>\r\n          {loading && <div style={{ marginTop: \"1rem\" }}>Please wait...</div>}\r\n\r\n          <div className=\"poll-form poll-form-data\">\r\n            <p\r\n              style={{\r\n                paddingTop: \"10px\",\r\n                marginBottom: \"25px\",\r\n                fontWeight: 600,\r\n              }}\r\n            >\r\n              {pollNotification?.notification}\r\n            </p>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <button\r\n                className=\"poll-btn\"\r\n                onClick={() =>\r\n                  handleNotificationSubmit(\r\n                    \"publish\",\r\n                    pollNotification?.id,\r\n                    pollNotification?.published ? false : true\r\n                  )\r\n                }\r\n                style={{\r\n                  border: \"1px solid black\",\r\n                  fontWeight: \"700\",\r\n                }}\r\n              >\r\n                {pollNotification?.published ? \"Unpublish\" : \"Publish\"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport Menu from \"../../Containers/Menu/Menu\";\r\nimport PrivateChat from \"../../Containers/PrivateChat/PrivateChat\";\r\nimport PublicChat from \"../../Containers/PublicChat/PublicChat\";\r\nimport { UserContext } from \"../../Context/Auth/UserContextProvider\";\r\nimport { MenuStates, UIContext } from \"../../Context/UIContextProvider\";\r\nimport PollContainer from \"../../Containers/PollContainer/PollContainer\";\r\nimport NotificationContainer from \"../../Containers/NotificationContainer/NotificationContainer\";\r\nimport Loader from \"../../Containers/Loader/Loader\";\r\nimport { ChatContext } from \"../../Context/Chat/ChatContextProvider\";\r\n\r\nexport default function Home() {\r\n  const { activeMenu, isPollAdmin } = useContext(UIContext);\r\n  const { publicRoomName, rawUserData } = useContext(ChatContext);\r\n  const { user } = useContext(UserContext);\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <aside className=\"sidebar active\">\r\n        <header className=\"headerBox\">\r\n          <Menu />\r\n        </header>\r\n        {user && user.isChecked ? (\r\n          <>\r\n            {activeMenu === MenuStates.participants && <PrivateChat />}\r\n\r\n            {activeMenu === MenuStates.publicChat && (\r\n              <PublicChat\r\n                room={{ roomId: publicRoomName }}\r\n                rawUserData={rawUserData}\r\n              />\r\n              //to change publicRoom from url pass URLParam publicRoom=roomId\r\n            )}\r\n            {activeMenu === MenuStates.polls && (\r\n              <PollContainer id={publicRoomName} isPollUser={!isPollAdmin} />\r\n              // can pass videoCall RoomId, which we are using for inCallMessages rightNow\r\n              // to showPoll pass URL Param showPoll=true\r\n              // to showPollAdAdmin pass URL Param pollAdmin=true\r\n            )}\r\n            {activeMenu === MenuStates.notification && (\r\n              <NotificationContainer\r\n                id={publicRoomName}\r\n                isPollUser={!isPollAdmin}\r\n              />\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Loader />\r\n          </>\r\n        )}\r\n      </aside>\r\n    </div>\r\n  );\r\n}\r\n","// import { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport Home from \"./Pages/Home\";\r\n// import Login from \"./Pages/Login\";\r\n// import Register from \"./Pages/Register\";\r\n// import { LOGIN_ROUTE, REGISTER_ROUTE, RootRoute } from \"./Constants/RouteConstants\";\r\n// import ProtectedRoute from \"./Containers/ProtectedRoute\";\r\n// import UnprotectedRoute from \"./Containers/UnprotectedRoute\";\r\nimport { UIContextProvider } from \"./Context/UIContextProvider\";\r\nimport ChatContextProvider from \"./Context/Chat/ChatContextProvider\"\r\nimport \"./App.css\"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <UIContextProvider>\r\n        <ChatContextProvider>\r\n          <Home />\r\n        </ChatContextProvider>\r\n      </UIContextProvider>\r\n      {/* <Router>\r\n        <Switch>\r\n\r\n          <UnprotectedRoute redirectTo={RootRoute} path={REGISTER_ROUTE}>\r\n            <Register />\r\n          </UnprotectedRoute>\r\n\r\n          <UnprotectedRoute redirectTo={RootRoute} path={LOGIN_ROUTE}>\r\n            <Login />\r\n          </UnprotectedRoute>\r\n\r\n          <ProtectedRoute redirectTo={LOGIN_ROUTE} path={RootRoute}>\r\n            <Home />\r\n          </ProtectedRoute>\r\n        </Switch>\r\n      </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport UserContextProvider from './Context/Auth/UserContextProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <UserContextProvider>\r\n      <App />\r\n    </UserContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}