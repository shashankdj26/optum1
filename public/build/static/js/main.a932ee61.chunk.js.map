{"version":3,"sources":["firebase.js","components/client-chat/PublicChat.js","App.js","serviceWorker.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authx","auth","dbx","firestore","fieldValue","storage","database","FieldValue","PublicChat","props","state","error","isLoading","messages","channels","replied","lastMessageTime","activeMessages","publicChannelMembers","publicChannel","activeChannel","activeTab","activeMember","searchText","chatuser","notifyEmail","handleError","console","setState","setupChatClient","client","getChannelByUniqueName","user","channelId","then","channel","catch","body","code","createChannel","uniqueName","friendlyName","channelName","isPrivate","join","getMessages","messagePage","messagesLoaded","on","message","messageAdded","setInterval","getMembers","membersLoaded","subscribeChannel","getSubscribedChannels","paginator","items","forEach","subscribeChannelMessages","twilioMessageToMessage","id","sid","text","attributes","timestamp","dateCreated","setCurrentTab","tab","onPublicChanelClick","members","map","member","toMember","identity","filter","vars","split","name","activateChannel","length","handleOnline","SaveForNotify","toemail","collection","doc","get","exists","update","notify_to","date","Date","now","set","log","PublicMessageAddedInFirebase","msg","msgby","serverTimestamp","sentby","PrivateMessageAddedInFirebase","receiver","sender","msgbetween","reciever","previousMessage","push","scroll","value","value1","sendMessage","event","current","email","onMemberClick","ids","sort","setupChannel","invite","reason","e","setTimeout","maxScrollTop","messageDiv","scrollHeight","clientHeight","scrollTop","onSearchTextChange","React","createRef","onAuthStateChanged","uid","displayName","fetch","headers","method","encodeURIComponent","this","res","json","data","Chat","create","token","shutdown","className","alt","src","toLocaleLowerCase","includes","x","y","xTimestamp","setFullYear","getFullYear","onClick","type","placeholder","ref","search","onChange","target","key","style","display","onKeyPress","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a932ee61.chunk.js","sourcesContent":["import app from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/database\";\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyCLrOZLt39XFK0Drm84JAWWKcAmMxYw5wY\",\r\n  authDomain: \"r1rcm-virtual-event.firebaseapp.com\",\r\n  databaseURL: \"https://r1rcm-virtual-event.firebaseio.com\",\r\n  projectId: \"r1rcm-virtual-event\",\r\n  storageBucket: \"r1rcm-virtual-event.appspot.com\",\r\n  messagingSenderId: \"633596592870\",\r\n  appId: \"1:633596592870:web:f9bdb2d8ed3ec72787f127\",\r\n  measurementId: \"G-47FXCVZYPH\"\r\n};\r\n\r\napp.initializeApp(config);\r\nconst authx = app.auth();\r\nconst dbx = app.firestore();\r\nconst storage = app.storage();\r\nconst rdbx = app.database();\r\nconst rdatabasex = app.database;\r\nconst fieldValue = app.firestore.FieldValue;\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    this.app = app;\r\n    this.auth = app.auth();\r\n    this.db = app.firestore();\r\n    this.firestore = app.firestore();\r\n    this.database = app.database();\r\n  }\r\n}\r\n\r\nexport default Firebase;\r\nexport { dbx, authx, storage, rdbx, rdatabasex, fieldValue };\r\n","import React, { Component } from \"react\";\r\n// import \"./PublicChat.css\";\r\nimport Chat from \"twilio-chat\";\r\nimport PropTypes from \"prop-types\";\r\nimport { authx, dbx, fieldValue } from \"../../firebase\";\r\nimport { instanceOf } from \"prop-types\";\r\n\r\nclass PublicChat extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoading: true,\r\n    messages: {},\r\n    channels: {},\r\n    replied: {},\r\n    lastMessageTime: {},\r\n    activeMessages: [],\r\n    publicChannelMembers: [],\r\n    publicChannel: null,\r\n    activeChannel: null,\r\n    activeTab: \"tab1\",\r\n    activeMember: null,\r\n    searchText: \"\",\r\n    chatuser: null,\r\n    notifyEmail: \"\",\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.user = {\r\n      channelId: props.channel.id,\r\n      channelName: props.channel.name,\r\n      id: props.user.id,\r\n      name: props.user.name,\r\n    };\r\n\r\n    this.message = React.createRef();\r\n    this.messageDiv = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    authx.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        // User is signed in.\r\n        console.log(user.uid);\r\n        this.setState({\r\n          chatuser: { email: user.email, name: user.displayName },\r\n        });\r\n      } else {\r\n        // No user is signed in.\r\n        this.setState({\r\n          chatuser: { email: \"TestUser3@dd.com\", name: \"TestUser3\" },\r\n        });\r\n      }\r\n    });\r\n\r\n    fetch(\r\n      \"https://twilio-chat-api-dot-virtualeventdemo.el.r.appspot.com/chat/token\",\r\n      {\r\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        method: \"POST\",\r\n        body: `identity=${encodeURIComponent(\r\n          this.user.id + \",\" + this.user.name\r\n        )}`,\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => Chat.create(data.token))\r\n      .then(this.setupChatClient)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  handleError = (error) => {\r\n    console.error(error);\r\n    this.setState({\r\n      error: \"Could not load chat.\",\r\n    });\r\n  };\r\n\r\n  setupChatClient = (client) => {\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName(this.user.channelId)\r\n      .then((channel) => channel)\r\n      .catch((error) => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({\r\n            uniqueName: this.user.channelId,\r\n            friendlyName: this.user.channelName,\r\n            isPrivate: false,\r\n          });\r\n        } else {\r\n          this.handleError(error);\r\n        }\r\n      })\r\n      .then((channel) => {\r\n        this.setState({ publicChannel: channel });\r\n        return this.state.publicChannel.join().catch(() => {});\r\n      })\r\n      .then(() => {\r\n        var self = this;\r\n        this.setState({ isLoading: false });\r\n        this.state.publicChannel\r\n          .getMessages()\r\n          .then((messagePage) =>\r\n            this.messagesLoaded(this.state.publicChannel, messagePage, true)\r\n          );\r\n        this.state.publicChannel.on(\"messageAdded\", (message) =>\r\n          this.messageAdded(this.state.publicChannel, message)\r\n        );\r\n        setInterval(() => {\r\n          this.state.publicChannel.getMembers().then(this.membersLoaded);\r\n        }, 1000);\r\n\r\n        // setTimeout(()=>{\r\n        //     self.setCurrentTab(\"tab2\");\r\n        // }, 1500)\r\n      })\r\n      .catch(this.handleError);\r\n\r\n    this.client.on(\"channelInvited\", (channel) => {\r\n      channel.join();\r\n      this.subscribeChannel(channel);\r\n    });\r\n\r\n    this.client.getSubscribedChannels().then((paginator) => {\r\n      paginator.items.forEach((channel) => {\r\n        this.subscribeChannel(channel);\r\n      });\r\n    });\r\n  };\r\n\r\n  subscribeChannel(channel) {\r\n    let channels = this.state.channels;\r\n    channels[channel.uniqueName] = channel;\r\n    this.setState({ channels: channels });\r\n    this.subscribeChannelMessages(channel);\r\n  }\r\n\r\n  subscribeChannelMessages = (channel) => {\r\n    channel\r\n      .getMessages()\r\n      .then((messagePage) => this.messagesLoaded(channel, messagePage, false));\r\n    channel.on(\"messageAdded\", (message) => \r\n      this.messageAdded(channel, message)\r\n    );\r\n  };\r\n\r\n  twilioMessageToMessage = (message) => {\r\n    return {\r\n      id: message.sid,\r\n      text: message.body,\r\n      user: message.attributes.user || {},\r\n      timestamp: message.dateCreated,\r\n    };\r\n  };\r\n\r\n  setCurrentTab = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n    if (tab == \"tab1\") {\r\n      this.onPublicChanelClick();\r\n    } else if (tab == \"tab2\") {\r\n      this.setState({ activeChannel: null });\r\n    }\r\n  };\r\n\r\n  membersLoaded = (members) => {\r\n    let publicChannelMembers = members\r\n      .map((member) => this.toMember(member.identity))\r\n      .filter((member) => member.id != this.user.id);\r\n    this.setState({ publicChannelMembers: publicChannelMembers });\r\n  };\r\n\r\n  toMember = (identity) => {\r\n    let vars = identity.split(\",\");\r\n    return { id: vars[0], name: vars[1], identity: identity };\r\n  };\r\n\r\n  messagesLoaded = (channel, messagePage, activateChannel) => {\r\n    let messages = this.state.messages;\r\n    messages[channel.sid] = messagePage.items.map(this.twilioMessageToMessage);\r\n    this.setState({ messages: messages });\r\n\r\n    if (messagePage.items.length > 0) {\r\n      let message = messages[channel.sid][messagePage.items.length - 1];\r\n      if (message.user.name == this.user.name) {\r\n        this.handleOnline(channel, message, true);\r\n      } else {\r\n        this.handleOnline(channel, message, false);\r\n      }\r\n    }\r\n\r\n    if (activateChannel) {\r\n      this.activateChannel(channel);\r\n    }\r\n  };\r\n\r\n  SaveForNotify = (toemail) => {\r\n    dbx\r\n      .collection(\"ChatNotification\")\r\n      .doc(toemail)\r\n      .get()\r\n      .then(function (doc) {\r\n        if (doc.exists) {\r\n          dbx.collection(\"ChatNotification\").doc(toemail).update({\r\n            notify_to: toemail,\r\n            date: Date.now(),\r\n          });\r\n        } else {\r\n          // doc.data() will be undefined in this case\r\n          dbx.collection(\"ChatNotification\").doc(toemail).set({\r\n            notify_to: toemail,\r\n            date: Date.now(),\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n  };\r\n\r\n  \r\n\r\n  PublicMessageAddedInFirebase = (msg, msgby) => {\r\n    dbx\r\n      .collection(\"PublicChatData\")\r\n      .doc()\r\n      .set({\r\n        date: fieldValue.serverTimestamp(),\r\n        message: msg,\r\n        sentby: msgby,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Success updating document:\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error updating document:\", error);\r\n      });\r\n  };\r\n\r\n  PrivateMessageAddedInFirebase = (msg, channel, receiver, sender) => {\r\n    dbx\r\n      .collection(\"PrivateChatData\")\r\n      .doc()\r\n      .set({\r\n        date: fieldValue.serverTimestamp(),\r\n        message: msg,\r\n        msgbetween: channel,\r\n        reciever: receiver,\r\n        sender: sender,\r\n      })\r\n      .then(function () {\r\n        console.log(\"Success updating document:\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error updating document:\", error);\r\n      });\r\n  };\r\n\r\n  messageAdded = (channel, message) => {\r\n    if (this.previousMessage == null) {\r\n      this.previousMessage = message;\r\n    } else if (this.previousMessage.sid == message.sid) {\r\n      return;\r\n    }\r\n    this.previousMessage = message;\r\n\r\n    let messages = this.state.messages;\r\n    message = this.twilioMessageToMessage(message);\r\n    console.log(message)\r\n    console.log(channel.sid)\r\n\r\n    if (messages[channel.sid]) {\r\n      messages[channel.sid].push(message);\r\n    } else {\r\n      messages[channel.sid] = [];\r\n      messages[channel.sid].push(message);\r\n    }\r\n    console.log( messages[channel.sid]);\r\n    this.setState({ messages: messages });\r\n\r\n    if (message.user.name == this.user.name) {\r\n      this.handleOnline(channel, message, true);\r\n    } else {\r\n      this.handleOnline(channel, message, false);\r\n    }\r\n\r\n    if (\r\n      channel.sid == (this.state.activeChannel && this.state.activeChannel.sid)\r\n    ) {\r\n      this.scroll();\r\n    }\r\n\r\n    //this.GetNotification();\r\n\r\n\r\n    // if (this.state.activeTab == \"tab2\") {\r\n    //   console.log(\"Message Sent To: \" + this.state.activeMember.id);\r\n    //   console.log(\"Message Sent By: \" + this.state.chatuser.email);\r\n    //   console.log(\"Channel: \" + channel.uniqueName);\r\n    //   console.log(\"Message: \" + message.text);\r\n    // }\r\n\r\n    // if (this.state.activeTab == \"tab1\") {\r\n    //   console.log(\"Message Sent By: \" + this.state.chatuser.email);\r\n    //   console.log(\"Channel: \" + channel.friendlyName);\r\n    //   console.log(\"Message: \" + message.text);\r\n    // }\r\n  };\r\n\r\n  handleOnline = (channel, message, value) => {\r\n    let replied = this.state.replied;\r\n    let id = channel.uniqueName\r\n      .split(\",\")\r\n      .filter((value1) => value1 != this.user.id)[0];\r\n    if (value == true) {\r\n      delete replied[id];\r\n      // console.log(\"delete\");\r\n    } else {\r\n      replied[id] = value;\r\n      // console.log(replied);\r\n    }\r\n\r\n    //console.log(\"id \"+ id + \" replied \"+value);\r\n    this.setState({ replied: replied });\r\n\r\n    let lastMessageTime = this.state.lastMessageTime;\r\n    lastMessageTime[id] = message.timestamp;\r\n    this.setState({ lastMessageTime: lastMessageTime });\r\n  };\r\n\r\n  sendMessage = (event) => {\r\n    if (this.message.current.value) {\r\n      this.state.activeChannel.sendMessage(this.message.current.value, {\r\n        user: this.user,\r\n      });\r\n\r\n      if (this.state.activeTab == \"tab1\") {\r\n\r\n        this.PublicMessageAddedInFirebase(\r\n          this.message.current.value,\r\n          this.state.chatuser.email\r\n        );\r\n      }\r\n\r\n      if (this.state.activeTab == \"tab2\") {\r\n\r\n        this.PrivateMessageAddedInFirebase(\r\n          this.message.current.value,\r\n          this.state.activeChannel.uniqueName,\r\n          this.state.activeMember.id,\r\n          this.state.chatuser.email\r\n        );\r\n\r\n        this.SaveForNotify(this.state.activeMember.id);\r\n      }\r\n      this.message.current.value = \"\";\r\n      // this.activateChannel(this.state.activeChannel)\r\n      this.setState({ activeMessages: this.state.messages[this.state.activeChannel.sid] });\r\n\r\n    }\r\n  };\r\n\r\n  onMemberClick = (member) => {\r\n    let ids = [member.id, this.user.id];\r\n    ids.sort();\r\n    let channelId = ids.join();\r\n\r\n    if (this.state.channels[channelId] == null) {\r\n      this.setupChannel(this.client, channelId, member);\r\n    } else {\r\n      this.activateChannel(this.state.channels[channelId]);\r\n      this.setState({ activeMember: member });\r\n    }\r\n  };\r\n\r\n  setupChannel = (client, channelId, member) => {\r\n    this.client = client;\r\n    this.client\r\n      .getChannelByUniqueName(channelId)\r\n      .then((channel) => channel)\r\n      .catch((error) => {\r\n        if (error.body.code === 50300) {\r\n          return this.client.createChannel({\r\n            uniqueName: channelId,\r\n            isPrivate: true,\r\n          });\r\n        } else {\r\n          this.handleError(error);\r\n        }\r\n      })\r\n      .then((channel) => {\r\n        this.channel = channel;\r\n        return this.channel.join().catch(() => {});\r\n      })\r\n      .then(() => {\r\n        try {\r\n          this.channel\r\n            .invite(member.identity)\r\n            .catch((reason) => console.log(reason));\r\n        } catch (e) {}\r\n        this.subscribeChannel(this.channel);\r\n        this.setState({ activeMember: member });\r\n      })\r\n      .catch(this.handleError);\r\n  };\r\n\r\n  activateChannel = (channel) => {\r\n    this.setState({ activeChannel: channel });\r\n    this.setState({ activeMessages: this.state.messages[channel.sid] });\r\n    this.scroll();\r\n  };\r\n\r\n  onPublicChanelClick = () => {\r\n    this.activateChannel(this.state.publicChannel);\r\n    setTimeout(this.scroll, 100);\r\n  };\r\n\r\n  scroll = () => {\r\n    console.log(\"scroll\");\r\n    const scrollHeight = this.messageDiv.current.scrollHeight;\r\n    const height = this.messageDiv.current.clientHeight;\r\n    const maxScrollTop = scrollHeight - height;\r\n    this.messageDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n  };\r\n\r\n  onSearchTextChange = (value) => {\r\n    this.setState({ searchText: value });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.client.shutdown();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <div className=\"fullScr\">{this.state.error}</div>;\r\n    } else if (this.state.isLoading) {\r\n      return <div className=\"fullScr\"><img alt=\"loader\" src=\"/assets/images/Loader.gif\"></img></div>\r\n    }\r\n\r\n    let searchText = this.state.searchText;\r\n    let publicChannelMembers = this.state.publicChannelMembers\r\n      .filter((member) => {\r\n        return searchText == \"\"\r\n          ? true\r\n          : (member.name || \"\")\r\n              .toLocaleLowerCase()\r\n              .includes(searchText.toLocaleLowerCase());\r\n      })\r\n      .sort((x, y) => {\r\n        let xTimestamp = this.state.lastMessageTime[x.id]\r\n          ? this.state.lastMessageTime[x.id]\r\n          : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\r\n        let yTimestamp = this.state.lastMessageTime[y.id]\r\n          ? this.state.lastMessageTime[y.id]\r\n          : new Date(new Date().setFullYear(new Date().getFullYear() - 1));\r\n        return yTimestamp - xTimestamp;\r\n      });\r\n\r\n    //console.log(publicChannelMembers);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"wrapper h-100\">\r\n          {/* <header className=\"header\">\r\n            <a href=\"#\" className=\"header__logo\">\r\n              <img src=\"assets/images/logo.png\" alt=\"\" />\r\n            </a>\r\n          </header> */}\r\n          <div className=\"contentCntr\">\r\n            <aside className=\"sidebar show-on-desktop\">\r\n              <div className=\"sidebar__header\">\r\n                <div className=\"sidebar__user\">\r\n                  <div className=\"user-block\">\r\n                    <div className=\"user-block__pic\">\r\n                      <img src=\"assets/images/Profile-picture.png\" alt=\"\" />\r\n                      {/* <span className=\"user-block__online\"></span> */}\r\n                    </div>\r\n                    <span className=\"user-block__name\">{this.user.name}</span>\r\n                  </div>\r\n                </div>\r\n                <a\r\n                  className=\"sidebar__link\"\r\n                  onClick={(event) => this.onPublicChanelClick()}\r\n                >\r\n                  {this.user.channelName}\r\n                </a>\r\n                <a className=\"sidebar__link\">\r\n                  Chat ({publicChannelMembers.length})\r\n                </a>\r\n              </div>\r\n\r\n              <div className=\"sidebar__body\">\r\n                <div className=\"search-block\">\r\n                  <div className=\"search-block__form\">\r\n                    <input\r\n                      className=\"search-block__input\"\r\n                      type=\"text\"\r\n                      placeholder=\"Search\"\r\n                      ref={this.search}\r\n                      onChange={(event) =>\r\n                        this.onSearchTextChange(event.target.value)\r\n                      }\r\n                    />\r\n                    <button className=\"search-block__btn\">\r\n                      <i className=\"icon-search\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"user-block-list\">\r\n                  <div>\r\n                    {publicChannelMembers.map((member) => (\r\n                      <div\r\n                        className=\"user-block\"\r\n                        key={member.id}\r\n                        onClick={(event) => this.onMemberClick(member)}\r\n                      >\r\n                        <div className=\"user-block__pic\">\r\n                          <img src=\"assets/images/Profile-picture.png\" alt=\"\" />\r\n                          <span\r\n                            className={\r\n                              this.state.replied[member.id] == true\r\n                                ? \"\"\r\n                                : \"user-block__dnd\"\r\n                            }\r\n                          ></span>\r\n                        </div>\r\n                        <span className=\"user-block__name\">\r\n                          {member.name || member.id}\r\n                        </span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </aside>\r\n\r\n            <section className=\"chat-container\">\r\n              <div className=\"chat-section\">\r\n                <div className=\"chat-section__header chat-section__tabs hide-on-desktop\">\r\n                  <ul>\r\n                    <li onClick={(event) => this.setCurrentTab(\"tab1\")}>\r\n                      <a\r\n                        className={\r\n                          (this.state.activeChannel &&\r\n                            this.state.activeChannel.uniqueName) ==\r\n                          this.user.channelId\r\n                            ? \"active\"\r\n                            : \"\"\r\n                        }\r\n                      >\r\n                        {this.user.channelName}\r\n                      </a>\r\n                    </li>\r\n                    <li onClick={(event) => this.setCurrentTab(\"tab2\")}>\r\n                      <a\r\n                        className={\r\n                          this.state.activeTab == \"tab2\" ? \"active\" : \"\"\r\n                        }\r\n                      >\r\n                        ALL PARTICIPIANTS ({publicChannelMembers.length})\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"chat-section__header\"\r\n                  style={{ display: this.state.activeChannel ? \"\" : \"none\" }}\r\n                >\r\n                  <div className=\"user-block\">\r\n                    <div className=\"user-block__pic\">\r\n                      <img src=\"assets/images/Profile-picture.png\" alt=\"\" />\r\n                    </div>\r\n                    <span className=\"user-block__name\">\r\n                      {(this.state.activeChannel &&\r\n                        this.state.activeChannel.friendlyName) ||\r\n                        (this.state.activeMember &&\r\n                          this.state.activeMember.name)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"chat-section__body chat-section__body--list\">\r\n                  <div\r\n                    className=\"chat-section\"\r\n                    style={{ display: this.state.activeChannel ? \"\" : \"none\" }}\r\n                  >\r\n                    <div className=\"chat-section__body\" ref={this.messageDiv}>\r\n                      {this.state.activeMessages &&\r\n                        this.state.activeMessages.map((message) => (\r\n                          <div\r\n                            className={`chat-section__message chat-section__message--${\r\n                              this.user.id == message.user.id\r\n                                ? \"sent\"\r\n                                : \"received\"\r\n                            }`}\r\n                            key={message.id}\r\n                          >\r\n                            {this.user.id == message.user.id && (\r\n                              <>\r\n                                {\" \"}\r\n                                <span className=\"chat-section__text\">\r\n                                  {message.text}\r\n                                </span>\r\n                                <span className=\"chat-section__profile\">\r\n                                  <span className=\"chat-section__profile__pic\">\r\n                                    <img\r\n                                      src=\"assets/images/Profile-picture-black.png\"\r\n                                      alt=\"\"\r\n                                    />\r\n                                  </span>\r\n                                  {message.user.name}\r\n                                </span>\r\n                              </>\r\n                            )}\r\n                            {this.user.id != message.user.id && (\r\n                              <>\r\n                                <span className=\"chat-section__profile\">\r\n                                  <span className=\"chat-section__profile__pic\">\r\n                                    <img\r\n                                      src=\"assets/images/Profile-picture-black.png\"\r\n                                      alt=\"\"\r\n                                    />\r\n                                    {message.user.name}\r\n                                  </span>\r\n                                </span>\r\n                                <span className=\"chat-section__text\">\r\n                                  {message.text}\r\n                                </span>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    {this.state.activeChannel && (\r\n                      <div className=\"chat-section__footer\">\r\n                        <div className=\"chat-section__form\">\r\n                          <input\r\n                            ref={this.message}\r\n                            type=\"text\"\r\n                            className=\"chat-section__input\"\r\n                            placeholder=\"Type a Message\"\r\n                            onKeyPress={(event) =>\r\n                              event.key === \"Enter\" && this.sendMessage(event)\r\n                            }\r\n                          ></input>\r\n                          <button\r\n                            onClick={(event) => this.sendMessage(event)}\r\n                            className=\"chat-section__btn\"\r\n                          >\r\n                            <i className=\"icon-send\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"sidebar__body\"\r\n                    style={{\r\n                      display:\r\n                        this.state.activeChannel == null &&\r\n                        this.state.activeTab != \"tab1\"\r\n                          ? \"\"\r\n                          : \"none\",\r\n                    }}\r\n                  >\r\n                    <div className=\"sidebar__body\">\r\n                      <div className=\"search-block\">\r\n                        <div className=\"search-block__form\">\r\n                          <input\r\n                            className=\"search-block__input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            ref={this.search}\r\n                            onChange={(event) =>\r\n                              this.onSearchTextChange(event.target.value)\r\n                            }\r\n                          />\r\n                          <button className=\"search-block__btn\">\r\n                            <i className=\"icon-search\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"user-block-list\">\r\n                        <div>\r\n                          {publicChannelMembers.map((member) => (\r\n                            <div\r\n                              className=\"user-block\"\r\n                              key={member.id}\r\n                              onClick={(event) => this.onMemberClick(member)}\r\n                            >\r\n                              <div className=\"user-block__pic\">\r\n                                <img\r\n                                  src=\"assets/images/Profile-picture-black.png\"\r\n                                  alt=\"\"\r\n                                />\r\n                                {this.state.replied[member.id] != null && (\r\n                                  <span\r\n                                    className={\r\n                                      this.state.replied[member.id] == true\r\n                                        ? \"\"\r\n                                        : \"user-block__dnd\"\r\n                                    }\r\n                                  ></span>\r\n                                )}\r\n                              </div>\r\n                              <span className=\"user-block__name\">\r\n                                {member.name || member.id}\r\n                              </span>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nPublicChat.propTypes = {\r\n  channel: PropTypes.object,\r\n  user: PropTypes.object,\r\n};\r\n\r\nexport default PublicChat;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport PublicChat from \"./components/client-chat/PublicChat\";\r\nimport { authx } from \"./firebase\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    authx.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        // User is signed in.\r\n        console.log(user.uid);\r\n        this.setState({ user: { id: user.email, name: user.displayName } });\r\n      } else {\r\n        // No user is signed in.\r\n        this.setState({ user: { id: \"adminUser9@dd.com\", name: \"user\" } });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.user != null && (\r\n          <PublicChat\r\n            channel={{ id: \"R1rcmPublicChatRoom\", name: \"Public Chat\" }}\r\n            user={{ id: this.state.user.id, name: this.state.user.name }}\r\n          >\r\n            {\" \"}\r\n          </PublicChat>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"rootchat\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}